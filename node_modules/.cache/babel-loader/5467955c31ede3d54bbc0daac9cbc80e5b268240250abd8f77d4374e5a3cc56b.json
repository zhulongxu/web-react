{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Dom, Vector } from '@antv/x6-common';\nimport * as Registry from '../registry';\nimport { Base } from './base';\nexport class GridManager extends Base {\n  get elem() {\n    return this.view.grid;\n  }\n  get grid() {\n    return this.options.grid;\n  }\n  init() {\n    this.startListening();\n    this.draw(this.grid);\n  }\n  startListening() {\n    this.graph.on('scale', this.update, this);\n    this.graph.on('translate', this.update, this);\n  }\n  stopListening() {\n    this.graph.off('scale', this.update, this);\n    this.graph.off('translate', this.update, this);\n  }\n  setVisible(visible) {\n    if (this.grid.visible !== visible) {\n      this.grid.visible = visible;\n      this.update();\n    }\n  }\n  getGridSize() {\n    return this.grid.size;\n  }\n  setGridSize(size) {\n    this.grid.size = Math.max(size, 1);\n    this.update();\n  }\n  show() {\n    this.setVisible(true);\n    this.update();\n  }\n  hide() {\n    this.setVisible(false);\n    this.update();\n  }\n  clear() {\n    this.elem.style.backgroundImage = '';\n  }\n  draw(options) {\n    this.clear();\n    this.instance = null;\n    Object.assign(this.grid, options);\n    this.patterns = this.resolveGrid(options);\n    this.update();\n  }\n  update(options = {}) {\n    const gridSize = this.grid.size;\n    if (gridSize <= 1 || !this.grid.visible) {\n      return this.clear();\n    }\n    const ctm = this.graph.matrix();\n    const grid = this.getInstance();\n    const items = Array.isArray(options) ? options : [options];\n    this.patterns.forEach((settings, index) => {\n      const id = `pattern_${index}`;\n      const sx = ctm.a || 1;\n      const sy = ctm.d || 1;\n      const {\n          update,\n          markup\n        } = settings,\n        others = __rest(settings, [\"update\", \"markup\"]);\n      const options = Object.assign(Object.assign(Object.assign({}, others), items[index]), {\n        sx,\n        sy,\n        ox: ctm.e || 0,\n        oy: ctm.f || 0,\n        width: gridSize * sx,\n        height: gridSize * sy\n      });\n      if (!grid.has(id)) {\n        grid.add(id, Vector.create('pattern', {\n          id,\n          patternUnits: 'userSpaceOnUse'\n        }, Vector.createVectors(markup)).node);\n      }\n      const patternElem = grid.get(id);\n      if (typeof update === 'function') {\n        update(patternElem.childNodes[0], options);\n      }\n      let x = options.ox % options.width;\n      if (x < 0) {\n        x += options.width;\n      }\n      let y = options.oy % options.height;\n      if (y < 0) {\n        y += options.height;\n      }\n      Dom.attr(patternElem, {\n        x,\n        y,\n        width: options.width,\n        height: options.height\n      });\n    });\n    const base64 = new XMLSerializer().serializeToString(grid.root);\n    const url = `url(data:image/svg+xml;base64,${btoa(base64)})`;\n    this.elem.style.backgroundImage = url;\n  }\n  getInstance() {\n    if (!this.instance) {\n      this.instance = new Registry.Grid();\n    }\n    return this.instance;\n  }\n  resolveGrid(options) {\n    if (!options) {\n      return [];\n    }\n    const type = options.type;\n    if (type == null) {\n      return [Object.assign(Object.assign({}, Registry.Grid.presets.dot), options.args)];\n    }\n    const items = Registry.Grid.registry.get(type);\n    if (items) {\n      let args = options.args || [];\n      if (!Array.isArray(args)) {\n        args = [args];\n      }\n      return Array.isArray(items) ? items.map((item, index) => Object.assign(Object.assign({}, item), args[index])) : [Object.assign(Object.assign({}, items), args[0])];\n    }\n    return Registry.Grid.registry.onNotFound(type);\n  }\n  dispose() {\n    this.stopListening();\n    this.clear();\n  }\n}\n__decorate([Base.dispose()], GridManager.prototype, \"dispose\", null);","map":{"version":3,"names":["Dom","Vector","Registry","Base","GridManager","elem","view","grid","options","init","startListening","draw","graph","on","update","stopListening","off","setVisible","visible","getGridSize","size","setGridSize","Math","max","show","hide","clear","style","backgroundImage","instance","Object","assign","patterns","resolveGrid","gridSize","ctm","matrix","getInstance","items","Array","isArray","forEach","settings","index","id","sx","a","sy","d","markup","others","__rest","ox","e","oy","f","width","height","has","add","create","patternUnits","createVectors","node","patternElem","get","childNodes","x","y","attr","base64","XMLSerializer","serializeToString","root","url","btoa","Grid","type","presets","dot","args","registry","map","item","onNotFound","dispose","__decorate"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/graph/grid.ts"],"sourcesContent":["import { Dom, Vector } from '@antv/x6-common'\nimport * as Registry from '../registry'\nimport { Base } from './base'\n\nexport class GridManager extends Base {\n  protected instance: Registry.Grid | null\n  protected patterns: Registry.Grid.Definition[]\n\n  protected get elem() {\n    return this.view.grid\n  }\n\n  protected get grid() {\n    return this.options.grid\n  }\n\n  protected init() {\n    this.startListening()\n    this.draw(this.grid)\n  }\n\n  protected startListening() {\n    this.graph.on('scale', this.update, this)\n    this.graph.on('translate', this.update, this)\n  }\n\n  protected stopListening() {\n    this.graph.off('scale', this.update, this)\n    this.graph.off('translate', this.update, this)\n  }\n\n  protected setVisible(visible: boolean) {\n    if (this.grid.visible !== visible) {\n      this.grid.visible = visible\n      this.update()\n    }\n  }\n\n  getGridSize() {\n    return this.grid.size\n  }\n\n  setGridSize(size: number) {\n    this.grid.size = Math.max(size, 1)\n    this.update()\n  }\n\n  show() {\n    this.setVisible(true)\n    this.update()\n  }\n\n  hide() {\n    this.setVisible(false)\n    this.update()\n  }\n\n  clear() {\n    this.elem.style.backgroundImage = ''\n  }\n\n  draw(options?: GridManager.DrawGridOptions) {\n    this.clear()\n    this.instance = null\n    Object.assign(this.grid, options)\n    this.patterns = this.resolveGrid(options)\n    this.update()\n  }\n\n  update(\n    options:\n      | Partial<Registry.Grid.Options>\n      | Partial<Registry.Grid.Options>[] = {},\n  ) {\n    const gridSize = this.grid.size\n    if (gridSize <= 1 || !this.grid.visible) {\n      return this.clear()\n    }\n\n    const ctm = this.graph.matrix()\n    const grid = this.getInstance()\n    const items = Array.isArray(options) ? options : [options]\n\n    this.patterns.forEach((settings, index) => {\n      const id = `pattern_${index}`\n      const sx = ctm.a || 1\n      const sy = ctm.d || 1\n\n      const { update, markup, ...others } = settings\n      const options = {\n        ...others,\n        ...items[index],\n        sx,\n        sy,\n        ox: ctm.e || 0,\n        oy: ctm.f || 0,\n        width: gridSize * sx,\n        height: gridSize * sy,\n      }\n\n      if (!grid.has(id)) {\n        grid.add(\n          id,\n          Vector.create(\n            'pattern',\n            { id, patternUnits: 'userSpaceOnUse' },\n            Vector.createVectors(markup),\n          ).node,\n        )\n      }\n\n      const patternElem = grid.get(id)\n\n      if (typeof update === 'function') {\n        update(patternElem.childNodes[0] as Element, options)\n      }\n\n      let x = options.ox % options.width\n      if (x < 0) {\n        x += options.width\n      }\n\n      let y = options.oy % options.height\n      if (y < 0) {\n        y += options.height\n      }\n\n      Dom.attr(patternElem, {\n        x,\n        y,\n        width: options.width,\n        height: options.height,\n      })\n    })\n\n    const base64 = new XMLSerializer().serializeToString(grid.root)\n    const url = `url(data:image/svg+xml;base64,${btoa(base64)})`\n    this.elem.style.backgroundImage = url\n  }\n\n  protected getInstance() {\n    if (!this.instance) {\n      this.instance = new Registry.Grid()\n    }\n\n    return this.instance\n  }\n\n  protected resolveGrid(\n    options?: GridManager.DrawGridOptions,\n  ): Registry.Grid.Definition[] | never {\n    if (!options) {\n      return []\n    }\n\n    const type = (options as Registry.Grid.NativeItem).type\n    if (type == null) {\n      return [\n        {\n          ...Registry.Grid.presets.dot,\n          ...options.args,\n        },\n      ]\n    }\n\n    const items = Registry.Grid.registry.get(type)\n    if (items) {\n      let args = options.args || []\n      if (!Array.isArray(args)) {\n        args = [args]\n      }\n\n      return Array.isArray(items)\n        ? items.map((item, index) => ({ ...item, ...args[index] }))\n        : [{ ...items, ...args[0] }]\n    }\n\n    return Registry.Grid.registry.onNotFound(type)\n  }\n\n  @Base.dispose()\n  dispose() {\n    this.stopListening()\n    this.clear()\n  }\n}\n\nexport namespace GridManager {\n  export type DrawGridOptions =\n    | Registry.Grid.NativeItem\n    | Registry.Grid.ManaualItem\n    | {\n        args?: Registry.Grid.OptionsMap['dot']\n      }\n\n  export interface CommonOptions {\n    size: number\n    visible: boolean\n  }\n\n  export type Options = CommonOptions & DrawGridOptions\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}