{"ast":null,"code":"import { Registry } from '../registry';\nimport * as connectionPoints from './main';\nexport var ConnectionPoint;\n(function (ConnectionPoint) {\n  ConnectionPoint.presets = connectionPoints;\n  ConnectionPoint.registry = Registry.create({\n    type: 'connection point'\n  });\n  ConnectionPoint.registry.register(ConnectionPoint.presets, true);\n})(ConnectionPoint || (ConnectionPoint = {}));","map":{"version":3,"names":["Registry","connectionPoints","ConnectionPoint","presets","registry","create","type","register"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/connection-point/index.ts"],"sourcesContent":["import { Point, Line } from '@antv/x6-geometry'\nimport { KeyValue } from '@antv/x6-common'\nimport { Registry } from '../registry'\nimport { Edge } from '../../model/edge'\nimport { CellView } from '../../view/cell'\nimport * as connectionPoints from './main'\n\nexport namespace ConnectionPoint {\n  export type Definition<T> = (\n    line: Line,\n    view: CellView,\n    magnet: SVGElement,\n    options: T,\n    type: Edge.TerminalType,\n  ) => Point\n\n  export type CommonDefinition = Definition<KeyValue>\n\n  export interface BaseOptions {\n    /**\n     * Offset the connection point from the anchor by the specified\n     * distance along the end edge path segment.\n     *\n     * Default is `0`.\n     */\n    offset?: number | Point.PointLike\n  }\n\n  export interface StrokedOptions extends BaseOptions {\n    /**\n     * If the stroke width should be included when calculating the\n     * connection point.\n     *\n     * Default is `false`.\n     */\n    stroked?: boolean\n  }\n}\n\nexport namespace ConnectionPoint {\n  export type Presets = (typeof ConnectionPoint)['presets']\n\n  export type OptionsMap = {\n    readonly [K in keyof Presets]-?: Parameters<Presets[K]>[3]\n  }\n\n  export type NativeNames = keyof Presets\n\n  export interface NativeItem<T extends NativeNames = NativeNames> {\n    name: T\n    args?: OptionsMap[T]\n  }\n\n  export interface ManaualItem {\n    name: Exclude<string, NativeNames>\n    args?: KeyValue\n  }\n}\n\nexport namespace ConnectionPoint {\n  export const presets = connectionPoints\n  export const registry = Registry.create<CommonDefinition, Presets>({\n    type: 'connection point',\n  })\n\n  registry.register(presets, true)\n}\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,aAAa;AAGtC,OAAO,KAAKC,gBAAgB,MAAM,QAAQ;AAsD1C,OAAM,IAAWC,eAAe;AAAhC,WAAiBA,eAAe;EACjBA,eAAA,CAAAC,OAAO,GAAGF,gBAAgB;EAC1BC,eAAA,CAAAE,QAAQ,GAAGJ,QAAQ,CAACK,MAAM,CAA4B;IACjEC,IAAI,EAAE;GACP,CAAC;EAEFJ,eAAA,CAAAE,QAAQ,CAACG,QAAQ,CAACL,eAAA,CAAAC,OAAO,EAAE,IAAI,CAAC;AAClC,CAAC,EAPgBD,eAAe,KAAfA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}