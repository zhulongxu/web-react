{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Rectangle } from '@antv/x6-geometry';\nimport { Base } from '../graph/base';\nimport { Cell } from '../model';\nimport { Scheduler } from './scheduler';\nimport { Util } from '../util';\nexport class Renderer extends Base {\n  constructor() {\n    super(...arguments);\n    this.schedule = new Scheduler(this.graph);\n  }\n  requestViewUpdate(view, flag, options = {}) {\n    this.schedule.requestViewUpdate(view, flag, options);\n  }\n  isViewMounted(view) {\n    return this.schedule.isViewMounted(view);\n  }\n  setRenderArea(area) {\n    this.schedule.setRenderArea(area);\n  }\n  findViewByElem(elem) {\n    if (elem == null) {\n      return null;\n    }\n    const container = this.options.container;\n    const target = typeof elem === 'string' ? container.querySelector(elem) : elem instanceof Element ? elem : elem[0];\n    if (target) {\n      const id = this.graph.view.findAttr('data-cell-id', target);\n      if (id) {\n        const views = this.schedule.views;\n        if (views[id]) {\n          return views[id].view;\n        }\n      }\n    }\n    return null;\n  }\n  findViewByCell(cell) {\n    if (cell == null) {\n      return null;\n    }\n    const id = Cell.isCell(cell) ? cell.id : cell;\n    const views = this.schedule.views;\n    if (views[id]) {\n      return views[id].view;\n    }\n    return null;\n  }\n  findViewsFromPoint(p) {\n    const ref = {\n      x: p.x,\n      y: p.y\n    };\n    return this.model.getCells().map(cell => this.findViewByCell(cell)).filter(view => {\n      if (view != null) {\n        return Util.getBBox(view.container, {\n          target: this.view.stage\n        }).containsPoint(ref);\n      }\n      return false;\n    });\n  }\n  findEdgeViewsFromPoint(p, threshold = 5) {\n    return this.model.getEdges().map(edge => this.findViewByCell(edge)).filter(view => {\n      if (view != null) {\n        const point = view.getClosestPoint(p);\n        if (point) {\n          return point.distance(p) <= threshold;\n        }\n      }\n      return false;\n    });\n  }\n  findViewsInArea(rect, options = {}) {\n    const area = Rectangle.create(rect);\n    return this.model.getCells().map(cell => this.findViewByCell(cell)).filter(view => {\n      if (view) {\n        if (options.nodeOnly && !view.isNodeView()) {\n          return false;\n        }\n        const bbox = Util.getBBox(view.container, {\n          target: this.view.stage\n        });\n        if (bbox.width === 0) {\n          bbox.inflate(1, 0);\n        } else if (bbox.height === 0) {\n          bbox.inflate(0, 1);\n        }\n        return options.strict ? area.containsRect(bbox) : area.isIntersectWithRect(bbox);\n      }\n      return false;\n    });\n  }\n  dispose() {\n    this.schedule.dispose();\n  }\n}\n__decorate([Base.dispose()], Renderer.prototype, \"dispose\", null);","map":{"version":3,"names":["Rectangle","Base","Cell","Scheduler","Util","Renderer","constructor","schedule","graph","requestViewUpdate","view","flag","options","isViewMounted","setRenderArea","area","findViewByElem","elem","container","target","querySelector","Element","id","findAttr","views","findViewByCell","cell","isCell","findViewsFromPoint","p","ref","x","y","model","getCells","map","filter","getBBox","stage","containsPoint","findEdgeViewsFromPoint","threshold","getEdges","edge","point","getClosestPoint","distance","findViewsInArea","rect","create","nodeOnly","isNodeView","bbox","width","inflate","height","strict","containsRect","isIntersectWithRect","dispose","__decorate"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/renderer/renderer.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Point, Rectangle } from '@antv/x6-geometry'\nimport { Base } from '../graph/base'\nimport { Cell } from '../model'\nimport { Scheduler } from './scheduler'\nimport { CellView, EdgeView } from '../view'\nimport { Util } from '../util'\n\nexport class Renderer extends Base {\n  private readonly schedule: Scheduler = new Scheduler(this.graph)\n\n  requestViewUpdate(view: CellView, flag: number, options: any = {}) {\n    this.schedule.requestViewUpdate(view, flag, options)\n  }\n\n  isViewMounted(view: CellView) {\n    return this.schedule.isViewMounted(view)\n  }\n\n  setRenderArea(area?: Rectangle) {\n    this.schedule.setRenderArea(area)\n  }\n\n  findViewByElem(elem: string | Element | undefined | null) {\n    if (elem == null) {\n      return null\n    }\n    const container = this.options.container\n    const target =\n      typeof elem === 'string'\n        ? container.querySelector(elem)\n        : elem instanceof Element\n        ? elem\n        : elem[0]\n\n    if (target) {\n      const id = this.graph.view.findAttr('data-cell-id', target)\n      if (id) {\n        const views = this.schedule.views\n        if (views[id]) {\n          return views[id].view\n        }\n      }\n    }\n\n    return null\n  }\n\n  findViewByCell(cellId: string | number): CellView | null\n  findViewByCell(cell: Cell | null): CellView | null\n  findViewByCell(\n    cell: Cell | string | number | null | undefined,\n  ): CellView | null {\n    if (cell == null) {\n      return null\n    }\n    const id = Cell.isCell(cell) ? cell.id : cell\n    const views = this.schedule.views\n    if (views[id]) {\n      return views[id].view\n    }\n\n    return null\n  }\n\n  findViewsFromPoint(p: Point.PointLike) {\n    const ref = { x: p.x, y: p.y }\n    return this.model\n      .getCells()\n      .map((cell) => this.findViewByCell(cell))\n      .filter((view) => {\n        if (view != null) {\n          return Util.getBBox(view.container as SVGElement, {\n            target: this.view.stage,\n          }).containsPoint(ref)\n        }\n        return false\n      }) as CellView[]\n  }\n\n  findEdgeViewsFromPoint(p: Point.PointLike, threshold = 5) {\n    return this.model\n      .getEdges()\n      .map((edge) => this.findViewByCell(edge))\n      .filter((view: EdgeView) => {\n        if (view != null) {\n          const point = view.getClosestPoint(p)\n          if (point) {\n            return point.distance(p) <= threshold\n          }\n        }\n        return false\n      }) as EdgeView[]\n  }\n\n  findViewsInArea(\n    rect: Rectangle.RectangleLike,\n    options: { strict?: boolean; nodeOnly?: boolean } = {},\n  ) {\n    const area = Rectangle.create(rect)\n    return this.model\n      .getCells()\n      .map((cell) => this.findViewByCell(cell))\n      .filter((view) => {\n        if (view) {\n          if (options.nodeOnly && !view.isNodeView()) {\n            return false\n          }\n\n          const bbox = Util.getBBox(view.container as SVGElement, {\n            target: this.view.stage,\n          })\n          if (bbox.width === 0) {\n            bbox.inflate(1, 0)\n          } else if (bbox.height === 0) {\n            bbox.inflate(0, 1)\n          }\n          return options.strict\n            ? area.containsRect(bbox)\n            : area.isIntersectWithRect(bbox)\n        }\n        return false\n      }) as CellView[]\n  }\n\n  @Base.dispose()\n  dispose() {\n    this.schedule.dispose()\n  }\n}\n\nexport namespace Renderer {\n  export interface FindViewsInAreaOptions {\n    strict?: boolean\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}