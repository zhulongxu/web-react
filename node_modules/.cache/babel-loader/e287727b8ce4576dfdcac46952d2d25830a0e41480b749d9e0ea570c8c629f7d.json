{"ast":null,"code":"import { attr } from './attr';\nimport { createSvgElement } from './elem';\nexport const KAPPA = 0.551784;\nfunction getNumbericAttribute(elem, attr, defaultValue = NaN) {\n  const v = elem.getAttribute(attr);\n  if (v == null) {\n    return defaultValue;\n  }\n  const n = parseFloat(v);\n  return Number.isNaN(n) ? defaultValue : n;\n}\nexport function sample(elem, interval = 1) {\n  const length = elem.getTotalLength();\n  const samples = [];\n  let distance = 0;\n  let sample;\n  while (distance < length) {\n    sample = elem.getPointAtLength(distance);\n    samples.push({\n      distance,\n      x: sample.x,\n      y: sample.y\n    });\n    distance += interval;\n  }\n  return samples;\n}\nexport function lineToPathData(line) {\n  return ['M', getNumbericAttribute(line, 'x1'), getNumbericAttribute(line, 'y1'), 'L', getNumbericAttribute(line, 'x2'), getNumbericAttribute(line, 'y2')].join(' ');\n}\nexport function polygonToPathData(polygon) {\n  const points = getPointsFromSvgElement(polygon);\n  if (points.length === 0) {\n    return null;\n  }\n  return `${svgPointsToPath(points)} Z`;\n}\nexport function polylineToPathData(polyline) {\n  const points = getPointsFromSvgElement(polyline);\n  if (points.length === 0) {\n    return null;\n  }\n  return svgPointsToPath(points);\n}\nfunction svgPointsToPath(points) {\n  const arr = points.map(p => `${p.x} ${p.y}`);\n  return `M ${arr.join(' L')}`;\n}\nexport function getPointsFromSvgElement(elem) {\n  const points = [];\n  const nodePoints = elem.points;\n  if (nodePoints) {\n    for (let i = 0, ii = nodePoints.numberOfItems; i < ii; i += 1) {\n      points.push(nodePoints.getItem(i));\n    }\n  }\n  return points;\n}\nexport function circleToPathData(circle) {\n  const cx = getNumbericAttribute(circle, 'cx', 0);\n  const cy = getNumbericAttribute(circle, 'cy', 0);\n  const r = getNumbericAttribute(circle, 'r');\n  const cd = r * KAPPA; // Control distance.\n  return ['M', cx, cy - r, 'C', cx + cd, cy - r, cx + r, cy - cd, cx + r, cy, 'C', cx + r, cy + cd, cx + cd, cy + r, cx, cy + r, 'C', cx - cd, cy + r, cx - r, cy + cd, cx - r, cy, 'C', cx - r, cy - cd, cx - cd, cy - r, cx, cy - r, 'Z'].join(' ');\n}\nexport function ellipseToPathData(ellipse) {\n  const cx = getNumbericAttribute(ellipse, 'cx', 0);\n  const cy = getNumbericAttribute(ellipse, 'cy', 0);\n  const rx = getNumbericAttribute(ellipse, 'rx');\n  const ry = getNumbericAttribute(ellipse, 'ry') || rx;\n  const cdx = rx * KAPPA; // Control distance x.\n  const cdy = ry * KAPPA; // Control distance y.\n  const d = ['M', cx, cy - ry, 'C', cx + cdx, cy - ry, cx + rx, cy - cdy, cx + rx, cy, 'C', cx + rx, cy + cdy, cx + cdx, cy + ry, cx, cy + ry, 'C', cx - cdx, cy + ry, cx - rx, cy + cdy, cx - rx, cy, 'C', cx - rx, cy - cdy, cx - cdx, cy - ry, cx, cy - ry, 'Z'].join(' ');\n  return d;\n}\nexport function rectangleToPathData(rect) {\n  return rectToPathData({\n    x: getNumbericAttribute(rect, 'x', 0),\n    y: getNumbericAttribute(rect, 'y', 0),\n    width: getNumbericAttribute(rect, 'width', 0),\n    height: getNumbericAttribute(rect, 'height', 0),\n    rx: getNumbericAttribute(rect, 'rx', 0),\n    ry: getNumbericAttribute(rect, 'ry', 0)\n  });\n}\nexport function rectToPathData(r) {\n  let d;\n  const x = r.x;\n  const y = r.y;\n  const width = r.width;\n  const height = r.height;\n  const topRx = Math.min(r.rx || r['top-rx'] || 0, width / 2);\n  const bottomRx = Math.min(r.rx || r['bottom-rx'] || 0, width / 2);\n  const topRy = Math.min(r.ry || r['top-ry'] || 0, height / 2);\n  const bottomRy = Math.min(r.ry || r['bottom-ry'] || 0, height / 2);\n  if (topRx || bottomRx || topRy || bottomRy) {\n    d = ['M', x, y + topRy, 'v', height - topRy - bottomRy, 'a', bottomRx, bottomRy, 0, 0, 0, bottomRx, bottomRy, 'h', width - 2 * bottomRx, 'a', bottomRx, bottomRy, 0, 0, 0, bottomRx, -bottomRy, 'v', -(height - bottomRy - topRy), 'a', topRx, topRy, 0, 0, 0, -topRx, -topRy, 'h', -(width - 2 * topRx), 'a', topRx, topRy, 0, 0, 0, -topRx, topRy, 'Z'];\n  } else {\n    d = ['M', x, y, 'H', x + width, 'V', y + height, 'H', x, 'V', y, 'Z'];\n  }\n  return d.join(' ');\n}\nexport function toPath(elem) {\n  const path = createSvgElement('path');\n  attr(path, attr(elem));\n  const d = toPathData(elem);\n  if (d) {\n    path.setAttribute('d', d);\n  }\n  return path;\n}\nexport function toPathData(elem) {\n  const tagName = elem.tagName.toLowerCase();\n  switch (tagName) {\n    case 'path':\n      return elem.getAttribute('d');\n    case 'line':\n      return lineToPathData(elem);\n    case 'polygon':\n      return polygonToPathData(elem);\n    case 'polyline':\n      return polylineToPathData(elem);\n    case 'ellipse':\n      return ellipseToPathData(elem);\n    case 'circle':\n      return circleToPathData(elem);\n    case 'rect':\n      return rectangleToPathData(elem);\n    default:\n      break;\n  }\n  throw new Error(`\"${tagName}\" cannot be converted to svg path element.`);\n}\n// Inspired by d3.js https://github.com/mbostock/d3/blob/master/src/svg/arc.js\nexport function createSlicePathData(innerRadius, outerRadius, startAngle, endAngle) {\n  const svgArcMax = 2 * Math.PI - 1e-6;\n  const r0 = innerRadius;\n  const r1 = outerRadius;\n  let a0 = startAngle;\n  let a1 = endAngle;\n  if (a1 < a0) {\n    const tmp = a0;\n    a0 = a1;\n    a1 = tmp;\n  }\n  const da = a1 - a0;\n  const df = da < Math.PI ? '0' : '1';\n  const c0 = Math.cos(a0);\n  const s0 = Math.sin(a0);\n  const c1 = Math.cos(a1);\n  const s1 = Math.sin(a1);\n  return da >= svgArcMax ? r0 ?\n  // eslint-disable-next-line\n  `M0,${r1}A${r1},${r1} 0 1,1 0,${-r1}A${r1},${r1} 0 1,1 0,${r1}M0,${r0}A${r0},${r0} 0 1,0 0,${-r0}A${r0},${r0} 0 1,0 0,${r0}Z` :\n  // eslint-disable-next-line\n  `M0,${r1}A${r1},${r1} 0 1,1 0,${-r1}A${r1},${r1} 0 1,1 0,${r1}Z` : r0 ?\n  // eslint-disable-next-line\n  `M${r1 * c0},${r1 * s0}A${r1},${r1} 0 ${df},1 ${r1 * c1},${r1 * s1}L${r0 * c1},${r0 * s1}A${r0},${r0} 0 ${df},0 ${r0 * c0},${r0 * s0}Z` :\n  // eslint-disable-next-line\n  `M${r1 * c0},${r1 * s0}A${r1},${r1} 0 ${df},1 ${r1 * c1},${r1 * s1}L0,0` + `Z`;\n}","map":{"version":3,"names":["attr","createSvgElement","KAPPA","getNumbericAttribute","elem","defaultValue","NaN","v","getAttribute","n","parseFloat","Number","isNaN","sample","interval","length","getTotalLength","samples","distance","getPointAtLength","push","x","y","lineToPathData","line","join","polygonToPathData","polygon","points","getPointsFromSvgElement","svgPointsToPath","polylineToPathData","polyline","arr","map","p","nodePoints","i","ii","numberOfItems","getItem","circleToPathData","circle","cx","cy","r","cd","ellipseToPathData","ellipse","rx","ry","cdx","cdy","d","rectangleToPathData","rect","rectToPathData","width","height","topRx","Math","min","bottomRx","topRy","bottomRy","toPath","path","toPathData","setAttribute","tagName","toLowerCase","Error","createSlicePathData","innerRadius","outerRadius","startAngle","endAngle","svgArcMax","PI","r0","r1","a0","a1","tmp","da","df","c0","cos","s0","sin","c1","s1"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-common@2.0.17/node_modules/@antv/x6-common/src/dom/path.ts"],"sourcesContent":["import { attr } from './attr'\nimport { createSvgElement } from './elem'\n\nexport const KAPPA = 0.551784\n\nfunction getNumbericAttribute(\n  elem: SVGElement,\n  attr: string,\n  defaultValue = NaN,\n) {\n  const v = elem.getAttribute(attr)\n  if (v == null) {\n    return defaultValue\n  }\n  const n = parseFloat(v)\n  return Number.isNaN(n) ? defaultValue : n\n}\n\nexport function sample(elem: SVGPathElement, interval = 1) {\n  const length = elem.getTotalLength()\n  const samples = []\n  let distance = 0\n  let sample\n  while (distance < length) {\n    sample = elem.getPointAtLength(distance)\n    samples.push({ distance, x: sample.x, y: sample.y })\n    distance += interval\n  }\n  return samples\n}\n\nexport function lineToPathData(line: SVGLineElement) {\n  return [\n    'M',\n    getNumbericAttribute(line, 'x1'),\n    getNumbericAttribute(line, 'y1'),\n    'L',\n    getNumbericAttribute(line, 'x2'),\n    getNumbericAttribute(line, 'y2'),\n  ].join(' ')\n}\n\nexport function polygonToPathData(polygon: SVGPolygonElement) {\n  const points = getPointsFromSvgElement(polygon)\n  if (points.length === 0) {\n    return null\n  }\n  return `${svgPointsToPath(points)} Z`\n}\n\nexport function polylineToPathData(polyline: SVGPolylineElement) {\n  const points = getPointsFromSvgElement(polyline)\n  if (points.length === 0) {\n    return null\n  }\n\n  return svgPointsToPath(points)\n}\n\nfunction svgPointsToPath(points: DOMPoint[]) {\n  const arr = points.map((p) => `${p.x} ${p.y}`)\n  return `M ${arr.join(' L')}`\n}\n\nexport function getPointsFromSvgElement(\n  elem: SVGPolygonElement | SVGPolylineElement,\n) {\n  const points = []\n  const nodePoints = elem.points\n  if (nodePoints) {\n    for (let i = 0, ii = nodePoints.numberOfItems; i < ii; i += 1) {\n      points.push(nodePoints.getItem(i))\n    }\n  }\n\n  return points\n}\n\nexport function circleToPathData(circle: SVGCircleElement) {\n  const cx = getNumbericAttribute(circle, 'cx', 0)\n  const cy = getNumbericAttribute(circle, 'cy', 0)\n  const r = getNumbericAttribute(circle, 'r')\n  const cd = r * KAPPA // Control distance.\n\n  return [\n    'M',\n    cx,\n    cy - r, // Move to the first point.\n    'C',\n    cx + cd,\n    cy - r,\n    cx + r,\n    cy - cd,\n    cx + r,\n    cy, // I. Quadrant.\n    'C',\n    cx + r,\n    cy + cd,\n    cx + cd,\n    cy + r,\n    cx,\n    cy + r, // II. Quadrant.\n    'C',\n    cx - cd,\n    cy + r,\n    cx - r,\n    cy + cd,\n    cx - r,\n    cy, // III. Quadrant.\n    'C',\n    cx - r,\n    cy - cd,\n    cx - cd,\n    cy - r,\n    cx,\n    cy - r, // IV. Quadrant.\n    'Z',\n  ].join(' ')\n}\n\nexport function ellipseToPathData(ellipse: SVGEllipseElement) {\n  const cx = getNumbericAttribute(ellipse, 'cx', 0)\n  const cy = getNumbericAttribute(ellipse, 'cy', 0)\n  const rx = getNumbericAttribute(ellipse, 'rx')\n  const ry = getNumbericAttribute(ellipse, 'ry') || rx\n  const cdx = rx * KAPPA // Control distance x.\n  const cdy = ry * KAPPA // Control distance y.\n\n  const d = [\n    'M',\n    cx,\n    cy - ry, // Move to the first point.\n    'C',\n    cx + cdx,\n    cy - ry,\n    cx + rx,\n    cy - cdy,\n    cx + rx,\n    cy, // I. Quadrant.\n    'C',\n    cx + rx,\n    cy + cdy,\n    cx + cdx,\n    cy + ry,\n    cx,\n    cy + ry, // II. Quadrant.\n    'C',\n    cx - cdx,\n    cy + ry,\n    cx - rx,\n    cy + cdy,\n    cx - rx,\n    cy, // III. Quadrant.\n    'C',\n    cx - rx,\n    cy - cdy,\n    cx - cdx,\n    cy - ry,\n    cx,\n    cy - ry, // IV. Quadrant.\n    'Z',\n  ].join(' ')\n  return d\n}\n\nexport function rectangleToPathData(rect: SVGRectElement) {\n  return rectToPathData({\n    x: getNumbericAttribute(rect, 'x', 0),\n    y: getNumbericAttribute(rect, 'y', 0),\n    width: getNumbericAttribute(rect, 'width', 0),\n    height: getNumbericAttribute(rect, 'height', 0),\n    rx: getNumbericAttribute(rect, 'rx', 0),\n    ry: getNumbericAttribute(rect, 'ry', 0),\n  })\n}\n\nexport function rectToPathData(r: {\n  x: number\n  y: number\n  width: number\n  height: number\n  rx?: number\n  ry?: number\n  'top-rx'?: number\n  'bottom-rx'?: number\n  'top-ry'?: number\n  'bottom-ry'?: number\n}) {\n  let d\n  const x = r.x\n  const y = r.y\n  const width = r.width\n  const height = r.height\n  const topRx = Math.min(r.rx || r['top-rx'] || 0, width / 2)\n  const bottomRx = Math.min(r.rx || r['bottom-rx'] || 0, width / 2)\n  const topRy = Math.min(r.ry || r['top-ry'] || 0, height / 2)\n  const bottomRy = Math.min(r.ry || r['bottom-ry'] || 0, height / 2)\n\n  if (topRx || bottomRx || topRy || bottomRy) {\n    d = [\n      'M',\n      x,\n      y + topRy,\n      'v',\n      height - topRy - bottomRy,\n      'a',\n      bottomRx,\n      bottomRy,\n      0,\n      0,\n      0,\n      bottomRx,\n      bottomRy,\n      'h',\n      width - 2 * bottomRx,\n      'a',\n      bottomRx,\n      bottomRy,\n      0,\n      0,\n      0,\n      bottomRx,\n      -bottomRy,\n      'v',\n      -(height - bottomRy - topRy),\n      'a',\n      topRx,\n      topRy,\n      0,\n      0,\n      0,\n      -topRx,\n      -topRy,\n      'h',\n      -(width - 2 * topRx),\n      'a',\n      topRx,\n      topRy,\n      0,\n      0,\n      0,\n      -topRx,\n      topRy,\n      'Z',\n    ]\n  } else {\n    d = ['M', x, y, 'H', x + width, 'V', y + height, 'H', x, 'V', y, 'Z']\n  }\n\n  return d.join(' ')\n}\n\nexport function toPath(\n  elem:\n    | SVGLineElement\n    | SVGPolygonElement\n    | SVGPolylineElement\n    | SVGEllipseElement\n    | SVGCircleElement\n    | SVGRectElement,\n) {\n  const path = createSvgElement('path') as SVGPathElement\n  attr(path, attr(elem))\n  const d = toPathData(elem)\n  if (d) {\n    path.setAttribute('d', d)\n  }\n  return path\n}\n\nexport function toPathData(\n  elem:\n    | SVGLineElement\n    | SVGPolygonElement\n    | SVGPolylineElement\n    | SVGEllipseElement\n    | SVGCircleElement\n    | SVGRectElement,\n) {\n  const tagName = elem.tagName.toLowerCase()\n  switch (tagName) {\n    case 'path':\n      return elem.getAttribute('d')\n    case 'line':\n      return lineToPathData(elem as SVGLineElement)\n    case 'polygon':\n      return polygonToPathData(elem as SVGPolygonElement)\n    case 'polyline':\n      return polylineToPathData(elem as SVGPolylineElement)\n    case 'ellipse':\n      return ellipseToPathData(elem as SVGEllipseElement)\n    case 'circle':\n      return circleToPathData(elem as SVGCircleElement)\n    case 'rect':\n      return rectangleToPathData(elem as SVGRectElement)\n    default:\n      break\n  }\n\n  throw new Error(`\"${tagName}\" cannot be converted to svg path element.`)\n}\n\n// Inspired by d3.js https://github.com/mbostock/d3/blob/master/src/svg/arc.js\nexport function createSlicePathData(\n  innerRadius: number,\n  outerRadius: number,\n  startAngle: number,\n  endAngle: number,\n) {\n  const svgArcMax = 2 * Math.PI - 1e-6\n  const r0 = innerRadius\n  const r1 = outerRadius\n  let a0 = startAngle\n  let a1 = endAngle\n  if (a1 < a0) {\n    const tmp = a0\n    a0 = a1\n    a1 = tmp\n  }\n\n  const da = a1 - a0\n  const df = da < Math.PI ? '0' : '1'\n  const c0 = Math.cos(a0)\n  const s0 = Math.sin(a0)\n  const c1 = Math.cos(a1)\n  const s1 = Math.sin(a1)\n\n  return da >= svgArcMax\n    ? r0\n      ? // eslint-disable-next-line\n        `M0,${r1}A${r1},${r1} 0 1,1 0,${-r1}A${r1},${r1} 0 1,1 0,${r1}M0,${r0}A${r0},${r0} 0 1,0 0,${-r0}A${r0},${r0} 0 1,0 0,${r0}Z`\n      : // eslint-disable-next-line\n        `M0,${r1}A${r1},${r1} 0 1,1 0,${-r1}A${r1},${r1} 0 1,1 0,${r1}Z`\n    : r0\n    ? // eslint-disable-next-line\n      `M${r1 * c0},${r1 * s0}A${r1},${r1} 0 ${df},1 ${r1 * c1},${r1 * s1}L${\n        r0 * c1\n      },${r0 * s1}A${r0},${r0} 0 ${df},0 ${r0 * c0},${r0 * s0}Z`\n    : // eslint-disable-next-line\n      `M${r1 * c0},${r1 * s0}A${r1},${r1} 0 ${df},1 ${r1 * c1},${r1 * s1}L0,0` +\n      `Z`\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,gBAAgB,QAAQ,QAAQ;AAEzC,OAAO,MAAMC,KAAK,GAAG,QAAQ;AAE7B,SAASC,oBAAoBA,CAC3BC,IAAgB,EAChBJ,IAAY,EACZK,YAAY,GAAGC,GAAG;EAElB,MAAMC,CAAC,GAAGH,IAAI,CAACI,YAAY,CAACR,IAAI,CAAC;EACjC,IAAIO,CAAC,IAAI,IAAI,EAAE;IACb,OAAOF,YAAY;;EAErB,MAAMI,CAAC,GAAGC,UAAU,CAACH,CAAC,CAAC;EACvB,OAAOI,MAAM,CAACC,KAAK,CAACH,CAAC,CAAC,GAAGJ,YAAY,GAAGI,CAAC;AAC3C;AAEA,OAAM,SAAUI,MAAMA,CAACT,IAAoB,EAAEU,QAAQ,GAAG,CAAC;EACvD,MAAMC,MAAM,GAAGX,IAAI,CAACY,cAAc,EAAE;EACpC,MAAMC,OAAO,GAAG,EAAE;EAClB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIL,MAAM;EACV,OAAOK,QAAQ,GAAGH,MAAM,EAAE;IACxBF,MAAM,GAAGT,IAAI,CAACe,gBAAgB,CAACD,QAAQ,CAAC;IACxCD,OAAO,CAACG,IAAI,CAAC;MAAEF,QAAQ;MAAEG,CAAC,EAAER,MAAM,CAACQ,CAAC;MAAEC,CAAC,EAAET,MAAM,CAACS;IAAC,CAAE,CAAC;IACpDJ,QAAQ,IAAIJ,QAAQ;;EAEtB,OAAOG,OAAO;AAChB;AAEA,OAAM,SAAUM,cAAcA,CAACC,IAAoB;EACjD,OAAO,CACL,GAAG,EACHrB,oBAAoB,CAACqB,IAAI,EAAE,IAAI,CAAC,EAChCrB,oBAAoB,CAACqB,IAAI,EAAE,IAAI,CAAC,EAChC,GAAG,EACHrB,oBAAoB,CAACqB,IAAI,EAAE,IAAI,CAAC,EAChCrB,oBAAoB,CAACqB,IAAI,EAAE,IAAI,CAAC,CACjC,CAACC,IAAI,CAAC,GAAG,CAAC;AACb;AAEA,OAAM,SAAUC,iBAAiBA,CAACC,OAA0B;EAC1D,MAAMC,MAAM,GAAGC,uBAAuB,CAACF,OAAO,CAAC;EAC/C,IAAIC,MAAM,CAACb,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,IAAI;;EAEb,OAAO,GAAGe,eAAe,CAACF,MAAM,CAAC,IAAI;AACvC;AAEA,OAAM,SAAUG,kBAAkBA,CAACC,QAA4B;EAC7D,MAAMJ,MAAM,GAAGC,uBAAuB,CAACG,QAAQ,CAAC;EAChD,IAAIJ,MAAM,CAACb,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,IAAI;;EAGb,OAAOe,eAAe,CAACF,MAAM,CAAC;AAChC;AAEA,SAASE,eAAeA,CAACF,MAAkB;EACzC,MAAMK,GAAG,GAAGL,MAAM,CAACM,GAAG,CAAEC,CAAC,IAAK,GAAGA,CAAC,CAACd,CAAC,IAAIc,CAAC,CAACb,CAAC,EAAE,CAAC;EAC9C,OAAO,KAAKW,GAAG,CAACR,IAAI,CAAC,IAAI,CAAC,EAAE;AAC9B;AAEA,OAAM,SAAUI,uBAAuBA,CACrCzB,IAA4C;EAE5C,MAAMwB,MAAM,GAAG,EAAE;EACjB,MAAMQ,UAAU,GAAGhC,IAAI,CAACwB,MAAM;EAC9B,IAAIQ,UAAU,EAAE;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGF,UAAU,CAACG,aAAa,EAAEF,CAAC,GAAGC,EAAE,EAAED,CAAC,IAAI,CAAC,EAAE;MAC7DT,MAAM,CAACR,IAAI,CAACgB,UAAU,CAACI,OAAO,CAACH,CAAC,CAAC,CAAC;;;EAItC,OAAOT,MAAM;AACf;AAEA,OAAM,SAAUa,gBAAgBA,CAACC,MAAwB;EACvD,MAAMC,EAAE,GAAGxC,oBAAoB,CAACuC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;EAChD,MAAME,EAAE,GAAGzC,oBAAoB,CAACuC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;EAChD,MAAMG,CAAC,GAAG1C,oBAAoB,CAACuC,MAAM,EAAE,GAAG,CAAC;EAC3C,MAAMI,EAAE,GAAGD,CAAC,GAAG3C,KAAK,EAAC;EAErB,OAAO,CACL,GAAG,EACHyC,EAAE,EACFC,EAAE,GAAGC,CAAC,EACN,GAAG,EACHF,EAAE,GAAGG,EAAE,EACPF,EAAE,GAAGC,CAAC,EACNF,EAAE,GAAGE,CAAC,EACND,EAAE,GAAGE,EAAE,EACPH,EAAE,GAAGE,CAAC,EACND,EAAE,EACF,GAAG,EACHD,EAAE,GAAGE,CAAC,EACND,EAAE,GAAGE,EAAE,EACPH,EAAE,GAAGG,EAAE,EACPF,EAAE,GAAGC,CAAC,EACNF,EAAE,EACFC,EAAE,GAAGC,CAAC,EACN,GAAG,EACHF,EAAE,GAAGG,EAAE,EACPF,EAAE,GAAGC,CAAC,EACNF,EAAE,GAAGE,CAAC,EACND,EAAE,GAAGE,EAAE,EACPH,EAAE,GAAGE,CAAC,EACND,EAAE,EACF,GAAG,EACHD,EAAE,GAAGE,CAAC,EACND,EAAE,GAAGE,EAAE,EACPH,EAAE,GAAGG,EAAE,EACPF,EAAE,GAAGC,CAAC,EACNF,EAAE,EACFC,EAAE,GAAGC,CAAC,EACN,GAAG,CACJ,CAACpB,IAAI,CAAC,GAAG,CAAC;AACb;AAEA,OAAM,SAAUsB,iBAAiBA,CAACC,OAA0B;EAC1D,MAAML,EAAE,GAAGxC,oBAAoB,CAAC6C,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;EACjD,MAAMJ,EAAE,GAAGzC,oBAAoB,CAAC6C,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;EACjD,MAAMC,EAAE,GAAG9C,oBAAoB,CAAC6C,OAAO,EAAE,IAAI,CAAC;EAC9C,MAAME,EAAE,GAAG/C,oBAAoB,CAAC6C,OAAO,EAAE,IAAI,CAAC,IAAIC,EAAE;EACpD,MAAME,GAAG,GAAGF,EAAE,GAAG/C,KAAK,EAAC;EACvB,MAAMkD,GAAG,GAAGF,EAAE,GAAGhD,KAAK,EAAC;EAEvB,MAAMmD,CAAC,GAAG,CACR,GAAG,EACHV,EAAE,EACFC,EAAE,GAAGM,EAAE,EACP,GAAG,EACHP,EAAE,GAAGQ,GAAG,EACRP,EAAE,GAAGM,EAAE,EACPP,EAAE,GAAGM,EAAE,EACPL,EAAE,GAAGQ,GAAG,EACRT,EAAE,GAAGM,EAAE,EACPL,EAAE,EACF,GAAG,EACHD,EAAE,GAAGM,EAAE,EACPL,EAAE,GAAGQ,GAAG,EACRT,EAAE,GAAGQ,GAAG,EACRP,EAAE,GAAGM,EAAE,EACPP,EAAE,EACFC,EAAE,GAAGM,EAAE,EACP,GAAG,EACHP,EAAE,GAAGQ,GAAG,EACRP,EAAE,GAAGM,EAAE,EACPP,EAAE,GAAGM,EAAE,EACPL,EAAE,GAAGQ,GAAG,EACRT,EAAE,GAAGM,EAAE,EACPL,EAAE,EACF,GAAG,EACHD,EAAE,GAAGM,EAAE,EACPL,EAAE,GAAGQ,GAAG,EACRT,EAAE,GAAGQ,GAAG,EACRP,EAAE,GAAGM,EAAE,EACPP,EAAE,EACFC,EAAE,GAAGM,EAAE,EACP,GAAG,CACJ,CAACzB,IAAI,CAAC,GAAG,CAAC;EACX,OAAO4B,CAAC;AACV;AAEA,OAAM,SAAUC,mBAAmBA,CAACC,IAAoB;EACtD,OAAOC,cAAc,CAAC;IACpBnC,CAAC,EAAElB,oBAAoB,CAACoD,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IACrCjC,CAAC,EAAEnB,oBAAoB,CAACoD,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IACrCE,KAAK,EAAEtD,oBAAoB,CAACoD,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IAC7CG,MAAM,EAAEvD,oBAAoB,CAACoD,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC/CN,EAAE,EAAE9C,oBAAoB,CAACoD,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACvCL,EAAE,EAAE/C,oBAAoB,CAACoD,IAAI,EAAE,IAAI,EAAE,CAAC;GACvC,CAAC;AACJ;AAEA,OAAM,SAAUC,cAAcA,CAACX,CAW9B;EACC,IAAIQ,CAAC;EACL,MAAMhC,CAAC,GAAGwB,CAAC,CAACxB,CAAC;EACb,MAAMC,CAAC,GAAGuB,CAAC,CAACvB,CAAC;EACb,MAAMmC,KAAK,GAAGZ,CAAC,CAACY,KAAK;EACrB,MAAMC,MAAM,GAAGb,CAAC,CAACa,MAAM;EACvB,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAChB,CAAC,CAACI,EAAE,IAAIJ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAEY,KAAK,GAAG,CAAC,CAAC;EAC3D,MAAMK,QAAQ,GAAGF,IAAI,CAACC,GAAG,CAAChB,CAAC,CAACI,EAAE,IAAIJ,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,EAAEY,KAAK,GAAG,CAAC,CAAC;EACjE,MAAMM,KAAK,GAAGH,IAAI,CAACC,GAAG,CAAChB,CAAC,CAACK,EAAE,IAAIL,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAEa,MAAM,GAAG,CAAC,CAAC;EAC5D,MAAMM,QAAQ,GAAGJ,IAAI,CAACC,GAAG,CAAChB,CAAC,CAACK,EAAE,IAAIL,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,EAAEa,MAAM,GAAG,CAAC,CAAC;EAElE,IAAIC,KAAK,IAAIG,QAAQ,IAAIC,KAAK,IAAIC,QAAQ,EAAE;IAC1CX,CAAC,GAAG,CACF,GAAG,EACHhC,CAAC,EACDC,CAAC,GAAGyC,KAAK,EACT,GAAG,EACHL,MAAM,GAAGK,KAAK,GAAGC,QAAQ,EACzB,GAAG,EACHF,QAAQ,EACRE,QAAQ,EACR,CAAC,EACD,CAAC,EACD,CAAC,EACDF,QAAQ,EACRE,QAAQ,EACR,GAAG,EACHP,KAAK,GAAG,CAAC,GAAGK,QAAQ,EACpB,GAAG,EACHA,QAAQ,EACRE,QAAQ,EACR,CAAC,EACD,CAAC,EACD,CAAC,EACDF,QAAQ,EACR,CAACE,QAAQ,EACT,GAAG,EACH,EAAEN,MAAM,GAAGM,QAAQ,GAAGD,KAAK,CAAC,EAC5B,GAAG,EACHJ,KAAK,EACLI,KAAK,EACL,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAACJ,KAAK,EACN,CAACI,KAAK,EACN,GAAG,EACH,EAAEN,KAAK,GAAG,CAAC,GAAGE,KAAK,CAAC,EACpB,GAAG,EACHA,KAAK,EACLI,KAAK,EACL,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAACJ,KAAK,EACNI,KAAK,EACL,GAAG,CACJ;GACF,MAAM;IACLV,CAAC,GAAG,CAAC,GAAG,EAAEhC,CAAC,EAAEC,CAAC,EAAE,GAAG,EAAED,CAAC,GAAGoC,KAAK,EAAE,GAAG,EAAEnC,CAAC,GAAGoC,MAAM,EAAE,GAAG,EAAErC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC;;EAGvE,OAAO+B,CAAC,CAAC5B,IAAI,CAAC,GAAG,CAAC;AACpB;AAEA,OAAM,SAAUwC,MAAMA,CACpB7D,IAMkB;EAElB,MAAM8D,IAAI,GAAGjE,gBAAgB,CAAC,MAAM,CAAmB;EACvDD,IAAI,CAACkE,IAAI,EAAElE,IAAI,CAACI,IAAI,CAAC,CAAC;EACtB,MAAMiD,CAAC,GAAGc,UAAU,CAAC/D,IAAI,CAAC;EAC1B,IAAIiD,CAAC,EAAE;IACLa,IAAI,CAACE,YAAY,CAAC,GAAG,EAAEf,CAAC,CAAC;;EAE3B,OAAOa,IAAI;AACb;AAEA,OAAM,SAAUC,UAAUA,CACxB/D,IAMkB;EAElB,MAAMiE,OAAO,GAAGjE,IAAI,CAACiE,OAAO,CAACC,WAAW,EAAE;EAC1C,QAAQD,OAAO;IACb,KAAK,MAAM;MACT,OAAOjE,IAAI,CAACI,YAAY,CAAC,GAAG,CAAC;IAC/B,KAAK,MAAM;MACT,OAAOe,cAAc,CAACnB,IAAsB,CAAC;IAC/C,KAAK,SAAS;MACZ,OAAOsB,iBAAiB,CAACtB,IAAyB,CAAC;IACrD,KAAK,UAAU;MACb,OAAO2B,kBAAkB,CAAC3B,IAA0B,CAAC;IACvD,KAAK,SAAS;MACZ,OAAO2C,iBAAiB,CAAC3C,IAAyB,CAAC;IACrD,KAAK,QAAQ;MACX,OAAOqC,gBAAgB,CAACrC,IAAwB,CAAC;IACnD,KAAK,MAAM;MACT,OAAOkD,mBAAmB,CAAClD,IAAsB,CAAC;IACpD;MACE;;EAGJ,MAAM,IAAImE,KAAK,CAAC,IAAIF,OAAO,4CAA4C,CAAC;AAC1E;AAEA;AACA,OAAM,SAAUG,mBAAmBA,CACjCC,WAAmB,EACnBC,WAAmB,EACnBC,UAAkB,EAClBC,QAAgB;EAEhB,MAAMC,SAAS,GAAG,CAAC,GAAGjB,IAAI,CAACkB,EAAE,GAAG,IAAI;EACpC,MAAMC,EAAE,GAAGN,WAAW;EACtB,MAAMO,EAAE,GAAGN,WAAW;EACtB,IAAIO,EAAE,GAAGN,UAAU;EACnB,IAAIO,EAAE,GAAGN,QAAQ;EACjB,IAAIM,EAAE,GAAGD,EAAE,EAAE;IACX,MAAME,GAAG,GAAGF,EAAE;IACdA,EAAE,GAAGC,EAAE;IACPA,EAAE,GAAGC,GAAG;;EAGV,MAAMC,EAAE,GAAGF,EAAE,GAAGD,EAAE;EAClB,MAAMI,EAAE,GAAGD,EAAE,GAAGxB,IAAI,CAACkB,EAAE,GAAG,GAAG,GAAG,GAAG;EACnC,MAAMQ,EAAE,GAAG1B,IAAI,CAAC2B,GAAG,CAACN,EAAE,CAAC;EACvB,MAAMO,EAAE,GAAG5B,IAAI,CAAC6B,GAAG,CAACR,EAAE,CAAC;EACvB,MAAMS,EAAE,GAAG9B,IAAI,CAAC2B,GAAG,CAACL,EAAE,CAAC;EACvB,MAAMS,EAAE,GAAG/B,IAAI,CAAC6B,GAAG,CAACP,EAAE,CAAC;EAEvB,OAAOE,EAAE,IAAIP,SAAS,GAClBE,EAAE;EACA;EACA,MAAMC,EAAE,IAAIA,EAAE,IAAIA,EAAE,YAAY,CAACA,EAAE,IAAIA,EAAE,IAAIA,EAAE,YAAYA,EAAE,MAAMD,EAAE,IAAIA,EAAE,IAAIA,EAAE,YAAY,CAACA,EAAE,IAAIA,EAAE,IAAIA,EAAE,YAAYA,EAAE,GAAG;EAC7H;EACA,MAAMC,EAAE,IAAIA,EAAE,IAAIA,EAAE,YAAY,CAACA,EAAE,IAAIA,EAAE,IAAIA,EAAE,YAAYA,EAAE,GAAG,GAClED,EAAE;EACF;EACA,IAAIC,EAAE,GAAGM,EAAE,IAAIN,EAAE,GAAGQ,EAAE,IAAIR,EAAE,IAAIA,EAAE,MAAMK,EAAE,MAAML,EAAE,GAAGU,EAAE,IAAIV,EAAE,GAAGW,EAAE,IAChEZ,EAAE,GAAGW,EACP,IAAIX,EAAE,GAAGY,EAAE,IAAIZ,EAAE,IAAIA,EAAE,MAAMM,EAAE,MAAMN,EAAE,GAAGO,EAAE,IAAIP,EAAE,GAAGS,EAAE,GAAG;EAC1D;EACA,IAAIR,EAAE,GAAGM,EAAE,IAAIN,EAAE,GAAGQ,EAAE,IAAIR,EAAE,IAAIA,EAAE,MAAMK,EAAE,MAAML,EAAE,GAAGU,EAAE,IAAIV,EAAE,GAAGW,EAAE,MAAM,GACxE,GAAG;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}