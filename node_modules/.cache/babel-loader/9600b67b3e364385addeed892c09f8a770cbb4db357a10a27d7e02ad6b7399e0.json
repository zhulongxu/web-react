{"ast":null,"code":"import { Line } from '../line';\nimport { LineTo } from './lineto';\nimport { Segment } from './segment';\nexport class Close extends Segment {\n  get end() {\n    if (!this.subpathStartSegment) {\n      throw new Error('Missing subpath start segment. (This segment needs a subpath ' + 'start segment (e.g. MoveTo), or segment has not yet been added' + ' to a path.)');\n    }\n    return this.subpathStartSegment.end;\n  }\n  get type() {\n    return 'Z';\n  }\n  get line() {\n    return new Line(this.start, this.end);\n  }\n  bbox() {\n    return this.line.bbox();\n  }\n  closestPoint(p) {\n    return this.line.closestPoint(p);\n  }\n  closestPointLength(p) {\n    return this.line.closestPointLength(p);\n  }\n  closestPointNormalizedLength(p) {\n    return this.line.closestPointNormalizedLength(p);\n  }\n  closestPointTangent(p) {\n    return this.line.closestPointTangent(p);\n  }\n  length() {\n    return this.line.length();\n  }\n  divideAt(ratio) {\n    const divided = this.line.divideAt(ratio);\n    return [\n    // do not actually cut into the segment, first divided part can stay as Z\n    divided[1].isDifferentiable() ? new LineTo(divided[0]) : this.clone(), new LineTo(divided[1])];\n  }\n  divideAtLength(length) {\n    const divided = this.line.divideAtLength(length);\n    return [divided[1].isDifferentiable() ? new LineTo(divided[0]) : this.clone(), new LineTo(divided[1])];\n  }\n  getSubdivisions() {\n    return [];\n  }\n  pointAt(ratio) {\n    return this.line.pointAt(ratio);\n  }\n  pointAtLength(length) {\n    return this.line.pointAtLength(length);\n  }\n  tangentAt(ratio) {\n    return this.line.tangentAt(ratio);\n  }\n  tangentAtLength(length) {\n    return this.line.tangentAtLength(length);\n  }\n  isDifferentiable() {\n    if (!this.previousSegment || !this.subpathStartSegment) {\n      return false;\n    }\n    return !this.start.equals(this.end);\n  }\n  scale() {\n    return this;\n  }\n  rotate() {\n    return this;\n  }\n  translate() {\n    return this;\n  }\n  equals(s) {\n    return this.type === s.type && this.start.equals(s.start) && this.end.equals(s.end);\n  }\n  clone() {\n    return new Close();\n  }\n  toJSON() {\n    return {\n      type: this.type,\n      start: this.start.toJSON(),\n      end: this.end.toJSON()\n    };\n  }\n  serialize() {\n    return this.type;\n  }\n}\n(function (Close) {\n  function create() {\n    return new Close();\n  }\n  Close.create = create;\n})(Close || (Close = {}));","map":{"version":3,"names":["Line","LineTo","Segment","Close","end","subpathStartSegment","Error","type","line","start","bbox","closestPoint","p","closestPointLength","closestPointNormalizedLength","closestPointTangent","length","divideAt","ratio","divided","isDifferentiable","clone","divideAtLength","getSubdivisions","pointAt","pointAtLength","tangentAt","tangentAtLength","previousSegment","equals","scale","rotate","translate","s","toJSON","serialize","create"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-geometry@2.0.5/node_modules/@antv/x6-geometry/src/path/close.ts"],"sourcesContent":["import { Line } from '../line'\nimport { LineTo } from './lineto'\nimport { Segment } from './segment'\n\nimport { Point } from '../point'\n\nexport class Close extends Segment {\n  get end() {\n    if (!this.subpathStartSegment) {\n      throw new Error(\n        'Missing subpath start segment. (This segment needs a subpath ' +\n          'start segment (e.g. MoveTo), or segment has not yet been added' +\n          ' to a path.)',\n      )\n    }\n\n    return this.subpathStartSegment.end\n  }\n\n  get type() {\n    return 'Z'\n  }\n\n  get line() {\n    return new Line(this.start, this.end)\n  }\n\n  bbox() {\n    return this.line.bbox()\n  }\n\n  closestPoint(p: Point.PointLike | Point.PointData) {\n    return this.line.closestPoint(p)\n  }\n\n  closestPointLength(p: Point.PointLike | Point.PointData) {\n    return this.line.closestPointLength(p)\n  }\n\n  closestPointNormalizedLength(p: Point.PointLike | Point.PointData) {\n    return this.line.closestPointNormalizedLength(p)\n  }\n\n  closestPointTangent(p: Point.PointLike | Point.PointData) {\n    return this.line.closestPointTangent(p)\n  }\n\n  length() {\n    return this.line.length()\n  }\n\n  divideAt(ratio: number): [Segment, Segment] {\n    const divided = this.line.divideAt(ratio)\n    return [\n      // do not actually cut into the segment, first divided part can stay as Z\n      divided[1].isDifferentiable() ? new LineTo(divided[0]) : this.clone(),\n      new LineTo(divided[1]),\n    ]\n  }\n\n  divideAtLength(length: number): [Segment, Segment] {\n    const divided = this.line.divideAtLength(length)\n    return [\n      divided[1].isDifferentiable() ? new LineTo(divided[0]) : this.clone(),\n      new LineTo(divided[1]),\n    ]\n  }\n\n  getSubdivisions() {\n    return []\n  }\n\n  pointAt(ratio: number) {\n    return this.line.pointAt(ratio)\n  }\n\n  pointAtLength(length: number) {\n    return this.line.pointAtLength(length)\n  }\n\n  tangentAt(ratio: number) {\n    return this.line.tangentAt(ratio)\n  }\n\n  tangentAtLength(length: number) {\n    return this.line.tangentAtLength(length)\n  }\n\n  isDifferentiable() {\n    if (!this.previousSegment || !this.subpathStartSegment) {\n      return false\n    }\n\n    return !this.start.equals(this.end)\n  }\n\n  scale() {\n    return this\n  }\n\n  rotate() {\n    return this\n  }\n\n  translate() {\n    return this\n  }\n\n  equals(s: Segment) {\n    return (\n      this.type === s.type &&\n      this.start.equals(s.start) &&\n      this.end.equals(s.end)\n    )\n  }\n\n  clone() {\n    return new Close()\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      start: this.start.toJSON(),\n      end: this.end.toJSON(),\n    }\n  }\n\n  serialize() {\n    return this.type\n  }\n}\n\nexport namespace Close {\n  export function create(): Close {\n    return new Close()\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}