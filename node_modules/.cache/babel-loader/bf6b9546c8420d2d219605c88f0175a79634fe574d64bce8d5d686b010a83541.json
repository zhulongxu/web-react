{"ast":null,"code":"import { debounce } from './util';\nexport function createSensor(element) {\n  let sensor = null;\n  let listeners = [];\n  const trigger = debounce(() => {\n    listeners.forEach(listener => {\n      listener(element);\n    });\n  });\n  const create = () => {\n    const s = new ResizeObserver(trigger);\n    s.observe(element);\n    trigger();\n    return s;\n  };\n  const bind = listener => {\n    if (!sensor) {\n      sensor = create();\n    }\n    if (listeners.indexOf(listener) === -1) {\n      listeners.push(listener);\n    }\n  };\n  const destroy = () => {\n    if (sensor) {\n      sensor.disconnect();\n      listeners = [];\n      sensor = null;\n    }\n  };\n  const unbind = listener => {\n    const idx = listeners.indexOf(listener);\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n    // no listener, and sensor is exist then destroy the sensor\n    if (listeners.length === 0 && sensor) {\n      destroy();\n    }\n  };\n  return {\n    element,\n    bind,\n    destroy,\n    unbind\n  };\n}","map":{"version":3,"names":["debounce","createSensor","element","sensor","listeners","trigger","forEach","listener","create","s","ResizeObserver","observe","bind","indexOf","push","destroy","disconnect","unbind","idx","splice","length"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-common@2.0.17/node_modules/@antv/x6-common/src/size-sensor/sensors/observer.ts"],"sourcesContent":["import { debounce } from './util'\nimport { Listener, Sensor } from './types'\n\nexport function createSensor(element: Element): Sensor {\n  let sensor: ResizeObserver | null = null\n  let listeners: Listener[] = []\n\n  const trigger = debounce(() => {\n    listeners.forEach((listener) => {\n      listener(element)\n    })\n  })\n\n  const create = () => {\n    const s = new ResizeObserver(trigger)\n    s.observe(element)\n    trigger()\n    return s\n  }\n\n  const bind = (listener: Listener) => {\n    if (!sensor) {\n      sensor = create()\n    }\n\n    if (listeners.indexOf(listener) === -1) {\n      listeners.push(listener)\n    }\n  }\n\n  const destroy = () => {\n    if (sensor) {\n      sensor.disconnect()\n      listeners = []\n      sensor = null\n    }\n  }\n\n  const unbind = (listener: Listener) => {\n    const idx = listeners.indexOf(listener)\n    if (idx !== -1) {\n      listeners.splice(idx, 1)\n    }\n\n    // no listener, and sensor is exist then destroy the sensor\n    if (listeners.length === 0 && sensor) {\n      destroy()\n    }\n  }\n\n  return {\n    element,\n    bind,\n    destroy,\n    unbind,\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,QAAQ;AAGjC,OAAM,SAAUC,YAAYA,CAACC,OAAgB;EAC3C,IAAIC,MAAM,GAA0B,IAAI;EACxC,IAAIC,SAAS,GAAe,EAAE;EAE9B,MAAMC,OAAO,GAAGL,QAAQ,CAAC,MAAK;IAC5BI,SAAS,CAACE,OAAO,CAAEC,QAAQ,IAAI;MAC7BA,QAAQ,CAACL,OAAO,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAMM,MAAM,GAAGA,CAAA,KAAK;IAClB,MAAMC,CAAC,GAAG,IAAIC,cAAc,CAACL,OAAO,CAAC;IACrCI,CAAC,CAACE,OAAO,CAACT,OAAO,CAAC;IAClBG,OAAO,EAAE;IACT,OAAOI,CAAC;EACV,CAAC;EAED,MAAMG,IAAI,GAAIL,QAAkB,IAAI;IAClC,IAAI,CAACJ,MAAM,EAAE;MACXA,MAAM,GAAGK,MAAM,EAAE;;IAGnB,IAAIJ,SAAS,CAACS,OAAO,CAACN,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;MACtCH,SAAS,CAACU,IAAI,CAACP,QAAQ,CAAC;;EAE5B,CAAC;EAED,MAAMQ,OAAO,GAAGA,CAAA,KAAK;IACnB,IAAIZ,MAAM,EAAE;MACVA,MAAM,CAACa,UAAU,EAAE;MACnBZ,SAAS,GAAG,EAAE;MACdD,MAAM,GAAG,IAAI;;EAEjB,CAAC;EAED,MAAMc,MAAM,GAAIV,QAAkB,IAAI;IACpC,MAAMW,GAAG,GAAGd,SAAS,CAACS,OAAO,CAACN,QAAQ,CAAC;IACvC,IAAIW,GAAG,KAAK,CAAC,CAAC,EAAE;MACdd,SAAS,CAACe,MAAM,CAACD,GAAG,EAAE,CAAC,CAAC;;IAG1B;IACA,IAAId,SAAS,CAACgB,MAAM,KAAK,CAAC,IAAIjB,MAAM,EAAE;MACpCY,OAAO,EAAE;;EAEb,CAAC;EAED,OAAO;IACLb,OAAO;IACPU,IAAI;IACJG,OAAO;IACPE;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}