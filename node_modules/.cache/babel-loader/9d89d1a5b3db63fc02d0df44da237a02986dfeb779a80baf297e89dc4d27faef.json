{"ast":null,"code":"import { Registry } from '../registry';\nimport * as connectors from './main';\nexport var Connector;\n(function (Connector) {\n  Connector.presets = connectors;\n  Connector.registry = Registry.create({\n    type: 'connector'\n  });\n  Connector.registry.register(Connector.presets, true);\n})(Connector || (Connector = {}));","map":{"version":3,"names":["Registry","connectors","Connector","presets","registry","create","type","register"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/connector/index.ts"],"sourcesContent":["import { Point, Path } from '@antv/x6-geometry'\nimport { KeyValue } from '@antv/x6-common'\nimport { Registry } from '../registry'\nimport { EdgeView } from '../../view'\nimport * as connectors from './main'\n\nexport namespace Connector {\n  export interface BaseOptions {\n    raw?: boolean\n  }\n\n  export type Definition<T extends BaseOptions = BaseOptions> = (\n    this: EdgeView,\n    sourcePoint: Point.PointLike,\n    targetPoint: Point.PointLike,\n    routePoints: Point.PointLike[],\n    options: T,\n    edgeView: EdgeView,\n  ) => Path | string\n}\n\nexport namespace Connector {\n  export type Presets = (typeof Connector)['presets']\n\n  export type OptionsMap = {\n    readonly [K in keyof Presets]-?: Parameters<Presets[K]>[3]\n  }\n\n  export type NativeNames = keyof Presets\n\n  export interface NativeItem<T extends NativeNames = NativeNames> {\n    name: T\n    args?: OptionsMap[T]\n  }\n\n  export interface ManaualItem {\n    name: Exclude<string, NativeNames>\n    args?: KeyValue\n  }\n}\n\nexport namespace Connector {\n  export const presets = connectors\n  export const registry = Registry.create<Definition, Presets>({\n    type: 'connector',\n  })\n\n  registry.register(presets, true)\n}\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,OAAO,KAAKC,UAAU,MAAM,QAAQ;AAqCpC,OAAM,IAAWC,SAAS;AAA1B,WAAiBA,SAAS;EACXA,SAAA,CAAAC,OAAO,GAAGF,UAAU;EACpBC,SAAA,CAAAE,QAAQ,GAAGJ,QAAQ,CAACK,MAAM,CAAsB;IAC3DC,IAAI,EAAE;GACP,CAAC;EAEFJ,SAAA,CAAAE,QAAQ,CAACG,QAAQ,CAACL,SAAA,CAAAC,OAAO,EAAE,IAAI,CAAC;AAClC,CAAC,EAPgBD,SAAS,KAATA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}