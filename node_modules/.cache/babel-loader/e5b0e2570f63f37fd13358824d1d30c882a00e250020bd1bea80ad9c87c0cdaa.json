{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Registry } from '../registry';\nimport { ToolsView } from '../../view/tool';\nimport { Button } from './button';\nimport { Boundary } from './boundary';\nimport { Vertices } from './vertices';\nimport { Segments } from './segments';\nimport { SourceAnchor, TargetAnchor } from './anchor';\nimport { SourceArrowhead, TargetArrowhead } from './arrowhead';\nimport { CellEditor } from './editor';\nexport var NodeTool;\n(function (NodeTool) {\n  NodeTool.presets = {\n    boundary: Boundary,\n    button: Button,\n    'button-remove': Button.Remove,\n    'node-editor': CellEditor.NodeEditor\n  };\n  NodeTool.registry = Registry.create({\n    type: 'node tool',\n    process(name, options) {\n      if (typeof options === 'function') {\n        return options;\n      }\n      let parent = ToolsView.ToolItem;\n      const {\n          inherit\n        } = options,\n        others = __rest(options, [\"inherit\"]);\n      if (inherit) {\n        const base = this.get(inherit);\n        if (base == null) {\n          this.onNotFound(inherit, 'inherited');\n        } else {\n          parent = base;\n        }\n      }\n      if (others.name == null) {\n        others.name = name;\n      }\n      return parent.define.call(parent, others);\n    }\n  });\n  NodeTool.registry.register(NodeTool.presets, true);\n})(NodeTool || (NodeTool = {}));\nexport var EdgeTool;\n(function (EdgeTool) {\n  EdgeTool.presets = {\n    boundary: Boundary,\n    vertices: Vertices,\n    segments: Segments,\n    button: Button,\n    'button-remove': Button.Remove,\n    'source-anchor': SourceAnchor,\n    'target-anchor': TargetAnchor,\n    'source-arrowhead': SourceArrowhead,\n    'target-arrowhead': TargetArrowhead,\n    'edge-editor': CellEditor.EdgeEditor\n  };\n  EdgeTool.registry = Registry.create({\n    type: 'edge tool',\n    process(name, options) {\n      if (typeof options === 'function') {\n        return options;\n      }\n      let parent = ToolsView.ToolItem;\n      const {\n          inherit\n        } = options,\n        others = __rest(options, [\"inherit\"]);\n      if (inherit) {\n        const base = this.get(inherit);\n        if (base == null) {\n          this.onNotFound(inherit, 'inherited');\n        } else {\n          parent = base;\n        }\n      }\n      if (others.name == null) {\n        others.name = name;\n      }\n      return parent.define.call(parent, others);\n    }\n  });\n  EdgeTool.registry.register(EdgeTool.presets, true);\n})(EdgeTool || (EdgeTool = {}));","map":{"version":3,"names":["Registry","ToolsView","Button","Boundary","Vertices","Segments","SourceAnchor","TargetAnchor","SourceArrowhead","TargetArrowhead","CellEditor","NodeTool","presets","boundary","button","Remove","NodeEditor","registry","create","type","process","name","options","parent","ToolItem","inherit","others","__rest","base","get","onNotFound","define","call","register","EdgeTool","vertices","segments","EdgeEditor"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/tool/index.ts"],"sourcesContent":["import { KeyValue } from '@antv/x6-common'\nimport { Registry } from '../registry'\nimport { ToolsView } from '../../view/tool'\nimport { Button } from './button'\nimport { Boundary } from './boundary'\nimport { Vertices } from './vertices'\nimport { Segments } from './segments'\nimport { SourceAnchor, TargetAnchor } from './anchor'\nimport { SourceArrowhead, TargetArrowhead } from './arrowhead'\nimport { CellEditor } from './editor'\n\nexport namespace NodeTool {\n  export const presets = {\n    boundary: Boundary,\n    button: Button,\n    'button-remove': Button.Remove,\n    'node-editor': CellEditor.NodeEditor,\n  }\n\n  export type Definition = ToolsView.ToolItem.Definition\n\n  export const registry = Registry.create<\n    Definition,\n    Presets,\n    ToolsView.ToolItem.Options & { inherit?: string } & KeyValue\n  >({\n    type: 'node tool',\n    process(name, options) {\n      if (typeof options === 'function') {\n        return options\n      }\n\n      let parent = ToolsView.ToolItem\n      const { inherit, ...others } = options\n      if (inherit) {\n        const base = this.get(inherit)\n        if (base == null) {\n          this.onNotFound(inherit, 'inherited')\n        } else {\n          parent = base\n        }\n      }\n\n      if (others.name == null) {\n        others.name = name\n      }\n\n      return parent.define.call(parent, others)\n    },\n  })\n\n  registry.register(presets, true)\n}\n\nexport namespace NodeTool {\n  export type Presets = (typeof NodeTool)['presets']\n\n  export type OptionsMap = {\n    readonly [K in keyof Presets]-?: ConstructorParameters<Presets[K]>[0]\n  }\n\n  export type NativeNames = keyof Presets\n\n  export interface NativeItem<T extends NativeNames = NativeNames> {\n    name: T\n    args?: OptionsMap[T]\n  }\n\n  export interface ManaualItem {\n    name: Exclude<string, NativeNames>\n    args?: ToolsView.ToolItem.Options\n  }\n}\n\nexport namespace EdgeTool {\n  export const presets = {\n    boundary: Boundary,\n    vertices: Vertices,\n    segments: Segments,\n    button: Button,\n    'button-remove': Button.Remove,\n    'source-anchor': SourceAnchor,\n    'target-anchor': TargetAnchor,\n    'source-arrowhead': SourceArrowhead,\n    'target-arrowhead': TargetArrowhead,\n    'edge-editor': CellEditor.EdgeEditor,\n  }\n\n  export type Definition = NodeTool.Definition\n\n  export const registry = Registry.create<\n    Definition,\n    Presets,\n    ToolsView.ToolItem.Options & { inherit?: string } & KeyValue\n  >({\n    type: 'edge tool',\n    process(name, options) {\n      if (typeof options === 'function') {\n        return options\n      }\n\n      let parent = ToolsView.ToolItem\n      const { inherit, ...others } = options\n      if (inherit) {\n        const base = this.get(inherit)\n        if (base == null) {\n          this.onNotFound(inherit, 'inherited')\n        } else {\n          parent = base\n        }\n      }\n\n      if (others.name == null) {\n        others.name = name\n      }\n\n      return parent.define.call(parent, others)\n    },\n  })\n\n  registry.register(presets, true)\n}\n\nexport namespace EdgeTool {\n  export type Presets = (typeof EdgeTool)['presets']\n\n  export type OptionsMap = {\n    readonly [K in keyof Presets]-?: ConstructorParameters<Presets[K]>[0]\n  }\n\n  export type NativeNames = keyof Presets\n\n  export interface NativeItem<T extends NativeNames = NativeNames> {\n    name: T\n    args?: OptionsMap[T]\n  }\n\n  export interface ManaualItem {\n    name: Exclude<string, NativeNames>\n    args?: ToolsView.ToolItem.Options\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}