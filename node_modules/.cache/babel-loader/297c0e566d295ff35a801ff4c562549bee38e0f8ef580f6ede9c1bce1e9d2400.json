{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Rectangle } from '@antv/x6-geometry';\nimport { ArrayExt, ObjectExt, Dom, FunctionExt } from '@antv/x6-common';\nimport { Registry } from '../registry/registry';\nimport { View } from './view';\nimport { Cache } from './cache';\nimport { Markup } from './markup';\nimport { ToolsView } from './tool';\nimport { AttrManager } from './attr';\nimport { FlagManager } from './flag';\nimport { Util } from '../util';\nexport class CellView extends View {\n  static getDefaults() {\n    return this.defaults;\n  }\n  static config(options) {\n    this.defaults = this.getOptions(options);\n  }\n  static getOptions(options) {\n    const mergeActions = (arr1, arr2) => {\n      if (arr2 != null) {\n        return ArrayExt.uniq([...(Array.isArray(arr1) ? arr1 : [arr1]), ...(Array.isArray(arr2) ? arr2 : [arr2])]);\n      }\n      return Array.isArray(arr1) ? [...arr1] : [arr1];\n    };\n    const ret = ObjectExt.cloneDeep(this.getDefaults());\n    const {\n        bootstrap,\n        actions,\n        events,\n        documentEvents\n      } = options,\n      others = __rest(options, [\"bootstrap\", \"actions\", \"events\", \"documentEvents\"]);\n    if (bootstrap) {\n      ret.bootstrap = mergeActions(ret.bootstrap, bootstrap);\n    }\n    if (actions) {\n      Object.entries(actions).forEach(([key, val]) => {\n        const raw = ret.actions[key];\n        if (val && raw) {\n          ret.actions[key] = mergeActions(raw, val);\n        } else if (val) {\n          ret.actions[key] = mergeActions(val);\n        }\n      });\n    }\n    if (events) {\n      ret.events = Object.assign(Object.assign({}, ret.events), events);\n    }\n    if (options.documentEvents) {\n      ret.documentEvents = Object.assign(Object.assign({}, ret.documentEvents), documentEvents);\n    }\n    return ObjectExt.merge(ret, others);\n  }\n  get [Symbol.toStringTag]() {\n    return CellView.toStringTag;\n  }\n  constructor(cell, options = {}) {\n    super();\n    this.cell = cell;\n    this.options = this.ensureOptions(options);\n    this.graph = this.options.graph;\n    this.attr = new AttrManager(this);\n    this.flag = new FlagManager(this, this.options.actions, this.options.bootstrap);\n    this.cache = new Cache(this);\n    this.setContainer(this.ensureContainer());\n    this.setup();\n    this.init();\n  }\n  init() {}\n  onRemove() {\n    this.removeTools();\n  }\n  get priority() {\n    return this.options.priority;\n  }\n  get rootSelector() {\n    return this.options.rootSelector;\n  }\n  getConstructor() {\n    return this.constructor;\n  }\n  ensureOptions(options) {\n    return this.getConstructor().getOptions(options);\n  }\n  getContainerTagName() {\n    return this.options.isSvgElement ? 'g' : 'div';\n  }\n  getContainerStyle() {}\n  getContainerAttrs() {\n    return {\n      'data-cell-id': this.cell.id,\n      'data-shape': this.cell.shape\n    };\n  }\n  getContainerClassName() {\n    return this.prefixClassName('cell');\n  }\n  ensureContainer() {\n    return View.createElement(this.getContainerTagName(), this.options.isSvgElement);\n  }\n  setContainer(container) {\n    if (this.container !== container) {\n      this.undelegateEvents();\n      this.container = container;\n      if (this.options.events != null) {\n        this.delegateEvents(this.options.events);\n      }\n      const attrs = this.getContainerAttrs();\n      if (attrs != null) {\n        this.setAttrs(attrs, container);\n      }\n      const style = this.getContainerStyle();\n      if (style != null) {\n        this.setStyle(style, container);\n      }\n      const className = this.getContainerClassName();\n      if (className != null) {\n        this.addClass(className, container);\n      }\n    }\n    return this;\n  }\n  isNodeView() {\n    return false;\n  }\n  isEdgeView() {\n    return false;\n  }\n  render() {\n    return this;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  confirmUpdate(flag, options = {}) {\n    return 0;\n  }\n  getBootstrapFlag() {\n    return this.flag.getBootstrapFlag();\n  }\n  getFlag(actions) {\n    return this.flag.getFlag(actions);\n  }\n  hasAction(flag, actions) {\n    return this.flag.hasAction(flag, actions);\n  }\n  removeAction(flag, actions) {\n    return this.flag.removeAction(flag, actions);\n  }\n  handleAction(flag, action, handle, additionalRemovedActions) {\n    if (this.hasAction(flag, action)) {\n      handle();\n      const removedFlags = [action];\n      if (additionalRemovedActions) {\n        if (typeof additionalRemovedActions === 'string') {\n          removedFlags.push(additionalRemovedActions);\n        } else {\n          removedFlags.push(...additionalRemovedActions);\n        }\n      }\n      return this.removeAction(flag, removedFlags);\n    }\n    return flag;\n  }\n  setup() {\n    this.cell.on('changed', this.onCellChanged, this);\n  }\n  onCellChanged({\n    options\n  }) {\n    this.onAttrsChange(options);\n  }\n  onAttrsChange(options) {\n    let flag = this.flag.getChangedFlag();\n    if (options.updated || !flag) {\n      return;\n    }\n    if (options.dirty && this.hasAction(flag, 'update')) {\n      flag |= this.getFlag('render'); // eslint-disable-line no-bitwise\n    }\n    // tool changes should be sync render\n    if (options.toolId) {\n      options.async = false;\n    }\n    if (this.graph != null) {\n      this.graph.renderer.requestViewUpdate(this, flag, options);\n    }\n  }\n  parseJSONMarkup(markup, rootElem) {\n    const result = Markup.parseJSONMarkup(markup);\n    const selectors = result.selectors;\n    const rootSelector = this.rootSelector;\n    if (rootElem && rootSelector) {\n      if (selectors[rootSelector]) {\n        throw new Error('Invalid root selector');\n      }\n      selectors[rootSelector] = rootElem;\n    }\n    return result;\n  }\n  can(feature) {\n    let interacting = this.graph.options.interacting;\n    if (typeof interacting === 'function') {\n      interacting = FunctionExt.call(interacting, this.graph, this);\n    }\n    if (typeof interacting === 'object') {\n      let val = interacting[feature];\n      if (typeof val === 'function') {\n        val = FunctionExt.call(val, this.graph, this);\n      }\n      return val !== false;\n    }\n    if (typeof interacting === 'boolean') {\n      return interacting;\n    }\n    return false;\n  }\n  cleanCache() {\n    this.cache.clean();\n    return this;\n  }\n  getCache(elem) {\n    return this.cache.get(elem);\n  }\n  getDataOfElement(elem) {\n    return this.cache.getData(elem);\n  }\n  getMatrixOfElement(elem) {\n    return this.cache.getMatrix(elem);\n  }\n  getShapeOfElement(elem) {\n    return this.cache.getShape(elem);\n  }\n  getBoundingRectOfElement(elem) {\n    return this.cache.getBoundingRect(elem);\n  }\n  getBBoxOfElement(elem) {\n    const rect = this.getBoundingRectOfElement(elem);\n    const matrix = this.getMatrixOfElement(elem);\n    const rm = this.getRootRotatedMatrix();\n    const tm = this.getRootTranslatedMatrix();\n    return Util.transformRectangle(rect, tm.multiply(rm).multiply(matrix));\n  }\n  getUnrotatedBBoxOfElement(elem) {\n    const rect = this.getBoundingRectOfElement(elem);\n    const matrix = this.getMatrixOfElement(elem);\n    const tm = this.getRootTranslatedMatrix();\n    return Util.transformRectangle(rect, tm.multiply(matrix));\n  }\n  getBBox(options = {}) {\n    let bbox;\n    if (options.useCellGeometry) {\n      const cell = this.cell;\n      const angle = cell.isNode() ? cell.getAngle() : 0;\n      bbox = cell.getBBox().bbox(angle);\n    } else {\n      bbox = this.getBBoxOfElement(this.container);\n    }\n    return this.graph.coord.localToGraphRect(bbox);\n  }\n  getRootTranslatedMatrix() {\n    const cell = this.cell;\n    const pos = cell.isNode() ? cell.getPosition() : {\n      x: 0,\n      y: 0\n    };\n    return Dom.createSVGMatrix().translate(pos.x, pos.y);\n  }\n  getRootRotatedMatrix() {\n    let matrix = Dom.createSVGMatrix();\n    const cell = this.cell;\n    const angle = cell.isNode() ? cell.getAngle() : 0;\n    if (angle) {\n      const bbox = cell.getBBox();\n      const cx = bbox.width / 2;\n      const cy = bbox.height / 2;\n      matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy);\n    }\n    return matrix;\n  }\n  findMagnet(elem = this.container) {\n    return this.findByAttr('magnet', elem);\n  }\n  updateAttrs(rootNode, attrs, options = {}) {\n    if (options.rootBBox == null) {\n      options.rootBBox = new Rectangle();\n    }\n    if (options.selectors == null) {\n      options.selectors = this.selectors;\n    }\n    this.attr.update(rootNode, attrs, options);\n  }\n  isEdgeElement(magnet) {\n    return this.cell.isEdge() && (magnet == null || magnet === this.container);\n  }\n  // #region highlight\n  prepareHighlight(elem, options = {}) {\n    const magnet = elem || this.container;\n    options.partial = magnet === this.container;\n    return magnet;\n  }\n  highlight(elem, options = {}) {\n    const magnet = this.prepareHighlight(elem, options);\n    this.notify('cell:highlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell\n    });\n    if (this.isEdgeView()) {\n      this.notify('edge:highlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell\n      });\n    } else if (this.isNodeView()) {\n      this.notify('node:highlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell\n      });\n    }\n    return this;\n  }\n  unhighlight(elem, options = {}) {\n    const magnet = this.prepareHighlight(elem, options);\n    this.notify('cell:unhighlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell\n    });\n    if (this.isNodeView()) {\n      this.notify('node:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell\n      });\n    } else if (this.isEdgeView()) {\n      this.notify('edge:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell\n      });\n    }\n    return this;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  notifyUnhighlight(magnet, options) {}\n  // #endregion\n  getEdgeTerminal(magnet, x, y, edge, type) {\n    const cell = this.cell;\n    const portId = this.findAttr('port', magnet);\n    const selector = magnet.getAttribute('data-selector');\n    const terminal = {\n      cell: cell.id\n    };\n    if (selector != null) {\n      terminal.magnet = selector;\n    }\n    if (portId != null) {\n      terminal.port = portId;\n      if (cell.isNode()) {\n        if (!cell.hasPort(portId) && selector == null) {\n          // port created via the `port` attribute (not API)\n          terminal.selector = this.getSelector(magnet);\n        }\n      }\n    } else if (selector == null && this.container !== magnet) {\n      terminal.selector = this.getSelector(magnet);\n    }\n    return terminal;\n  }\n  getMagnetFromEdgeTerminal(terminal) {\n    const cell = this.cell;\n    const root = this.container;\n    const portId = terminal.port;\n    let selector = terminal.magnet;\n    let magnet;\n    if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n      magnet = this.findPortElem(portId, selector) || root;\n    } else {\n      if (!selector) {\n        selector = terminal.selector;\n      }\n      if (!selector && portId != null) {\n        selector = `[port=\"${portId}\"]`;\n      }\n      magnet = this.findOne(selector, root, this.selectors);\n    }\n    return magnet;\n  }\n  hasTools(name) {\n    const tools = this.tools;\n    if (tools == null) {\n      return false;\n    }\n    if (name == null) {\n      return true;\n    }\n    return tools.name === name;\n  }\n  addTools(config) {\n    this.removeTools();\n    if (config) {\n      if (!this.can('toolsAddable')) {\n        return this;\n      }\n      const tools = ToolsView.isToolsView(config) ? config : new ToolsView(config);\n      this.tools = tools;\n      tools.config({\n        view: this\n      });\n      tools.mount();\n    }\n    return this;\n  }\n  updateTools(options = {}) {\n    if (this.tools) {\n      this.tools.update(options);\n    }\n    return this;\n  }\n  removeTools() {\n    if (this.tools) {\n      this.tools.remove();\n      this.tools = null;\n    }\n    return this;\n  }\n  hideTools() {\n    if (this.tools) {\n      this.tools.hide();\n    }\n    return this;\n  }\n  showTools() {\n    if (this.tools) {\n      this.tools.show();\n    }\n    return this;\n  }\n  renderTools() {\n    const tools = this.cell.getTools();\n    this.addTools(tools);\n    return this;\n  }\n  notify(name, args) {\n    this.trigger(name, args);\n    this.graph.trigger(name, args);\n    return this;\n  }\n  getEventArgs(e, x, y) {\n    const view = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    const cell = view.cell;\n    if (x == null || y == null) {\n      return {\n        e,\n        view,\n        cell\n      };\n    }\n    return {\n      e,\n      x,\n      y,\n      view,\n      cell\n    };\n  }\n  onClick(e, x, y) {\n    this.notify('cell:click', this.getEventArgs(e, x, y));\n  }\n  onDblClick(e, x, y) {\n    this.notify('cell:dblclick', this.getEventArgs(e, x, y));\n  }\n  onContextMenu(e, x, y) {\n    this.notify('cell:contextmenu', this.getEventArgs(e, x, y));\n  }\n  onMouseDown(e, x, y) {\n    if (this.cell.model) {\n      this.cachedModelForMouseEvent = this.cell.model;\n      this.cachedModelForMouseEvent.startBatch('mouse');\n    }\n    this.notify('cell:mousedown', this.getEventArgs(e, x, y));\n  }\n  onMouseUp(e, x, y) {\n    this.notify('cell:mouseup', this.getEventArgs(e, x, y));\n    if (this.cachedModelForMouseEvent) {\n      this.cachedModelForMouseEvent.stopBatch('mouse', {\n        cell: this.cell\n      });\n      this.cachedModelForMouseEvent = null;\n    }\n  }\n  onMouseMove(e, x, y) {\n    this.notify('cell:mousemove', this.getEventArgs(e, x, y));\n  }\n  onMouseOver(e) {\n    this.notify('cell:mouseover', this.getEventArgs(e));\n  }\n  onMouseOut(e) {\n    this.notify('cell:mouseout', this.getEventArgs(e));\n  }\n  onMouseEnter(e) {\n    this.notify('cell:mouseenter', this.getEventArgs(e));\n  }\n  onMouseLeave(e) {\n    this.notify('cell:mouseleave', this.getEventArgs(e));\n  }\n  onMouseWheel(e, x, y, delta) {\n    this.notify('cell:mousewheel', Object.assign({\n      delta\n    }, this.getEventArgs(e, x, y)));\n  }\n  onCustomEvent(e, name, x, y) {\n    this.notify('cell:customevent', Object.assign({\n      name\n    }, this.getEventArgs(e, x, y)));\n    this.notify(name, Object.assign({}, this.getEventArgs(e, x, y)));\n  }\n  onMagnetMouseDown(e, magnet, x, y) {}\n  onMagnetDblClick(e, magnet, x, y) {}\n  onMagnetContextMenu(e, magnet, x, y) {}\n  onLabelMouseDown(e, x, y) {}\n  checkMouseleave(e) {\n    const target = this.getEventTarget(e, {\n      fromPoint: true\n    });\n    const view = this.graph.findViewByElem(target);\n    if (view === this) {\n      return;\n    }\n    // Leaving the current view\n    this.onMouseLeave(e);\n    if (!view) {\n      return;\n    }\n    // Entering another view\n    view.onMouseEnter(e);\n  }\n  dispose() {\n    this.cell.off('changed', this.onCellChanged, this);\n  }\n}\nCellView.defaults = {\n  isSvgElement: true,\n  rootSelector: 'root',\n  priority: 0,\n  bootstrap: [],\n  actions: {}\n};\n__decorate([CellView.dispose()], CellView.prototype, \"dispose\", null);\n(function (CellView) {\n  CellView.Flag = FlagManager;\n  CellView.Attr = AttrManager;\n})(CellView || (CellView = {}));\n(function (CellView) {\n  CellView.toStringTag = `X6.${CellView.name}`;\n  function isCellView(instance) {\n    if (instance == null) {\n      return false;\n    }\n    if (instance instanceof CellView) {\n      return true;\n    }\n    const tag = instance[Symbol.toStringTag];\n    const view = instance;\n    if ((tag == null || tag === CellView.toStringTag) && typeof view.isNodeView === 'function' && typeof view.isEdgeView === 'function' && typeof view.confirmUpdate === 'function') {\n      return true;\n    }\n    return false;\n  }\n  CellView.isCellView = isCellView;\n})(CellView || (CellView = {}));\n// decorators\n// ----\n(function (CellView) {\n  function priority(value) {\n    return function (ctor) {\n      ctor.config({\n        priority: value\n      });\n    };\n  }\n  CellView.priority = priority;\n  function bootstrap(actions) {\n    return function (ctor) {\n      ctor.config({\n        bootstrap: actions\n      });\n    };\n  }\n  CellView.bootstrap = bootstrap;\n})(CellView || (CellView = {}));\n(function (CellView) {\n  CellView.registry = Registry.create({\n    type: 'view'\n  });\n})(CellView || (CellView = {}));","map":{"version":3,"names":["Rectangle","ArrayExt","ObjectExt","Dom","FunctionExt","Registry","View","Cache","Markup","ToolsView","AttrManager","FlagManager","Util","CellView","getDefaults","defaults","config","options","getOptions","mergeActions","arr1","arr2","uniq","Array","isArray","ret","cloneDeep","bootstrap","actions","events","documentEvents","others","__rest","Object","entries","forEach","key","val","raw","assign","merge","Symbol","toStringTag","constructor","cell","ensureOptions","graph","attr","flag","cache","setContainer","ensureContainer","setup","init","onRemove","removeTools","priority","rootSelector","getConstructor","getContainerTagName","isSvgElement","getContainerStyle","getContainerAttrs","id","shape","getContainerClassName","prefixClassName","createElement","container","undelegateEvents","delegateEvents","attrs","setAttrs","style","setStyle","className","addClass","isNodeView","isEdgeView","render","confirmUpdate","getBootstrapFlag","getFlag","hasAction","removeAction","handleAction","action","handle","additionalRemovedActions","removedFlags","push","on","onCellChanged","onAttrsChange","getChangedFlag","updated","dirty","toolId","async","renderer","requestViewUpdate","parseJSONMarkup","markup","rootElem","result","selectors","Error","can","feature","interacting","call","cleanCache","clean","getCache","elem","get","getDataOfElement","getData","getMatrixOfElement","getMatrix","getShapeOfElement","getShape","getBoundingRectOfElement","getBoundingRect","getBBoxOfElement","rect","matrix","rm","getRootRotatedMatrix","tm","getRootTranslatedMatrix","transformRectangle","multiply","getUnrotatedBBoxOfElement","getBBox","bbox","useCellGeometry","angle","isNode","getAngle","coord","localToGraphRect","pos","getPosition","x","y","createSVGMatrix","translate","cx","width","cy","height","rotate","findMagnet","findByAttr","updateAttrs","rootNode","rootBBox","update","isEdgeElement","magnet","isEdge","prepareHighlight","partial","highlight","notify","view","edge","node","unhighlight","notifyUnhighlight","getEdgeTerminal","type","portId","findAttr","selector","getAttribute","terminal","port","hasPort","getSelector","getMagnetFromEdgeTerminal","root","findPortElem","findOne","hasTools","name","tools","addTools","isToolsView","mount","updateTools","remove","hideTools","hide","showTools","show","renderTools","getTools","args","trigger","getEventArgs","e","onClick","onDblClick","onContextMenu","onMouseDown","model","cachedModelForMouseEvent","startBatch","onMouseUp","stopBatch","onMouseMove","onMouseOver","onMouseOut","onMouseEnter","onMouseLeave","onMouseWheel","delta","onCustomEvent","onMagnetMouseDown","onMagnetDblClick","onMagnetContextMenu","onLabelMouseDown","checkMouseleave","target","getEventTarget","fromPoint","findViewByElem","dispose","off","__decorate","Flag","Attr","isCellView","instance","tag","value","ctor","registry","create"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/view/cell.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Rectangle } from '@antv/x6-geometry'\nimport {\n  ArrayExt,\n  ObjectExt,\n  Dom,\n  FunctionExt,\n  Nilable,\n  KeyValue,\n} from '@antv/x6-common'\nimport { Registry } from '../registry/registry'\nimport { View } from './view'\nimport { Cache } from './cache'\nimport { Markup } from './markup'\nimport { ToolsView } from './tool'\nimport { AttrManager } from './attr'\nimport { FlagManager } from './flag'\nimport { Util } from '../util'\nimport { Attr } from '../registry/attr'\nimport { Cell } from '../model/cell'\nimport { Edge } from '../model/edge'\nimport { Model } from '../model/model'\nimport { EdgeView } from './edge'\nimport { NodeView } from './node'\nimport { Graph } from '../graph'\n\nexport class CellView<\n  Entity extends Cell = Cell,\n  Options extends CellView.Options = CellView.Options,\n> extends View<CellView.EventArgs> {\n  protected static defaults: Partial<CellView.Options> = {\n    isSvgElement: true,\n    rootSelector: 'root',\n    priority: 0,\n    bootstrap: [],\n    actions: {},\n  }\n\n  public static getDefaults() {\n    return this.defaults\n  }\n\n  public static config<T extends CellView.Options = CellView.Options>(\n    options: Partial<T>,\n  ) {\n    this.defaults = this.getOptions(options)\n  }\n\n  public static getOptions<T extends CellView.Options = CellView.Options>(\n    options: Partial<T>,\n  ): T {\n    const mergeActions = <T>(arr1: T | T[], arr2?: T | T[]) => {\n      if (arr2 != null) {\n        return ArrayExt.uniq([\n          ...(Array.isArray(arr1) ? arr1 : [arr1]),\n          ...(Array.isArray(arr2) ? arr2 : [arr2]),\n        ])\n      }\n      return Array.isArray(arr1) ? [...arr1] : [arr1]\n    }\n\n    const ret = ObjectExt.cloneDeep(this.getDefaults()) as T\n    const { bootstrap, actions, events, documentEvents, ...others } = options\n\n    if (bootstrap) {\n      ret.bootstrap = mergeActions(ret.bootstrap, bootstrap)\n    }\n\n    if (actions) {\n      Object.entries(actions).forEach(([key, val]) => {\n        const raw = ret.actions[key]\n        if (val && raw) {\n          ret.actions[key] = mergeActions(raw, val)\n        } else if (val) {\n          ret.actions[key] = mergeActions(val)\n        }\n      })\n    }\n\n    if (events) {\n      ret.events = { ...ret.events, ...events }\n    }\n\n    if (options.documentEvents) {\n      ret.documentEvents = { ...ret.documentEvents, ...documentEvents }\n    }\n\n    return ObjectExt.merge(ret, others) as T\n  }\n\n  public graph: Graph\n  public cell: Entity\n  protected selectors: Markup.Selectors\n  protected readonly options: Options\n  protected readonly flag: FlagManager\n  protected readonly attr: AttrManager\n  protected readonly cache: Cache\n\n  protected get [Symbol.toStringTag]() {\n    return CellView.toStringTag\n  }\n\n  constructor(cell: Entity, options: Partial<Options> = {}) {\n    super()\n\n    this.cell = cell\n    this.options = this.ensureOptions(options)\n    this.graph = this.options.graph\n    this.attr = new AttrManager(this)\n    this.flag = new FlagManager(\n      this,\n      this.options.actions,\n      this.options.bootstrap,\n    )\n    this.cache = new Cache(this)\n\n    this.setContainer(this.ensureContainer())\n    this.setup()\n\n    this.init()\n  }\n\n  protected init() {}\n\n  protected onRemove() {\n    this.removeTools()\n  }\n\n  public get priority() {\n    return this.options.priority\n  }\n\n  protected get rootSelector() {\n    return this.options.rootSelector\n  }\n\n  protected getConstructor<T extends CellView.Definition>() {\n    return this.constructor as any as T\n  }\n\n  protected ensureOptions(options: Partial<Options>) {\n    return this.getConstructor().getOptions(options) as Options\n  }\n\n  protected getContainerTagName(): string {\n    return this.options.isSvgElement ? 'g' : 'div'\n  }\n\n  protected getContainerStyle(): Nilable<\n    Record<string, string | number>\n  > | void {}\n\n  protected getContainerAttrs(): Nilable<Attr.SimpleAttrs> {\n    return {\n      'data-cell-id': this.cell.id,\n      'data-shape': this.cell.shape,\n    }\n  }\n\n  protected getContainerClassName(): Nilable<string | string[]> {\n    return this.prefixClassName('cell')\n  }\n\n  protected ensureContainer() {\n    return View.createElement(\n      this.getContainerTagName(),\n      this.options.isSvgElement,\n    )\n  }\n\n  protected setContainer(container: Element) {\n    if (this.container !== container) {\n      this.undelegateEvents()\n      this.container = container\n\n      if (this.options.events != null) {\n        this.delegateEvents(this.options.events)\n      }\n\n      const attrs = this.getContainerAttrs()\n      if (attrs != null) {\n        this.setAttrs(attrs, container)\n      }\n\n      const style = this.getContainerStyle()\n      if (style != null) {\n        this.setStyle(style, container)\n      }\n\n      const className = this.getContainerClassName()\n      if (className != null) {\n        this.addClass(className, container)\n      }\n    }\n\n    return this\n  }\n\n  isNodeView(): this is NodeView {\n    return false\n  }\n\n  isEdgeView(): this is EdgeView {\n    return false\n  }\n\n  render() {\n    return this\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  confirmUpdate(flag: number, options: any = {}) {\n    return 0\n  }\n\n  getBootstrapFlag() {\n    return this.flag.getBootstrapFlag()\n  }\n\n  getFlag(actions: FlagManager.Actions) {\n    return this.flag.getFlag(actions)\n  }\n\n  hasAction(flag: number, actions: FlagManager.Actions) {\n    return this.flag.hasAction(flag, actions)\n  }\n\n  removeAction(flag: number, actions: FlagManager.Actions) {\n    return this.flag.removeAction(flag, actions)\n  }\n\n  handleAction(\n    flag: number,\n    action: FlagManager.Action,\n    handle: () => void,\n    additionalRemovedActions?: FlagManager.Actions | null,\n  ) {\n    if (this.hasAction(flag, action)) {\n      handle()\n      const removedFlags = [action]\n      if (additionalRemovedActions) {\n        if (typeof additionalRemovedActions === 'string') {\n          removedFlags.push(additionalRemovedActions)\n        } else {\n          removedFlags.push(...additionalRemovedActions)\n        }\n      }\n      return this.removeAction(flag, removedFlags)\n    }\n    return flag\n  }\n\n  protected setup() {\n    this.cell.on('changed', this.onCellChanged, this)\n  }\n\n  protected onCellChanged({ options }: Cell.EventArgs['changed']) {\n    this.onAttrsChange(options)\n  }\n\n  protected onAttrsChange(options: Cell.MutateOptions) {\n    let flag = this.flag.getChangedFlag()\n    if (options.updated || !flag) {\n      return\n    }\n\n    if (options.dirty && this.hasAction(flag, 'update')) {\n      flag |= this.getFlag('render') // eslint-disable-line no-bitwise\n    }\n\n    // tool changes should be sync render\n    if (options.toolId) {\n      options.async = false\n    }\n\n    if (this.graph != null) {\n      this.graph.renderer.requestViewUpdate(this, flag, options)\n    }\n  }\n\n  parseJSONMarkup(\n    markup: Markup.JSONMarkup | Markup.JSONMarkup[],\n    rootElem?: Element,\n  ) {\n    const result = Markup.parseJSONMarkup(markup)\n    const selectors = result.selectors\n    const rootSelector = this.rootSelector\n    if (rootElem && rootSelector) {\n      if (selectors[rootSelector]) {\n        throw new Error('Invalid root selector')\n      }\n      selectors[rootSelector] = rootElem\n    }\n    return result\n  }\n\n  can(feature: CellView.InteractionNames): boolean {\n    let interacting = this.graph.options.interacting\n\n    if (typeof interacting === 'function') {\n      interacting = FunctionExt.call(interacting, this.graph, this)\n    }\n\n    if (typeof interacting === 'object') {\n      let val = interacting[feature]\n      if (typeof val === 'function') {\n        val = FunctionExt.call(val, this.graph, this)\n      }\n      return val !== false\n    }\n\n    if (typeof interacting === 'boolean') {\n      return interacting\n    }\n\n    return false\n  }\n\n  cleanCache() {\n    this.cache.clean()\n    return this\n  }\n\n  getCache(elem: Element) {\n    return this.cache.get(elem)\n  }\n\n  getDataOfElement(elem: Element) {\n    return this.cache.getData(elem)\n  }\n\n  getMatrixOfElement(elem: Element) {\n    return this.cache.getMatrix(elem)\n  }\n\n  getShapeOfElement(elem: SVGElement) {\n    return this.cache.getShape(elem)\n  }\n\n  getBoundingRectOfElement(elem: Element) {\n    return this.cache.getBoundingRect(elem)\n  }\n\n  getBBoxOfElement(elem: Element) {\n    const rect = this.getBoundingRectOfElement(elem)\n    const matrix = this.getMatrixOfElement(elem)\n    const rm = this.getRootRotatedMatrix()\n    const tm = this.getRootTranslatedMatrix()\n    return Util.transformRectangle(rect, tm.multiply(rm).multiply(matrix))\n  }\n\n  getUnrotatedBBoxOfElement(elem: SVGElement) {\n    const rect = this.getBoundingRectOfElement(elem)\n    const matrix = this.getMatrixOfElement(elem)\n    const tm = this.getRootTranslatedMatrix()\n    return Util.transformRectangle(rect, tm.multiply(matrix))\n  }\n\n  getBBox(options: { useCellGeometry?: boolean } = {}) {\n    let bbox\n    if (options.useCellGeometry) {\n      const cell = this.cell\n      const angle = cell.isNode() ? cell.getAngle() : 0\n      bbox = cell.getBBox().bbox(angle)\n    } else {\n      bbox = this.getBBoxOfElement(this.container)\n    }\n\n    return this.graph.coord.localToGraphRect(bbox)\n  }\n\n  getRootTranslatedMatrix() {\n    const cell = this.cell\n    const pos = cell.isNode() ? cell.getPosition() : { x: 0, y: 0 }\n    return Dom.createSVGMatrix().translate(pos.x, pos.y)\n  }\n\n  getRootRotatedMatrix() {\n    let matrix = Dom.createSVGMatrix()\n    const cell = this.cell\n    const angle = cell.isNode() ? cell.getAngle() : 0\n    if (angle) {\n      const bbox = cell.getBBox()\n      const cx = bbox.width / 2\n      const cy = bbox.height / 2\n      matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy)\n    }\n    return matrix\n  }\n\n  findMagnet(elem: Element = this.container) {\n    return this.findByAttr('magnet', elem)\n  }\n\n  updateAttrs(\n    rootNode: Element,\n    attrs: Attr.CellAttrs,\n    options: Partial<AttrManager.UpdateOptions> = {},\n  ) {\n    if (options.rootBBox == null) {\n      options.rootBBox = new Rectangle()\n    }\n\n    if (options.selectors == null) {\n      options.selectors = this.selectors\n    }\n\n    this.attr.update(rootNode, attrs, options as AttrManager.UpdateOptions)\n  }\n\n  isEdgeElement(magnet?: Element | null) {\n    return this.cell.isEdge() && (magnet == null || magnet === this.container)\n  }\n\n  // #region highlight\n\n  protected prepareHighlight(\n    elem?: Element | null,\n    options: CellView.HighlightOptions = {},\n  ) {\n    const magnet = elem || this.container\n    options.partial = magnet === this.container\n    return magnet\n  }\n\n  highlight(elem?: Element | null, options: CellView.HighlightOptions = {}) {\n    const magnet = this.prepareHighlight(elem, options)\n    this.notify('cell:highlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell,\n    })\n    if (this.isEdgeView()) {\n      this.notify('edge:highlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell,\n      })\n    } else if (this.isNodeView()) {\n      this.notify('node:highlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell,\n      })\n    }\n    return this\n  }\n\n  unhighlight(elem?: Element | null, options: CellView.HighlightOptions = {}) {\n    const magnet = this.prepareHighlight(elem, options)\n    this.notify('cell:unhighlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell,\n    })\n    if (this.isNodeView()) {\n      this.notify('node:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell,\n      })\n    } else if (this.isEdgeView()) {\n      this.notify('edge:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell,\n      })\n    }\n    return this\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  notifyUnhighlight(magnet: Element, options: CellView.HighlightOptions) {}\n\n  // #endregion\n\n  getEdgeTerminal(\n    magnet: Element,\n    x: number,\n    y: number,\n    edge: Edge,\n    type: Edge.TerminalType,\n  ) {\n    const cell = this.cell\n    const portId = this.findAttr('port', magnet)\n    const selector = magnet.getAttribute('data-selector')\n    const terminal: Edge.TerminalCellData = { cell: cell.id }\n\n    if (selector != null) {\n      terminal.magnet = selector\n    }\n\n    if (portId != null) {\n      terminal.port = portId\n      if (cell.isNode()) {\n        if (!cell.hasPort(portId) && selector == null) {\n          // port created via the `port` attribute (not API)\n          terminal.selector = this.getSelector(magnet)\n        }\n      }\n    } else if (selector == null && this.container !== magnet) {\n      terminal.selector = this.getSelector(magnet)\n    }\n\n    return terminal\n  }\n\n  getMagnetFromEdgeTerminal(terminal: Edge.TerminalData) {\n    const cell = this.cell\n    const root = this.container\n    const portId = (terminal as Edge.TerminalCellData).port\n    let selector = terminal.magnet\n    let magnet\n    if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n      magnet = (this as any).findPortElem(portId, selector) || root\n    } else {\n      if (!selector) {\n        selector = terminal.selector\n      }\n      if (!selector && portId != null) {\n        selector = `[port=\"${portId}\"]`\n      }\n      magnet = this.findOne(selector, root, this.selectors)\n    }\n\n    return magnet\n  }\n\n  // #region tools\n\n  protected tools: ToolsView | null\n\n  hasTools(name?: string) {\n    const tools = this.tools\n    if (tools == null) {\n      return false\n    }\n\n    if (name == null) {\n      return true\n    }\n\n    return tools.name === name\n  }\n\n  addTools(options: ToolsView.Options | null): this\n  addTools(tools: ToolsView | null): this\n  addTools(config: ToolsView | ToolsView.Options | null) {\n    this.removeTools()\n    if (config) {\n      if (!this.can('toolsAddable')) {\n        return this\n      }\n      const tools = ToolsView.isToolsView(config)\n        ? config\n        : new ToolsView(config)\n      this.tools = tools\n      tools.config({ view: this })\n      tools.mount()\n    }\n    return this\n  }\n\n  updateTools(options: ToolsView.UpdateOptions = {}) {\n    if (this.tools) {\n      this.tools.update(options)\n    }\n    return this\n  }\n\n  removeTools() {\n    if (this.tools) {\n      this.tools.remove()\n      this.tools = null\n    }\n    return this\n  }\n\n  hideTools() {\n    if (this.tools) {\n      this.tools.hide()\n    }\n    return this\n  }\n\n  showTools() {\n    if (this.tools) {\n      this.tools.show()\n    }\n    return this\n  }\n\n  protected renderTools() {\n    const tools = this.cell.getTools()\n    this.addTools(tools as ToolsView.Options)\n    return this\n  }\n\n  // #endregion\n\n  // #region events\n\n  notify<Key extends keyof CellView.EventArgs>(\n    name: Key,\n    args: CellView.EventArgs[Key],\n  ): this\n  notify(name: Exclude<string, keyof CellView.EventArgs>, args: any): this\n  notify<Key extends keyof CellView.EventArgs>(\n    name: Key,\n    args: CellView.EventArgs[Key],\n  ) {\n    this.trigger(name, args)\n    this.graph.trigger(name, args)\n    return this\n  }\n\n  protected getEventArgs<E>(e: E): CellView.MouseEventArgs<E>\n  protected getEventArgs<E>(\n    e: E,\n    x: number,\n    y: number,\n  ): CellView.MousePositionEventArgs<E>\n  protected getEventArgs<E>(e: E, x?: number, y?: number) {\n    const view = this // eslint-disable-line @typescript-eslint/no-this-alias\n    const cell = view.cell\n    if (x == null || y == null) {\n      return { e, view, cell } as CellView.MouseEventArgs<E>\n    }\n    return { e, x, y, view, cell } as CellView.MousePositionEventArgs<E>\n  }\n\n  onClick(e: Dom.ClickEvent, x: number, y: number) {\n    this.notify('cell:click', this.getEventArgs(e, x, y))\n  }\n\n  onDblClick(e: Dom.DoubleClickEvent, x: number, y: number) {\n    this.notify('cell:dblclick', this.getEventArgs(e, x, y))\n  }\n\n  onContextMenu(e: Dom.ContextMenuEvent, x: number, y: number) {\n    this.notify('cell:contextmenu', this.getEventArgs(e, x, y))\n  }\n\n  protected cachedModelForMouseEvent: Model | null\n\n  onMouseDown(e: Dom.MouseDownEvent, x: number, y: number) {\n    if (this.cell.model) {\n      this.cachedModelForMouseEvent = this.cell.model\n      this.cachedModelForMouseEvent.startBatch('mouse')\n    }\n\n    this.notify('cell:mousedown', this.getEventArgs(e, x, y))\n  }\n\n  onMouseUp(e: Dom.MouseUpEvent, x: number, y: number) {\n    this.notify('cell:mouseup', this.getEventArgs(e, x, y))\n\n    if (this.cachedModelForMouseEvent) {\n      this.cachedModelForMouseEvent.stopBatch('mouse', { cell: this.cell })\n      this.cachedModelForMouseEvent = null\n    }\n  }\n\n  onMouseMove(e: Dom.MouseMoveEvent, x: number, y: number) {\n    this.notify('cell:mousemove', this.getEventArgs(e, x, y))\n  }\n\n  onMouseOver(e: Dom.MouseOverEvent) {\n    this.notify('cell:mouseover', this.getEventArgs(e))\n  }\n\n  onMouseOut(e: Dom.MouseOutEvent) {\n    this.notify('cell:mouseout', this.getEventArgs(e))\n  }\n\n  onMouseEnter(e: Dom.MouseEnterEvent) {\n    this.notify('cell:mouseenter', this.getEventArgs(e))\n  }\n\n  onMouseLeave(e: Dom.MouseLeaveEvent) {\n    this.notify('cell:mouseleave', this.getEventArgs(e))\n  }\n\n  onMouseWheel(e: Dom.EventObject, x: number, y: number, delta: number) {\n    this.notify('cell:mousewheel', {\n      delta,\n      ...this.getEventArgs(e, x, y),\n    })\n  }\n\n  onCustomEvent(e: Dom.MouseDownEvent, name: string, x: number, y: number) {\n    this.notify('cell:customevent', { name, ...this.getEventArgs(e, x, y) })\n    this.notify(name, { ...this.getEventArgs(e, x, y) })\n  }\n\n  onMagnetMouseDown(\n    e: Dom.MouseDownEvent,\n    magnet: Element,\n    x: number,\n    y: number,\n  ) {}\n\n  onMagnetDblClick(\n    e: Dom.DoubleClickEvent,\n    magnet: Element,\n    x: number,\n    y: number,\n  ) {}\n\n  onMagnetContextMenu(\n    e: Dom.ContextMenuEvent,\n    magnet: Element,\n    x: number,\n    y: number,\n  ) {}\n\n  onLabelMouseDown(e: Dom.MouseDownEvent, x: number, y: number) {}\n\n  checkMouseleave(e: Dom.EventObject) {\n    const target = this.getEventTarget(e, { fromPoint: true })\n    const view = this.graph.findViewByElem(target)\n    if (view === this) {\n      return\n    }\n\n    // Leaving the current view\n    this.onMouseLeave(e as Dom.MouseLeaveEvent)\n    if (!view) {\n      return\n    }\n\n    // Entering another view\n    view.onMouseEnter(e as Dom.MouseEnterEvent)\n  }\n\n  @CellView.dispose()\n  dispose() {\n    this.cell.off('changed', this.onCellChanged, this)\n  }\n\n  // #endregion\n}\n\nexport namespace CellView {\n  export interface Options {\n    graph: Graph\n    priority: number\n    isSvgElement: boolean\n    rootSelector: string\n    bootstrap: FlagManager.Actions\n    actions: KeyValue<FlagManager.Actions>\n    events?: View.Events | null\n    documentEvents?: View.Events | null\n  }\n\n  type Interactable = boolean | ((this: Graph, cellView: CellView) => boolean)\n\n  interface InteractionMap {\n    // edge\n    edgeMovable?: Interactable\n    edgeLabelMovable?: Interactable\n    arrowheadMovable?: Interactable\n    vertexMovable?: Interactable\n    vertexAddable?: Interactable\n    vertexDeletable?: Interactable\n    useEdgeTools?: Interactable\n\n    // node\n    nodeMovable?: Interactable\n    magnetConnectable?: Interactable\n    stopDelegateOnDragging?: Interactable\n\n    // general\n    toolsAddable?: Interactable\n  }\n\n  export type InteractionNames = keyof InteractionMap\n\n  export type Interacting =\n    | boolean\n    | InteractionMap\n    | ((this: Graph, cellView: CellView) => InteractionMap | boolean)\n\n  export interface HighlightOptions {\n    highlighter?:\n      | string\n      | {\n          name: string\n          args: KeyValue\n        }\n\n    type?: 'embedding' | 'nodeAvailable' | 'magnetAvailable' | 'magnetAdsorbed'\n\n    partial?: boolean\n  }\n}\n\nexport namespace CellView {\n  export interface PositionEventArgs {\n    x: number\n    y: number\n  }\n\n  export interface MouseDeltaEventArgs {\n    delta: number\n  }\n\n  export interface MouseEventArgs<E> {\n    e: E\n    view: CellView\n    cell: Cell\n  }\n\n  export interface MousePositionEventArgs<E>\n    extends MouseEventArgs<E>,\n      PositionEventArgs {}\n\n  export interface EventArgs extends NodeView.EventArgs, EdgeView.EventArgs {\n    'cell:click': MousePositionEventArgs<Dom.ClickEvent>\n    'cell:dblclick': MousePositionEventArgs<Dom.DoubleClickEvent>\n    'cell:contextmenu': MousePositionEventArgs<Dom.ContextMenuEvent>\n    'cell:mousedown': MousePositionEventArgs<Dom.MouseDownEvent>\n    'cell:mousemove': MousePositionEventArgs<Dom.MouseMoveEvent>\n    'cell:mouseup': MousePositionEventArgs<Dom.MouseUpEvent>\n    'cell:mouseover': MouseEventArgs<Dom.MouseOverEvent>\n    'cell:mouseout': MouseEventArgs<Dom.MouseOutEvent>\n    'cell:mouseenter': MouseEventArgs<Dom.MouseEnterEvent>\n    'cell:mouseleave': MouseEventArgs<Dom.MouseLeaveEvent>\n    'cell:mousewheel': MousePositionEventArgs<Dom.EventObject> &\n      MouseDeltaEventArgs\n    'cell:customevent': MousePositionEventArgs<Dom.MouseDownEvent> & {\n      name: string\n    }\n    'cell:highlight': {\n      magnet: Element\n      view: CellView\n      cell: Cell\n      options: CellView.HighlightOptions\n    }\n    'cell:unhighlight': EventArgs['cell:highlight']\n  }\n}\n\nexport namespace CellView {\n  export const Flag = FlagManager\n  export const Attr = AttrManager\n}\n\nexport namespace CellView {\n  export const toStringTag = `X6.${CellView.name}`\n\n  export function isCellView(instance: any): instance is CellView {\n    if (instance == null) {\n      return false\n    }\n\n    if (instance instanceof CellView) {\n      return true\n    }\n\n    const tag = instance[Symbol.toStringTag]\n    const view = instance as CellView\n\n    if (\n      (tag == null || tag === toStringTag) &&\n      typeof view.isNodeView === 'function' &&\n      typeof view.isEdgeView === 'function' &&\n      typeof view.confirmUpdate === 'function'\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n\n// decorators\n// ----\nexport namespace CellView {\n  export function priority(value: number) {\n    return function (ctor: Definition) {\n      ctor.config({ priority: value })\n    }\n  }\n\n  export function bootstrap(actions: FlagManager.Actions) {\n    return function (ctor: Definition) {\n      ctor.config({ bootstrap: actions })\n    }\n  }\n}\n\nexport namespace CellView {\n  type CellViewClass = typeof CellView\n\n  export interface Definition extends CellViewClass {\n    new <\n      Entity extends Cell = Cell,\n      Options extends CellView.Options = CellView.Options,\n    >(\n      cell: Entity,\n      options: Partial<Options>,\n    ): CellView\n  }\n\n  export const registry = Registry.create<Definition>({\n    type: 'view',\n  })\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA,SAASA,SAAS,QAAQ,mBAAmB;AAC7C,SACEC,QAAQ,EACRC,SAAS,EACTC,GAAG,EACHC,WAAW,QAGN,iBAAiB;AACxB,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,IAAI,QAAQ,SAAS;AAS9B,OAAM,MAAOC,QAGX,SAAQP,IAAwB;EASzB,OAAOQ,WAAWA,CAAA;IACvB,OAAO,IAAI,CAACC,QAAQ;EACtB;EAEO,OAAOC,MAAMA,CAClBC,OAAmB;IAEnB,IAAI,CAACF,QAAQ,GAAG,IAAI,CAACG,UAAU,CAACD,OAAO,CAAC;EAC1C;EAEO,OAAOC,UAAUA,CACtBD,OAAmB;IAEnB,MAAME,YAAY,GAAGA,CAAIC,IAAa,EAAEC,IAAc,KAAI;MACxD,IAAIA,IAAI,IAAI,IAAI,EAAE;QAChB,OAAOpB,QAAQ,CAACqB,IAAI,CAAC,CACnB,IAAIC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,CAAC,EACxC,IAAIG,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,CAAC,CACzC,CAAC;;MAEJ,OAAOE,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAG,CAAC,GAAGA,IAAI,CAAC,GAAG,CAACA,IAAI,CAAC;IACjD,CAAC;IAED,MAAMK,GAAG,GAAGvB,SAAS,CAACwB,SAAS,CAAC,IAAI,CAACZ,WAAW,EAAE,CAAM;IACxD,MAAM;QAAEa,SAAS;QAAEC,OAAO;QAAEC,MAAM;QAAEC;MAAc,IAAgBb,OAAO;MAAlBc,MAAM,GAAAC,MAAA,CAAKf,OAAO,EAAnE,oDAAyD,CAAU;IAEzE,IAAIU,SAAS,EAAE;MACbF,GAAG,CAACE,SAAS,GAAGR,YAAY,CAACM,GAAG,CAACE,SAAS,EAAEA,SAAS,CAAC;;IAGxD,IAAIC,OAAO,EAAE;MACXK,MAAM,CAACC,OAAO,CAACN,OAAO,CAAC,CAACO,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAC,KAAI;QAC7C,MAAMC,GAAG,GAAGb,GAAG,CAACG,OAAO,CAACQ,GAAG,CAAC;QAC5B,IAAIC,GAAG,IAAIC,GAAG,EAAE;UACdb,GAAG,CAACG,OAAO,CAACQ,GAAG,CAAC,GAAGjB,YAAY,CAACmB,GAAG,EAAED,GAAG,CAAC;SAC1C,MAAM,IAAIA,GAAG,EAAE;UACdZ,GAAG,CAACG,OAAO,CAACQ,GAAG,CAAC,GAAGjB,YAAY,CAACkB,GAAG,CAAC;;MAExC,CAAC,CAAC;;IAGJ,IAAIR,MAAM,EAAE;MACVJ,GAAG,CAACI,MAAM,GAAAI,MAAA,CAAAM,MAAA,CAAAN,MAAA,CAAAM,MAAA,KAAQd,GAAG,CAACI,MAAM,GAAKA,MAAM,CAAE;;IAG3C,IAAIZ,OAAO,CAACa,cAAc,EAAE;MAC1BL,GAAG,CAACK,cAAc,GAAAG,MAAA,CAAAM,MAAA,CAAAN,MAAA,CAAAM,MAAA,KAAQd,GAAG,CAACK,cAAc,GAAKA,cAAc,CAAE;;IAGnE,OAAO5B,SAAS,CAACsC,KAAK,CAACf,GAAG,EAAEM,MAAM,CAAM;EAC1C;EAUA,KAAeU,MAAM,CAACC,WAAW,IAAC;IAChC,OAAO7B,QAAQ,CAAC6B,WAAW;EAC7B;EAEAC,YAAYC,IAAY,EAAE3B,OAAA,GAA4B,EAAE;IACtD,KAAK,EAAE;IAEP,IAAI,CAAC2B,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC3B,OAAO,GAAG,IAAI,CAAC4B,aAAa,CAAC5B,OAAO,CAAC;IAC1C,IAAI,CAAC6B,KAAK,GAAG,IAAI,CAAC7B,OAAO,CAAC6B,KAAK;IAC/B,IAAI,CAACC,IAAI,GAAG,IAAIrC,WAAW,CAAC,IAAI,CAAC;IACjC,IAAI,CAACsC,IAAI,GAAG,IAAIrC,WAAW,CACzB,IAAI,EACJ,IAAI,CAACM,OAAO,CAACW,OAAO,EACpB,IAAI,CAACX,OAAO,CAACU,SAAS,CACvB;IACD,IAAI,CAACsB,KAAK,GAAG,IAAI1C,KAAK,CAAC,IAAI,CAAC;IAE5B,IAAI,CAAC2C,YAAY,CAAC,IAAI,CAACC,eAAe,EAAE,CAAC;IACzC,IAAI,CAACC,KAAK,EAAE;IAEZ,IAAI,CAACC,IAAI,EAAE;EACb;EAEUA,IAAIA,CAAA,GAAI;EAERC,QAAQA,CAAA;IAChB,IAAI,CAACC,WAAW,EAAE;EACpB;EAEA,IAAWC,QAAQA,CAAA;IACjB,OAAO,IAAI,CAACvC,OAAO,CAACuC,QAAQ;EAC9B;EAEA,IAAcC,YAAYA,CAAA;IACxB,OAAO,IAAI,CAACxC,OAAO,CAACwC,YAAY;EAClC;EAEUC,cAAcA,CAAA;IACtB,OAAO,IAAI,CAACf,WAAuB;EACrC;EAEUE,aAAaA,CAAC5B,OAAyB;IAC/C,OAAO,IAAI,CAACyC,cAAc,EAAE,CAACxC,UAAU,CAACD,OAAO,CAAY;EAC7D;EAEU0C,mBAAmBA,CAAA;IAC3B,OAAO,IAAI,CAAC1C,OAAO,CAAC2C,YAAY,GAAG,GAAG,GAAG,KAAK;EAChD;EAEUC,iBAAiBA,CAAA,GAEjB;EAEAC,iBAAiBA,CAAA;IACzB,OAAO;MACL,cAAc,EAAE,IAAI,CAAClB,IAAI,CAACmB,EAAE;MAC5B,YAAY,EAAE,IAAI,CAACnB,IAAI,CAACoB;KACzB;EACH;EAEUC,qBAAqBA,CAAA;IAC7B,OAAO,IAAI,CAACC,eAAe,CAAC,MAAM,CAAC;EACrC;EAEUf,eAAeA,CAAA;IACvB,OAAO7C,IAAI,CAAC6D,aAAa,CACvB,IAAI,CAACR,mBAAmB,EAAE,EAC1B,IAAI,CAAC1C,OAAO,CAAC2C,YAAY,CAC1B;EACH;EAEUV,YAAYA,CAACkB,SAAkB;IACvC,IAAI,IAAI,CAACA,SAAS,KAAKA,SAAS,EAAE;MAChC,IAAI,CAACC,gBAAgB,EAAE;MACvB,IAAI,CAACD,SAAS,GAAGA,SAAS;MAE1B,IAAI,IAAI,CAACnD,OAAO,CAACY,MAAM,IAAI,IAAI,EAAE;QAC/B,IAAI,CAACyC,cAAc,CAAC,IAAI,CAACrD,OAAO,CAACY,MAAM,CAAC;;MAG1C,MAAM0C,KAAK,GAAG,IAAI,CAACT,iBAAiB,EAAE;MACtC,IAAIS,KAAK,IAAI,IAAI,EAAE;QACjB,IAAI,CAACC,QAAQ,CAACD,KAAK,EAAEH,SAAS,CAAC;;MAGjC,MAAMK,KAAK,GAAG,IAAI,CAACZ,iBAAiB,EAAE;MACtC,IAAIY,KAAK,IAAI,IAAI,EAAE;QACjB,IAAI,CAACC,QAAQ,CAACD,KAAK,EAAEL,SAAS,CAAC;;MAGjC,MAAMO,SAAS,GAAG,IAAI,CAACV,qBAAqB,EAAE;MAC9C,IAAIU,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACC,QAAQ,CAACD,SAAS,EAAEP,SAAS,CAAC;;;IAIvC,OAAO,IAAI;EACb;EAEAS,UAAUA,CAAA;IACR,OAAO,KAAK;EACd;EAEAC,UAAUA,CAAA;IACR,OAAO,KAAK;EACd;EAEAC,MAAMA,CAAA;IACJ,OAAO,IAAI;EACb;EAEA;EACAC,aAAaA,CAAChC,IAAY,EAAE/B,OAAA,GAAe,EAAE;IAC3C,OAAO,CAAC;EACV;EAEAgE,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACjC,IAAI,CAACiC,gBAAgB,EAAE;EACrC;EAEAC,OAAOA,CAACtD,OAA4B;IAClC,OAAO,IAAI,CAACoB,IAAI,CAACkC,OAAO,CAACtD,OAAO,CAAC;EACnC;EAEAuD,SAASA,CAACnC,IAAY,EAAEpB,OAA4B;IAClD,OAAO,IAAI,CAACoB,IAAI,CAACmC,SAAS,CAACnC,IAAI,EAAEpB,OAAO,CAAC;EAC3C;EAEAwD,YAAYA,CAACpC,IAAY,EAAEpB,OAA4B;IACrD,OAAO,IAAI,CAACoB,IAAI,CAACoC,YAAY,CAACpC,IAAI,EAAEpB,OAAO,CAAC;EAC9C;EAEAyD,YAAYA,CACVrC,IAAY,EACZsC,MAA0B,EAC1BC,MAAkB,EAClBC,wBAAqD;IAErD,IAAI,IAAI,CAACL,SAAS,CAACnC,IAAI,EAAEsC,MAAM,CAAC,EAAE;MAChCC,MAAM,EAAE;MACR,MAAME,YAAY,GAAG,CAACH,MAAM,CAAC;MAC7B,IAAIE,wBAAwB,EAAE;QAC5B,IAAI,OAAOA,wBAAwB,KAAK,QAAQ,EAAE;UAChDC,YAAY,CAACC,IAAI,CAACF,wBAAwB,CAAC;SAC5C,MAAM;UACLC,YAAY,CAACC,IAAI,CAAC,GAAGF,wBAAwB,CAAC;;;MAGlD,OAAO,IAAI,CAACJ,YAAY,CAACpC,IAAI,EAAEyC,YAAY,CAAC;;IAE9C,OAAOzC,IAAI;EACb;EAEUI,KAAKA,CAAA;IACb,IAAI,CAACR,IAAI,CAAC+C,EAAE,CAAC,SAAS,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACnD;EAEUA,aAAaA,CAAC;IAAE3E;EAAO,CAA6B;IAC5D,IAAI,CAAC4E,aAAa,CAAC5E,OAAO,CAAC;EAC7B;EAEU4E,aAAaA,CAAC5E,OAA2B;IACjD,IAAI+B,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC8C,cAAc,EAAE;IACrC,IAAI7E,OAAO,CAAC8E,OAAO,IAAI,CAAC/C,IAAI,EAAE;MAC5B;;IAGF,IAAI/B,OAAO,CAAC+E,KAAK,IAAI,IAAI,CAACb,SAAS,CAACnC,IAAI,EAAE,QAAQ,CAAC,EAAE;MACnDA,IAAI,IAAI,IAAI,CAACkC,OAAO,CAAC,QAAQ,CAAC,EAAC;;IAGjC;IACA,IAAIjE,OAAO,CAACgF,MAAM,EAAE;MAClBhF,OAAO,CAACiF,KAAK,GAAG,KAAK;;IAGvB,IAAI,IAAI,CAACpD,KAAK,IAAI,IAAI,EAAE;MACtB,IAAI,CAACA,KAAK,CAACqD,QAAQ,CAACC,iBAAiB,CAAC,IAAI,EAAEpD,IAAI,EAAE/B,OAAO,CAAC;;EAE9D;EAEAoF,eAAeA,CACbC,MAA+C,EAC/CC,QAAkB;IAElB,MAAMC,MAAM,GAAGhG,MAAM,CAAC6F,eAAe,CAACC,MAAM,CAAC;IAC7C,MAAMG,SAAS,GAAGD,MAAM,CAACC,SAAS;IAClC,MAAMhD,YAAY,GAAG,IAAI,CAACA,YAAY;IACtC,IAAI8C,QAAQ,IAAI9C,YAAY,EAAE;MAC5B,IAAIgD,SAAS,CAAChD,YAAY,CAAC,EAAE;QAC3B,MAAM,IAAIiD,KAAK,CAAC,uBAAuB,CAAC;;MAE1CD,SAAS,CAAChD,YAAY,CAAC,GAAG8C,QAAQ;;IAEpC,OAAOC,MAAM;EACf;EAEAG,GAAGA,CAACC,OAAkC;IACpC,IAAIC,WAAW,GAAG,IAAI,CAAC/D,KAAK,CAAC7B,OAAO,CAAC4F,WAAW;IAEhD,IAAI,OAAOA,WAAW,KAAK,UAAU,EAAE;MACrCA,WAAW,GAAGzG,WAAW,CAAC0G,IAAI,CAACD,WAAW,EAAE,IAAI,CAAC/D,KAAK,EAAE,IAAI,CAAC;;IAG/D,IAAI,OAAO+D,WAAW,KAAK,QAAQ,EAAE;MACnC,IAAIxE,GAAG,GAAGwE,WAAW,CAACD,OAAO,CAAC;MAC9B,IAAI,OAAOvE,GAAG,KAAK,UAAU,EAAE;QAC7BA,GAAG,GAAGjC,WAAW,CAAC0G,IAAI,CAACzE,GAAG,EAAE,IAAI,CAACS,KAAK,EAAE,IAAI,CAAC;;MAE/C,OAAOT,GAAG,KAAK,KAAK;;IAGtB,IAAI,OAAOwE,WAAW,KAAK,SAAS,EAAE;MACpC,OAAOA,WAAW;;IAGpB,OAAO,KAAK;EACd;EAEAE,UAAUA,CAAA;IACR,IAAI,CAAC9D,KAAK,CAAC+D,KAAK,EAAE;IAClB,OAAO,IAAI;EACb;EAEAC,QAAQA,CAACC,IAAa;IACpB,OAAO,IAAI,CAACjE,KAAK,CAACkE,GAAG,CAACD,IAAI,CAAC;EAC7B;EAEAE,gBAAgBA,CAACF,IAAa;IAC5B,OAAO,IAAI,CAACjE,KAAK,CAACoE,OAAO,CAACH,IAAI,CAAC;EACjC;EAEAI,kBAAkBA,CAACJ,IAAa;IAC9B,OAAO,IAAI,CAACjE,KAAK,CAACsE,SAAS,CAACL,IAAI,CAAC;EACnC;EAEAM,iBAAiBA,CAACN,IAAgB;IAChC,OAAO,IAAI,CAACjE,KAAK,CAACwE,QAAQ,CAACP,IAAI,CAAC;EAClC;EAEAQ,wBAAwBA,CAACR,IAAa;IACpC,OAAO,IAAI,CAACjE,KAAK,CAAC0E,eAAe,CAACT,IAAI,CAAC;EACzC;EAEAU,gBAAgBA,CAACV,IAAa;IAC5B,MAAMW,IAAI,GAAG,IAAI,CAACH,wBAAwB,CAACR,IAAI,CAAC;IAChD,MAAMY,MAAM,GAAG,IAAI,CAACR,kBAAkB,CAACJ,IAAI,CAAC;IAC5C,MAAMa,EAAE,GAAG,IAAI,CAACC,oBAAoB,EAAE;IACtC,MAAMC,EAAE,GAAG,IAAI,CAACC,uBAAuB,EAAE;IACzC,OAAOtH,IAAI,CAACuH,kBAAkB,CAACN,IAAI,EAAEI,EAAE,CAACG,QAAQ,CAACL,EAAE,CAAC,CAACK,QAAQ,CAACN,MAAM,CAAC,CAAC;EACxE;EAEAO,yBAAyBA,CAACnB,IAAgB;IACxC,MAAMW,IAAI,GAAG,IAAI,CAACH,wBAAwB,CAACR,IAAI,CAAC;IAChD,MAAMY,MAAM,GAAG,IAAI,CAACR,kBAAkB,CAACJ,IAAI,CAAC;IAC5C,MAAMe,EAAE,GAAG,IAAI,CAACC,uBAAuB,EAAE;IACzC,OAAOtH,IAAI,CAACuH,kBAAkB,CAACN,IAAI,EAAEI,EAAE,CAACG,QAAQ,CAACN,MAAM,CAAC,CAAC;EAC3D;EAEAQ,OAAOA,CAACrH,OAAA,GAAyC,EAAE;IACjD,IAAIsH,IAAI;IACR,IAAItH,OAAO,CAACuH,eAAe,EAAE;MAC3B,MAAM5F,IAAI,GAAG,IAAI,CAACA,IAAI;MACtB,MAAM6F,KAAK,GAAG7F,IAAI,CAAC8F,MAAM,EAAE,GAAG9F,IAAI,CAAC+F,QAAQ,EAAE,GAAG,CAAC;MACjDJ,IAAI,GAAG3F,IAAI,CAAC0F,OAAO,EAAE,CAACC,IAAI,CAACE,KAAK,CAAC;KAClC,MAAM;MACLF,IAAI,GAAG,IAAI,CAACX,gBAAgB,CAAC,IAAI,CAACxD,SAAS,CAAC;;IAG9C,OAAO,IAAI,CAACtB,KAAK,CAAC8F,KAAK,CAACC,gBAAgB,CAACN,IAAI,CAAC;EAChD;EAEAL,uBAAuBA,CAAA;IACrB,MAAMtF,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMkG,GAAG,GAAGlG,IAAI,CAAC8F,MAAM,EAAE,GAAG9F,IAAI,CAACmG,WAAW,EAAE,GAAG;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAE;IAC/D,OAAO9I,GAAG,CAAC+I,eAAe,EAAE,CAACC,SAAS,CAACL,GAAG,CAACE,CAAC,EAAEF,GAAG,CAACG,CAAC,CAAC;EACtD;EAEAjB,oBAAoBA,CAAA;IAClB,IAAIF,MAAM,GAAG3H,GAAG,CAAC+I,eAAe,EAAE;IAClC,MAAMtG,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAM6F,KAAK,GAAG7F,IAAI,CAAC8F,MAAM,EAAE,GAAG9F,IAAI,CAAC+F,QAAQ,EAAE,GAAG,CAAC;IACjD,IAAIF,KAAK,EAAE;MACT,MAAMF,IAAI,GAAG3F,IAAI,CAAC0F,OAAO,EAAE;MAC3B,MAAMc,EAAE,GAAGb,IAAI,CAACc,KAAK,GAAG,CAAC;MACzB,MAAMC,EAAE,GAAGf,IAAI,CAACgB,MAAM,GAAG,CAAC;MAC1BzB,MAAM,GAAGA,MAAM,CAACqB,SAAS,CAACC,EAAE,EAAEE,EAAE,CAAC,CAACE,MAAM,CAACf,KAAK,CAAC,CAACU,SAAS,CAAC,CAACC,EAAE,EAAE,CAACE,EAAE,CAAC;;IAErE,OAAOxB,MAAM;EACf;EAEA2B,UAAUA,CAACvC,IAAA,GAAgB,IAAI,CAAC9C,SAAS;IACvC,OAAO,IAAI,CAACsF,UAAU,CAAC,QAAQ,EAAExC,IAAI,CAAC;EACxC;EAEAyC,WAAWA,CACTC,QAAiB,EACjBrF,KAAqB,EACrBtD,OAAA,GAA8C,EAAE;IAEhD,IAAIA,OAAO,CAAC4I,QAAQ,IAAI,IAAI,EAAE;MAC5B5I,OAAO,CAAC4I,QAAQ,GAAG,IAAI7J,SAAS,EAAE;;IAGpC,IAAIiB,OAAO,CAACwF,SAAS,IAAI,IAAI,EAAE;MAC7BxF,OAAO,CAACwF,SAAS,GAAG,IAAI,CAACA,SAAS;;IAGpC,IAAI,CAAC1D,IAAI,CAAC+G,MAAM,CAACF,QAAQ,EAAErF,KAAK,EAAEtD,OAAoC,CAAC;EACzE;EAEA8I,aAAaA,CAACC,MAAuB;IACnC,OAAO,IAAI,CAACpH,IAAI,CAACqH,MAAM,EAAE,KAAKD,MAAM,IAAI,IAAI,IAAIA,MAAM,KAAK,IAAI,CAAC5F,SAAS,CAAC;EAC5E;EAEA;EAEU8F,gBAAgBA,CACxBhD,IAAqB,EACrBjG,OAAA,GAAqC,EAAE;IAEvC,MAAM+I,MAAM,GAAG9C,IAAI,IAAI,IAAI,CAAC9C,SAAS;IACrCnD,OAAO,CAACkJ,OAAO,GAAGH,MAAM,KAAK,IAAI,CAAC5F,SAAS;IAC3C,OAAO4F,MAAM;EACf;EAEAI,SAASA,CAAClD,IAAqB,EAAEjG,OAAA,GAAqC,EAAE;IACtE,MAAM+I,MAAM,GAAG,IAAI,CAACE,gBAAgB,CAAChD,IAAI,EAAEjG,OAAO,CAAC;IACnD,IAAI,CAACoJ,MAAM,CAAC,gBAAgB,EAAE;MAC5BL,MAAM;MACN/I,OAAO;MACPqJ,IAAI,EAAE,IAAI;MACV1H,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC;IACF,IAAI,IAAI,CAACkC,UAAU,EAAE,EAAE;MACrB,IAAI,CAACuF,MAAM,CAAC,gBAAgB,EAAE;QAC5BL,MAAM;QACN/I,OAAO;QACPqJ,IAAI,EAAE,IAAI;QACVC,IAAI,EAAE,IAAI,CAAC3H,IAAI;QACfA,IAAI,EAAE,IAAI,CAACA;OACZ,CAAC;KACH,MAAM,IAAI,IAAI,CAACiC,UAAU,EAAE,EAAE;MAC5B,IAAI,CAACwF,MAAM,CAAC,gBAAgB,EAAE;QAC5BL,MAAM;QACN/I,OAAO;QACPqJ,IAAI,EAAE,IAAI;QACVE,IAAI,EAAE,IAAI,CAAC5H,IAAI;QACfA,IAAI,EAAE,IAAI,CAACA;OACZ,CAAC;;IAEJ,OAAO,IAAI;EACb;EAEA6H,WAAWA,CAACvD,IAAqB,EAAEjG,OAAA,GAAqC,EAAE;IACxE,MAAM+I,MAAM,GAAG,IAAI,CAACE,gBAAgB,CAAChD,IAAI,EAAEjG,OAAO,CAAC;IACnD,IAAI,CAACoJ,MAAM,CAAC,kBAAkB,EAAE;MAC9BL,MAAM;MACN/I,OAAO;MACPqJ,IAAI,EAAE,IAAI;MACV1H,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC;IACF,IAAI,IAAI,CAACiC,UAAU,EAAE,EAAE;MACrB,IAAI,CAACwF,MAAM,CAAC,kBAAkB,EAAE;QAC9BL,MAAM;QACN/I,OAAO;QACPqJ,IAAI,EAAE,IAAI;QACVE,IAAI,EAAE,IAAI,CAAC5H,IAAI;QACfA,IAAI,EAAE,IAAI,CAACA;OACZ,CAAC;KACH,MAAM,IAAI,IAAI,CAACkC,UAAU,EAAE,EAAE;MAC5B,IAAI,CAACuF,MAAM,CAAC,kBAAkB,EAAE;QAC9BL,MAAM;QACN/I,OAAO;QACPqJ,IAAI,EAAE,IAAI;QACVC,IAAI,EAAE,IAAI,CAAC3H,IAAI;QACfA,IAAI,EAAE,IAAI,CAACA;OACZ,CAAC;;IAEJ,OAAO,IAAI;EACb;EAEA;EACA8H,iBAAiBA,CAACV,MAAe,EAAE/I,OAAkC,GAAG;EAExE;EAEA0J,eAAeA,CACbX,MAAe,EACfhB,CAAS,EACTC,CAAS,EACTsB,IAAU,EACVK,IAAuB;IAEvB,MAAMhI,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMiI,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAC,MAAM,EAAEd,MAAM,CAAC;IAC5C,MAAMe,QAAQ,GAAGf,MAAM,CAACgB,YAAY,CAAC,eAAe,CAAC;IACrD,MAAMC,QAAQ,GAA0B;MAAErI,IAAI,EAAEA,IAAI,CAACmB;IAAE,CAAE;IAEzD,IAAIgH,QAAQ,IAAI,IAAI,EAAE;MACpBE,QAAQ,CAACjB,MAAM,GAAGe,QAAQ;;IAG5B,IAAIF,MAAM,IAAI,IAAI,EAAE;MAClBI,QAAQ,CAACC,IAAI,GAAGL,MAAM;MACtB,IAAIjI,IAAI,CAAC8F,MAAM,EAAE,EAAE;QACjB,IAAI,CAAC9F,IAAI,CAACuI,OAAO,CAACN,MAAM,CAAC,IAAIE,QAAQ,IAAI,IAAI,EAAE;UAC7C;UACAE,QAAQ,CAACF,QAAQ,GAAG,IAAI,CAACK,WAAW,CAACpB,MAAM,CAAC;;;KAGjD,MAAM,IAAIe,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC3G,SAAS,KAAK4F,MAAM,EAAE;MACxDiB,QAAQ,CAACF,QAAQ,GAAG,IAAI,CAACK,WAAW,CAACpB,MAAM,CAAC;;IAG9C,OAAOiB,QAAQ;EACjB;EAEAI,yBAAyBA,CAACJ,QAA2B;IACnD,MAAMrI,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAM0I,IAAI,GAAG,IAAI,CAAClH,SAAS;IAC3B,MAAMyG,MAAM,GAAII,QAAkC,CAACC,IAAI;IACvD,IAAIH,QAAQ,GAAGE,QAAQ,CAACjB,MAAM;IAC9B,IAAIA,MAAM;IACV,IAAIa,MAAM,IAAI,IAAI,IAAIjI,IAAI,CAAC8F,MAAM,EAAE,IAAI9F,IAAI,CAACuI,OAAO,CAACN,MAAM,CAAC,EAAE;MAC3Db,MAAM,GAAI,IAAY,CAACuB,YAAY,CAACV,MAAM,EAAEE,QAAQ,CAAC,IAAIO,IAAI;KAC9D,MAAM;MACL,IAAI,CAACP,QAAQ,EAAE;QACbA,QAAQ,GAAGE,QAAQ,CAACF,QAAQ;;MAE9B,IAAI,CAACA,QAAQ,IAAIF,MAAM,IAAI,IAAI,EAAE;QAC/BE,QAAQ,GAAG,UAAUF,MAAM,IAAI;;MAEjCb,MAAM,GAAG,IAAI,CAACwB,OAAO,CAACT,QAAQ,EAAEO,IAAI,EAAE,IAAI,CAAC7E,SAAS,CAAC;;IAGvD,OAAOuD,MAAM;EACf;EAMAyB,QAAQA,CAACC,IAAa;IACpB,MAAMC,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,OAAO,KAAK;;IAGd,IAAID,IAAI,IAAI,IAAI,EAAE;MAChB,OAAO,IAAI;;IAGb,OAAOC,KAAK,CAACD,IAAI,KAAKA,IAAI;EAC5B;EAIAE,QAAQA,CAAC5K,MAA4C;IACnD,IAAI,CAACuC,WAAW,EAAE;IAClB,IAAIvC,MAAM,EAAE;MACV,IAAI,CAAC,IAAI,CAAC2F,GAAG,CAAC,cAAc,CAAC,EAAE;QAC7B,OAAO,IAAI;;MAEb,MAAMgF,KAAK,GAAGlL,SAAS,CAACoL,WAAW,CAAC7K,MAAM,CAAC,GACvCA,MAAM,GACN,IAAIP,SAAS,CAACO,MAAM,CAAC;MACzB,IAAI,CAAC2K,KAAK,GAAGA,KAAK;MAClBA,KAAK,CAAC3K,MAAM,CAAC;QAAEsJ,IAAI,EAAE;MAAI,CAAE,CAAC;MAC5BqB,KAAK,CAACG,KAAK,EAAE;;IAEf,OAAO,IAAI;EACb;EAEAC,WAAWA,CAAC9K,OAAA,GAAmC,EAAE;IAC/C,IAAI,IAAI,CAAC0K,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAAC7B,MAAM,CAAC7I,OAAO,CAAC;;IAE5B,OAAO,IAAI;EACb;EAEAsC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACoI,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACK,MAAM,EAAE;MACnB,IAAI,CAACL,KAAK,GAAG,IAAI;;IAEnB,OAAO,IAAI;EACb;EAEAM,SAASA,CAAA;IACP,IAAI,IAAI,CAACN,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACO,IAAI,EAAE;;IAEnB,OAAO,IAAI;EACb;EAEAC,SAASA,CAAA;IACP,IAAI,IAAI,CAACR,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACS,IAAI,EAAE;;IAEnB,OAAO,IAAI;EACb;EAEUC,WAAWA,CAAA;IACnB,MAAMV,KAAK,GAAG,IAAI,CAAC/I,IAAI,CAAC0J,QAAQ,EAAE;IAClC,IAAI,CAACV,QAAQ,CAACD,KAA0B,CAAC;IACzC,OAAO,IAAI;EACb;EAWAtB,MAAMA,CACJqB,IAAS,EACTa,IAA6B;IAE7B,IAAI,CAACC,OAAO,CAACd,IAAI,EAAEa,IAAI,CAAC;IACxB,IAAI,CAACzJ,KAAK,CAAC0J,OAAO,CAACd,IAAI,EAAEa,IAAI,CAAC;IAC9B,OAAO,IAAI;EACb;EAQUE,YAAYA,CAAIC,CAAI,EAAE1D,CAAU,EAAEC,CAAU;IACpD,MAAMqB,IAAI,GAAG,IAAI,EAAC;IAClB,MAAM1H,IAAI,GAAG0H,IAAI,CAAC1H,IAAI;IACtB,IAAIoG,CAAC,IAAI,IAAI,IAAIC,CAAC,IAAI,IAAI,EAAE;MAC1B,OAAO;QAAEyD,CAAC;QAAEpC,IAAI;QAAE1H;MAAI,CAAgC;;IAExD,OAAO;MAAE8J,CAAC;MAAE1D,CAAC;MAAEC,CAAC;MAAEqB,IAAI;MAAE1H;IAAI,CAAwC;EACtE;EAEA+J,OAAOA,CAACD,CAAiB,EAAE1D,CAAS,EAAEC,CAAS;IAC7C,IAAI,CAACoB,MAAM,CAAC,YAAY,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,CAAC;EACvD;EAEA2D,UAAUA,CAACF,CAAuB,EAAE1D,CAAS,EAAEC,CAAS;IACtD,IAAI,CAACoB,MAAM,CAAC,eAAe,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,CAAC;EAC1D;EAEA4D,aAAaA,CAACH,CAAuB,EAAE1D,CAAS,EAAEC,CAAS;IACzD,IAAI,CAACoB,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,CAAC;EAC7D;EAIA6D,WAAWA,CAACJ,CAAqB,EAAE1D,CAAS,EAAEC,CAAS;IACrD,IAAI,IAAI,CAACrG,IAAI,CAACmK,KAAK,EAAE;MACnB,IAAI,CAACC,wBAAwB,GAAG,IAAI,CAACpK,IAAI,CAACmK,KAAK;MAC/C,IAAI,CAACC,wBAAwB,CAACC,UAAU,CAAC,OAAO,CAAC;;IAGnD,IAAI,CAAC5C,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,CAAC;EAC3D;EAEAiE,SAASA,CAACR,CAAmB,EAAE1D,CAAS,EAAEC,CAAS;IACjD,IAAI,CAACoB,MAAM,CAAC,cAAc,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,CAAC;IAEvD,IAAI,IAAI,CAAC+D,wBAAwB,EAAE;MACjC,IAAI,CAACA,wBAAwB,CAACG,SAAS,CAAC,OAAO,EAAE;QAAEvK,IAAI,EAAE,IAAI,CAACA;MAAI,CAAE,CAAC;MACrE,IAAI,CAACoK,wBAAwB,GAAG,IAAI;;EAExC;EAEAI,WAAWA,CAACV,CAAqB,EAAE1D,CAAS,EAAEC,CAAS;IACrD,IAAI,CAACoB,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,CAAC;EAC3D;EAEAoE,WAAWA,CAACX,CAAqB;IAC/B,IAAI,CAACrC,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,CAAC,CAAC;EACrD;EAEAY,UAAUA,CAACZ,CAAoB;IAC7B,IAAI,CAACrC,MAAM,CAAC,eAAe,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,CAAC,CAAC;EACpD;EAEAa,YAAYA,CAACb,CAAsB;IACjC,IAAI,CAACrC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,CAAC,CAAC;EACtD;EAEAc,YAAYA,CAACd,CAAsB;IACjC,IAAI,CAACrC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAACoC,YAAY,CAACC,CAAC,CAAC,CAAC;EACtD;EAEAe,YAAYA,CAACf,CAAkB,EAAE1D,CAAS,EAAEC,CAAS,EAAEyE,KAAa;IAClE,IAAI,CAACrD,MAAM,CAAC,iBAAiB,EAAApI,MAAA,CAAAM,MAAA;MAC3BmL;IAAK,GACF,IAAI,CAACjB,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,EAC7B;EACJ;EAEA0E,aAAaA,CAACjB,CAAqB,EAAEhB,IAAY,EAAE1C,CAAS,EAAEC,CAAS;IACrE,IAAI,CAACoB,MAAM,CAAC,kBAAkB,EAAApI,MAAA,CAAAM,MAAA;MAAImJ;IAAI,GAAK,IAAI,CAACe,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,EAAG;IACxE,IAAI,CAACoB,MAAM,CAACqB,IAAI,EAAAzJ,MAAA,CAAAM,MAAA,KAAO,IAAI,CAACkK,YAAY,CAACC,CAAC,EAAE1D,CAAC,EAAEC,CAAC,CAAC,EAAG;EACtD;EAEA2E,iBAAiBA,CACflB,CAAqB,EACrB1C,MAAe,EACfhB,CAAS,EACTC,CAAS,GACR;EAEH4E,gBAAgBA,CACdnB,CAAuB,EACvB1C,MAAe,EACfhB,CAAS,EACTC,CAAS,GACR;EAEH6E,mBAAmBA,CACjBpB,CAAuB,EACvB1C,MAAe,EACfhB,CAAS,EACTC,CAAS,GACR;EAEH8E,gBAAgBA,CAACrB,CAAqB,EAAE1D,CAAS,EAAEC,CAAS,GAAG;EAE/D+E,eAAeA,CAACtB,CAAkB;IAChC,MAAMuB,MAAM,GAAG,IAAI,CAACC,cAAc,CAACxB,CAAC,EAAE;MAAEyB,SAAS,EAAE;IAAI,CAAE,CAAC;IAC1D,MAAM7D,IAAI,GAAG,IAAI,CAACxH,KAAK,CAACsL,cAAc,CAACH,MAAM,CAAC;IAC9C,IAAI3D,IAAI,KAAK,IAAI,EAAE;MACjB;;IAGF;IACA,IAAI,CAACkD,YAAY,CAACd,CAAwB,CAAC;IAC3C,IAAI,CAACpC,IAAI,EAAE;MACT;;IAGF;IACAA,IAAI,CAACiD,YAAY,CAACb,CAAwB,CAAC;EAC7C;EAGA2B,OAAOA,CAAA;IACL,IAAI,CAACzL,IAAI,CAAC0L,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC1I,aAAa,EAAE,IAAI,CAAC;EACpD;;AA9sBiB/E,QAAA,CAAAE,QAAQ,GAA8B;EACrD6C,YAAY,EAAE,IAAI;EAClBH,YAAY,EAAE,MAAM;EACpBD,QAAQ,EAAE,CAAC;EACX7B,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE;CACV;AAssBD2M,UAAA,EADC1N,QAAQ,CAACwN,OAAO,EAAE,C,sCAGlB;AAyGH,WAAiBxN,QAAQ;EACVA,QAAA,CAAA2N,IAAI,GAAG7N,WAAW;EAClBE,QAAA,CAAA4N,IAAI,GAAG/N,WAAW;AACjC,CAAC,EAHgBG,QAAQ,KAARA,QAAQ;AAKzB,WAAiBA,QAAQ;EACVA,QAAA,CAAA6B,WAAW,GAAG,MAAM7B,QAAQ,CAAC6K,IAAI,EAAE;EAEhD,SAAgBgD,UAAUA,CAACC,QAAa;IACtC,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpB,OAAO,KAAK;;IAGd,IAAIA,QAAQ,YAAY9N,QAAQ,EAAE;MAChC,OAAO,IAAI;;IAGb,MAAM+N,GAAG,GAAGD,QAAQ,CAAClM,MAAM,CAACC,WAAW,CAAC;IACxC,MAAM4H,IAAI,GAAGqE,QAAoB;IAEjC,IACE,CAACC,GAAG,IAAI,IAAI,IAAIA,GAAG,KAAK/N,QAAA,CAAA6B,WAAW,KACnC,OAAO4H,IAAI,CAACzF,UAAU,KAAK,UAAU,IACrC,OAAOyF,IAAI,CAACxF,UAAU,KAAK,UAAU,IACrC,OAAOwF,IAAI,CAACtF,aAAa,KAAK,UAAU,EACxC;MACA,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;EAtBgBnE,QAAA,CAAA6N,UAAU,GAAAA,UAsBzB;AACH,CAAC,EA1BgB7N,QAAQ,KAARA,QAAQ;AA4BzB;AACA;AACA,WAAiBA,QAAQ;EACvB,SAAgB2C,QAAQA,CAACqL,KAAa;IACpC,OAAO,UAAUC,IAAgB;MAC/BA,IAAI,CAAC9N,MAAM,CAAC;QAAEwC,QAAQ,EAAEqL;MAAK,CAAE,CAAC;IAClC,CAAC;EACH;EAJgBhO,QAAA,CAAA2C,QAAQ,GAAAA,QAIvB;EAED,SAAgB7B,SAASA,CAACC,OAA4B;IACpD,OAAO,UAAUkN,IAAgB;MAC/BA,IAAI,CAAC9N,MAAM,CAAC;QAAEW,SAAS,EAAEC;MAAO,CAAE,CAAC;IACrC,CAAC;EACH;EAJgBf,QAAA,CAAAc,SAAS,GAAAA,SAIxB;AACH,CAAC,EAZgBd,QAAQ,KAARA,QAAQ;AAczB,WAAiBA,QAAQ;EAaVA,QAAA,CAAAkO,QAAQ,GAAG1O,QAAQ,CAAC2O,MAAM,CAAa;IAClDpE,IAAI,EAAE;GACP,CAAC;AACJ,CAAC,EAhBgB/J,QAAQ,KAARA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}