{"ast":null,"code":"const hyphenPattern = /-(.)/g;\nfunction camelize(str) {\n  return str.replace(hyphenPattern, (_, char) => char.toUpperCase());\n}\nconst memoized = {};\nconst prefixes = ['webkit', 'ms', 'moz', 'o'];\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : {};\nfunction getWithPrefix(name) {\n  for (let i = 0; i < prefixes.length; i += 1) {\n    const prefixedName = prefixes[i] + name;\n    if (prefixedName in testStyle) {\n      return prefixedName;\n    }\n  }\n  return null;\n}\nexport function getVendorPrefixedName(property) {\n  const name = camelize(property);\n  if (memoized[name] == null) {\n    const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n  }\n  return memoized[name];\n}","map":{"version":3,"names":["hyphenPattern","camelize","str","replace","_","char","toUpperCase","memoized","prefixes","testStyle","document","createElement","style","getWithPrefix","name","i","length","prefixedName","getVendorPrefixedName","property","capitalizedName","charAt","slice"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-common@2.0.17/node_modules/@antv/x6-common/src/dom/prefix.ts"],"sourcesContent":["const hyphenPattern = /-(.)/g\nfunction camelize(str: string) {\n  return str.replace(hyphenPattern, (_, char) => char.toUpperCase())\n}\n\nconst memoized: { [key: string]: string | null } = {}\nconst prefixes = ['webkit', 'ms', 'moz', 'o']\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : {}\n\nfunction getWithPrefix(name: string) {\n  for (let i = 0; i < prefixes.length; i += 1) {\n    const prefixedName = prefixes[i] + name\n    if (prefixedName in testStyle) {\n      return prefixedName\n    }\n  }\n  return null\n}\n\nexport function getVendorPrefixedName(property: string) {\n  const name = camelize(property)\n  if (memoized[name] == null) {\n    const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1)\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName)\n  }\n\n  return memoized[name]\n}\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,OAAO;AAC7B,SAASC,QAAQA,CAACC,GAAW;EAC3B,OAAOA,GAAG,CAACC,OAAO,CAACH,aAAa,EAAE,CAACI,CAAC,EAAEC,IAAI,KAAKA,IAAI,CAACC,WAAW,EAAE,CAAC;AACpE;AAEA,MAAMC,QAAQ,GAAqC,EAAE;AACrD,MAAMC,QAAQ,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;AAC7C,MAAMC,SAAS,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAGA,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAACC,KAAK,GAAG,EAAE;AAE5F,SAASC,aAAaA,CAACC,IAAY;EACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,QAAQ,CAACQ,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC3C,MAAME,YAAY,GAAGT,QAAQ,CAACO,CAAC,CAAC,GAAGD,IAAI;IACvC,IAAIG,YAAY,IAAIR,SAAS,EAAE;MAC7B,OAAOQ,YAAY;;;EAGvB,OAAO,IAAI;AACb;AAEA,OAAM,SAAUC,qBAAqBA,CAACC,QAAgB;EACpD,MAAML,IAAI,GAAGb,QAAQ,CAACkB,QAAQ,CAAC;EAC/B,IAAIZ,QAAQ,CAACO,IAAI,CAAC,IAAI,IAAI,EAAE;IAC1B,MAAMM,eAAe,GAAGN,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,CAACf,WAAW,EAAE,GAAGQ,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC;IACpEf,QAAQ,CAACO,IAAI,CAAC,GAAGA,IAAI,IAAIL,SAAS,GAAGK,IAAI,GAAGD,aAAa,CAACO,eAAe,CAAC;;EAG5E,OAAOb,QAAQ,CAACO,IAAI,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}