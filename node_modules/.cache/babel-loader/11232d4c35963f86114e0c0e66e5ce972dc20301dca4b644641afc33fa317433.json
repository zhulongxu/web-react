{"ast":null,"code":"import { ObjectExt, Timing, Interp } from '@antv/x6-common';\nexport class Animation {\n  constructor(cell) {\n    this.cell = cell;\n    this.ids = {};\n    this.cache = {};\n  }\n  get() {\n    return Object.keys(this.ids);\n  }\n  start(path, targetValue, options = {}, delim = '/') {\n    const startValue = this.cell.getPropByPath(path);\n    const localOptions = ObjectExt.defaults(options, Animation.defaultOptions);\n    const timing = this.getTiming(localOptions.timing);\n    const interpolate = this.getInterp(localOptions.interp, startValue, targetValue);\n    let startTime = 0;\n    const key = Array.isArray(path) ? path.join(delim) : path;\n    const paths = Array.isArray(path) ? path : path.split(delim);\n    const iterate = () => {\n      const now = new Date().getTime();\n      if (startTime === 0) {\n        startTime = now;\n      }\n      const elaspe = now - startTime;\n      let progress = elaspe / localOptions.duration;\n      if (progress < 1) {\n        this.ids[key] = requestAnimationFrame(iterate);\n      } else {\n        progress = 1;\n      }\n      const currentValue = interpolate(timing(progress));\n      this.cell.setPropByPath(paths, currentValue);\n      if (options.progress) {\n        options.progress(Object.assign({\n          progress,\n          currentValue\n        }, this.getArgs(key)));\n      }\n      if (progress === 1) {\n        this.cell.notify('transition:complete', this.getArgs(key));\n        options.complete && options.complete(this.getArgs(key));\n        this.cell.notify('transition:finish', this.getArgs(key));\n        options.finish && options.finish(this.getArgs(key));\n        this.clean(key);\n      }\n    };\n    setTimeout(() => {\n      this.stop(path, undefined, delim);\n      this.cache[key] = {\n        startValue,\n        targetValue,\n        options: localOptions\n      };\n      this.ids[key] = requestAnimationFrame(iterate);\n      this.cell.notify('transition:start', this.getArgs(key));\n      options.start && options.start(this.getArgs(key));\n    }, options.delay);\n    return this.stop.bind(this, path, delim, options);\n  }\n  stop(path, options = {}, delim = '/') {\n    const paths = Array.isArray(path) ? path : path.split(delim);\n    Object.keys(this.ids).filter(key => ObjectExt.isEqual(paths, key.split(delim).slice(0, paths.length))).forEach(key => {\n      cancelAnimationFrame(this.ids[key]);\n      const data = this.cache[key];\n      const commonArgs = this.getArgs(key);\n      const localOptions = Object.assign(Object.assign({}, data.options), options);\n      const jumpedToEnd = localOptions.jumpedToEnd;\n      if (jumpedToEnd && data.targetValue != null) {\n        this.cell.setPropByPath(key, data.targetValue);\n        this.cell.notify('transition:end', Object.assign({}, commonArgs));\n        this.cell.notify('transition:complete', Object.assign({}, commonArgs));\n        localOptions.complete && localOptions.complete(Object.assign({}, commonArgs));\n      }\n      const stopArgs = Object.assign({\n        jumpedToEnd\n      }, commonArgs);\n      this.cell.notify('transition:stop', Object.assign({}, stopArgs));\n      localOptions.stop && localOptions.stop(Object.assign({}, stopArgs));\n      this.cell.notify('transition:finish', Object.assign({}, commonArgs));\n      localOptions.finish && localOptions.finish(Object.assign({}, commonArgs));\n      this.clean(key);\n    });\n    return this;\n  }\n  clean(key) {\n    delete this.ids[key];\n    delete this.cache[key];\n  }\n  getTiming(timing) {\n    return typeof timing === 'string' ? Timing[timing] : timing;\n  }\n  getInterp(interp, startValue, targetValue) {\n    if (interp) {\n      return interp(startValue, targetValue);\n    }\n    if (typeof targetValue === 'number') {\n      return Interp.number(startValue, targetValue);\n    }\n    if (typeof targetValue === 'string') {\n      if (targetValue[0] === '#') {\n        return Interp.color(startValue, targetValue);\n      }\n      return Interp.unit(startValue, targetValue);\n    }\n    return Interp.object(startValue, targetValue);\n  }\n  getArgs(key) {\n    const data = this.cache[key];\n    return {\n      path: key,\n      startValue: data.startValue,\n      targetValue: data.targetValue,\n      cell: this.cell\n    };\n  }\n}\n(function (Animation) {\n  Animation.defaultOptions = {\n    delay: 10,\n    duration: 100,\n    timing: 'linear'\n  };\n})(Animation || (Animation = {}));","map":{"version":3,"names":["ObjectExt","Timing","Interp","Animation","constructor","cell","ids","cache","get","Object","keys","start","path","targetValue","options","delim","startValue","getPropByPath","localOptions","defaults","defaultOptions","timing","getTiming","interpolate","getInterp","interp","startTime","key","Array","isArray","join","paths","split","iterate","now","Date","getTime","elaspe","progress","duration","requestAnimationFrame","currentValue","setPropByPath","assign","getArgs","notify","complete","finish","clean","setTimeout","stop","undefined","delay","bind","filter","isEqual","slice","length","forEach","cancelAnimationFrame","data","commonArgs","jumpedToEnd","stopArgs","number","color","unit","object"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/model/animation.ts"],"sourcesContent":["import { ObjectExt, KeyValue, Timing, Interp } from '@antv/x6-common'\nimport { Cell } from './cell'\n\nexport class Animation {\n  protected readonly ids: { [path: string]: number } = {}\n  protected readonly cache: {\n    [path: string]: {\n      startValue: any\n      targetValue: any\n      options: Animation.StartOptions<any>\n    }\n  } = {}\n\n  constructor(protected readonly cell: Cell) {}\n\n  get() {\n    return Object.keys(this.ids)\n  }\n\n  start<T extends Animation.TargetValue>(\n    path: string | string[],\n    targetValue: T,\n    options: Animation.StartOptions<T> = {},\n    delim = '/',\n  ): () => void {\n    const startValue = this.cell.getPropByPath<T>(path)\n    const localOptions = ObjectExt.defaults(options, Animation.defaultOptions)\n    const timing = this.getTiming(localOptions.timing)\n    const interpolate = this.getInterp<T>(\n      localOptions.interp,\n      startValue,\n      targetValue,\n    )\n\n    let startTime = 0\n    const key = Array.isArray(path) ? path.join(delim) : path\n    const paths = Array.isArray(path) ? path : path.split(delim)\n    const iterate = () => {\n      const now = new Date().getTime()\n      if (startTime === 0) {\n        startTime = now\n      }\n\n      const elaspe = now - startTime\n      let progress = elaspe / localOptions.duration\n      if (progress < 1) {\n        this.ids[key] = requestAnimationFrame(iterate)\n      } else {\n        progress = 1\n      }\n\n      const currentValue = interpolate(timing(progress)) as T\n      this.cell.setPropByPath(paths, currentValue)\n\n      if (options.progress) {\n        options.progress({ progress, currentValue, ...this.getArgs<T>(key) })\n      }\n\n      if (progress === 1) {\n        this.cell.notify('transition:complete', this.getArgs<T>(key))\n        options.complete && options.complete(this.getArgs<T>(key))\n\n        this.cell.notify('transition:finish', this.getArgs<T>(key))\n        options.finish && options.finish(this.getArgs<T>(key))\n        this.clean(key)\n      }\n    }\n\n    setTimeout(() => {\n      this.stop(path, undefined, delim)\n      this.cache[key] = { startValue, targetValue, options: localOptions }\n      this.ids[key] = requestAnimationFrame(iterate)\n\n      this.cell.notify('transition:start', this.getArgs<T>(key))\n      options.start && options.start(this.getArgs<T>(key))\n    }, options.delay)\n\n    return this.stop.bind(this, path, delim, options)\n  }\n\n  stop<T extends Animation.TargetValue>(\n    path: string | string[],\n    options: Animation.StopOptions<T> = {},\n    delim = '/',\n  ) {\n    const paths = Array.isArray(path) ? path : path.split(delim)\n    Object.keys(this.ids)\n      .filter((key) =>\n        ObjectExt.isEqual(paths, key.split(delim).slice(0, paths.length)),\n      )\n      .forEach((key) => {\n        cancelAnimationFrame(this.ids[key])\n        const data = this.cache[key]\n        const commonArgs = this.getArgs<T>(key)\n        const localOptions = { ...data.options, ...options }\n        const jumpedToEnd = localOptions.jumpedToEnd\n        if (jumpedToEnd && data.targetValue != null) {\n          this.cell.setPropByPath(key, data.targetValue)\n\n          this.cell.notify('transition:end', { ...commonArgs })\n          this.cell.notify('transition:complete', { ...commonArgs })\n          localOptions.complete && localOptions.complete({ ...commonArgs })\n        }\n\n        const stopArgs = { jumpedToEnd, ...commonArgs }\n        this.cell.notify('transition:stop', { ...stopArgs })\n        localOptions.stop && localOptions.stop({ ...stopArgs })\n\n        this.cell.notify('transition:finish', { ...commonArgs })\n        localOptions.finish && localOptions.finish({ ...commonArgs })\n\n        this.clean(key)\n      })\n\n    return this\n  }\n\n  private clean(key: string) {\n    delete this.ids[key]\n    delete this.cache[key]\n  }\n\n  private getTiming(timing: Timing.Names | Timing.Definition) {\n    return typeof timing === 'string' ? Timing[timing] : timing\n  }\n\n  private getInterp<T extends Animation.TargetValue>(\n    interp: Interp.Definition<any> | undefined,\n    startValue: T,\n    targetValue: T,\n  ) {\n    if (interp) {\n      return interp(startValue, targetValue)\n    }\n\n    if (typeof targetValue === 'number') {\n      return Interp.number(startValue as number, targetValue)\n    }\n\n    if (typeof targetValue === 'string') {\n      if (targetValue[0] === '#') {\n        return Interp.color(startValue as string, targetValue)\n      }\n\n      return Interp.unit(startValue as string, targetValue)\n    }\n\n    return Interp.object(\n      startValue as KeyValue<number>,\n      targetValue as KeyValue<number>,\n    )\n  }\n\n  private getArgs<T extends Animation.TargetValue>(\n    key: string,\n  ): Animation.CallbackArgs<T> {\n    const data = this.cache[key]\n    return {\n      path: key,\n      startValue: data.startValue,\n      targetValue: data.targetValue,\n      cell: this.cell,\n    }\n  }\n}\n\nexport namespace Animation {\n  export interface BaseOptions {\n    delay: number\n    duration: number\n    timing: Timing.Names | Timing.Definition\n  }\n\n  export type TargetValue = string | number | KeyValue<number>\n\n  export interface CallbackArgs<T> {\n    cell: Cell\n    path: string\n    startValue: T\n    targetValue: T\n  }\n\n  export interface ProgressArgs<T> extends CallbackArgs<T> {\n    progress: number\n    currentValue: T\n  }\n\n  export interface StopArgs<T> extends CallbackArgs<T> {\n    jumpedToEnd?: boolean\n  }\n\n  export interface StartOptions<T>\n    extends Partial<BaseOptions>,\n      StopOptions<T> {\n    interp?: Interp.Definition<any>\n    /**\n     * A function to call when the animation begins.\n     */\n    start?: (options: CallbackArgs<T>) => void\n    /**\n     * A function to be called after each step of the animation, only once per\n     * animated element regardless of the number of animated properties.\n     */\n    progress?: (options: ProgressArgs<T>) => void\n  }\n\n  export interface StopOptions<T> {\n    /**\n     * A Boolean indicating whether to complete the animation immediately.\n     * Defaults to `false`.\n     */\n    jumpedToEnd?: boolean\n    /**\n     * A function that is called once the animation completes.\n     */\n    complete?: (options: CallbackArgs<T>) => void\n    /**\n     * A function to be called when the animation stops.\n     */\n    stop?: (options: StopArgs<T>) => void\n    /**\n     * A function to be called when the animation completes or stops.\n     */\n    finish?: (options: CallbackArgs<T>) => void\n  }\n\n  export const defaultOptions: BaseOptions = {\n    delay: 10,\n    duration: 100,\n    timing: 'linear',\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}