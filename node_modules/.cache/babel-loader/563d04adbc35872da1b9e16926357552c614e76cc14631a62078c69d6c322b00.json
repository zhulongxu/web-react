{"ast":null,"code":"import { NumberExt } from '@antv/x6-common';\nimport { Point } from '@antv/x6-geometry';\n// eslint-disable-next-line\nexport function resolve(fn) {\n  return function (view, magnet, ref, options) {\n    if (ref instanceof Element) {\n      const refView = this.graph.findViewByElem(ref);\n      let refPoint;\n      if (refView) {\n        if (refView.isEdgeElement(ref)) {\n          const distance = options.fixedAt != null ? options.fixedAt : '50%';\n          refPoint = getPointAtEdge(refView, distance);\n        } else {\n          refPoint = refView.getBBoxOfElement(ref).getCenter();\n        }\n      } else {\n        refPoint = new Point();\n      }\n      return fn.call(this, view, magnet, refPoint, options);\n    }\n    return fn.apply(this, arguments); // eslint-disable-line\n  };\n}\nexport function getPointAtEdge(edgeView, value) {\n  const isPercentage = NumberExt.isPercentage(value);\n  const num = typeof value === 'string' ? parseFloat(value) : value;\n  if (isPercentage) {\n    return edgeView.getPointAtRatio(num / 100);\n  }\n  return edgeView.getPointAtLength(num);\n}","map":{"version":3,"names":["NumberExt","Point","resolve","fn","view","magnet","ref","options","Element","refView","graph","findViewByElem","refPoint","isEdgeElement","distance","fixedAt","getPointAtEdge","getBBoxOfElement","getCenter","call","apply","arguments","edgeView","value","isPercentage","num","parseFloat","getPointAtRatio","getPointAtLength"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/node-anchor/util.ts"],"sourcesContent":["import { NumberExt } from '@antv/x6-common'\nimport { Point } from '@antv/x6-geometry'\nimport { EdgeView } from '../../view'\n\nexport interface ResolveOptions {\n  fixedAt?: number | string\n}\n\n// eslint-disable-next-line\nexport function resolve<S extends Function, T>(fn: S): T {\n  return function (\n    this: EdgeView,\n    view: EdgeView,\n    magnet: SVGElement,\n    ref: any,\n    options: ResolveOptions,\n  ) {\n    if (ref instanceof Element) {\n      const refView = this.graph.findViewByElem(ref)\n      let refPoint\n      if (refView) {\n        if (refView.isEdgeElement(ref)) {\n          const distance = options.fixedAt != null ? options.fixedAt : '50%'\n          refPoint = getPointAtEdge(refView as EdgeView, distance)\n        } else {\n          refPoint = refView.getBBoxOfElement(ref).getCenter()\n        }\n      } else {\n        refPoint = new Point()\n      }\n      return fn.call(this, view, magnet, refPoint, options)\n    }\n    return fn.apply(this, arguments) // eslint-disable-line\n  } as any as T\n}\n\nexport function getPointAtEdge(edgeView: EdgeView, value: string | number) {\n  const isPercentage = NumberExt.isPercentage(value)\n  const num = typeof value === 'string' ? parseFloat(value) : value\n  if (isPercentage) {\n    return edgeView.getPointAtRatio(num / 100)\n  }\n  return edgeView.getPointAtLength(num)\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,KAAK,QAAQ,mBAAmB;AAOzC;AACA,OAAM,SAAUC,OAAOA,CAAwBC,EAAK;EAClD,OAAO,UAELC,IAAc,EACdC,MAAkB,EAClBC,GAAQ,EACRC,OAAuB;IAEvB,IAAID,GAAG,YAAYE,OAAO,EAAE;MAC1B,MAAMC,OAAO,GAAG,IAAI,CAACC,KAAK,CAACC,cAAc,CAACL,GAAG,CAAC;MAC9C,IAAIM,QAAQ;MACZ,IAAIH,OAAO,EAAE;QACX,IAAIA,OAAO,CAACI,aAAa,CAACP,GAAG,CAAC,EAAE;UAC9B,MAAMQ,QAAQ,GAAGP,OAAO,CAACQ,OAAO,IAAI,IAAI,GAAGR,OAAO,CAACQ,OAAO,GAAG,KAAK;UAClEH,QAAQ,GAAGI,cAAc,CAACP,OAAmB,EAAEK,QAAQ,CAAC;SACzD,MAAM;UACLF,QAAQ,GAAGH,OAAO,CAACQ,gBAAgB,CAACX,GAAG,CAAC,CAACY,SAAS,EAAE;;OAEvD,MAAM;QACLN,QAAQ,GAAG,IAAIX,KAAK,EAAE;;MAExB,OAAOE,EAAE,CAACgB,IAAI,CAAC,IAAI,EAAEf,IAAI,EAAEC,MAAM,EAAEO,QAAQ,EAAEL,OAAO,CAAC;;IAEvD,OAAOJ,EAAE,CAACiB,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,EAAC;EACnC,CAAa;AACf;AAEA,OAAM,SAAUL,cAAcA,CAACM,QAAkB,EAAEC,KAAsB;EACvE,MAAMC,YAAY,GAAGxB,SAAS,CAACwB,YAAY,CAACD,KAAK,CAAC;EAClD,MAAME,GAAG,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAGG,UAAU,CAACH,KAAK,CAAC,GAAGA,KAAK;EACjE,IAAIC,YAAY,EAAE;IAChB,OAAOF,QAAQ,CAACK,eAAe,CAACF,GAAG,GAAG,GAAG,CAAC;;EAE5C,OAAOH,QAAQ,CAACM,gBAAgB,CAACH,GAAG,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}