{"ast":null,"code":"/* eslint-disable default-param-last */\nimport { Point } from '../point';\nconst regexSupportedData = new RegExp(`^[\\\\s\\\\dLMCZz,.]*$`); // eslint-disable-line prefer-regex-literals\nexport function isValid(data) {\n  if (typeof data !== 'string') {\n    return false;\n  }\n  return regexSupportedData.test(data);\n}\n/**\n * Returns the remainder of division of `n` by `m`. You should use this\n * instead of the built-in operation as the built-in operation does not\n * properly handle negative numbers.\n */\nfunction mod(n, m) {\n  return (n % m + m) % m;\n}\nfunction draw(points, round, initialMove, close, exclude) {\n  const data = [];\n  const end = points[points.length - 1];\n  const rounded = round != null && round > 0;\n  const arcSize = round || 0;\n  // Adds virtual waypoint in the center between start and end point\n  if (close && rounded) {\n    points = points.slice(); // eslint-disable-line\n    const p0 = points[0];\n    const wp = new Point(end.x + (p0.x - end.x) / 2, end.y + (p0.y - end.y) / 2);\n    points.splice(0, 0, wp);\n  }\n  let pt = points[0];\n  let i = 1;\n  // Draws the line segments\n  if (initialMove) {\n    data.push('M', pt.x, pt.y);\n  } else {\n    data.push('L', pt.x, pt.y);\n  }\n  while (i < (close ? points.length : points.length - 1)) {\n    let tmp = points[mod(i, points.length)];\n    let dx = pt.x - tmp.x;\n    let dy = pt.y - tmp.y;\n    if (rounded && (dx !== 0 || dy !== 0) && (exclude == null || exclude.indexOf(i - 1) < 0)) {\n      // Draws a line from the last point to the current\n      // point with a spacing of size off the current point\n      // into direction of the last point\n      let dist = Math.sqrt(dx * dx + dy * dy);\n      const nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n      const ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n      const x1 = tmp.x + nx1;\n      const y1 = tmp.y + ny1;\n      data.push('L', x1, y1);\n      // Draws a curve from the last point to the current\n      // point with a spacing of size off the current point\n      // into direction of the next point\n      let next = points[mod(i + 1, points.length)];\n      // Uses next non-overlapping point\n      while (i < points.length - 2 && Math.round(next.x - tmp.x) === 0 && Math.round(next.y - tmp.y) === 0) {\n        next = points[mod(i + 2, points.length)];\n        i += 1;\n      }\n      dx = next.x - tmp.x;\n      dy = next.y - tmp.y;\n      dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n      const nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n      const ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n      const x2 = tmp.x + nx2;\n      const y2 = tmp.y + ny2;\n      data.push('Q', tmp.x, tmp.y, x2, y2);\n      tmp = new Point(x2, y2);\n    } else {\n      data.push('L', tmp.x, tmp.y);\n    }\n    pt = tmp;\n    i += 1;\n  }\n  if (close) {\n    data.push('Z');\n  } else {\n    data.push('L', end.x, end.y);\n  }\n  return data.map(v => typeof v === 'string' ? v : +v.toFixed(3)).join(' ');\n}\nexport function drawPoints(points, options = {}) {\n  const pts = [];\n  if (points && points.length) {\n    points.forEach(p => {\n      if (Array.isArray(p)) {\n        pts.push({\n          x: p[0],\n          y: p[1]\n        });\n      } else {\n        pts.push({\n          x: p.x,\n          y: p.y\n        });\n      }\n    });\n  }\n  return draw(pts, options.round, options.initialMove == null || options.initialMove, options.close, options.exclude);\n}\n/**\n * Converts the given arc to a series of curves.\n */\nexport function arcToCurves(x0, y0, r1, r2, angle = 0, largeArcFlag = 0, sweepFlag = 0, x, y) {\n  if (r1 === 0 || r2 === 0) {\n    return [];\n  }\n  x -= x0; // eslint-disable-line\n  y -= y0; // eslint-disable-line\n  r1 = Math.abs(r1); // eslint-disable-line\n  r2 = Math.abs(r2); // eslint-disable-line\n  const ctx = -x / 2;\n  const cty = -y / 2;\n  const cpsi = Math.cos(angle * Math.PI / 180);\n  const spsi = Math.sin(angle * Math.PI / 180);\n  const rxd = cpsi * ctx + spsi * cty;\n  const ryd = -1 * spsi * ctx + cpsi * cty;\n  const rxdd = rxd * rxd;\n  const rydd = ryd * ryd;\n  const r1x = r1 * r1;\n  const r2y = r2 * r2;\n  const lamda = rxdd / r1x + rydd / r2y;\n  let sds;\n  if (lamda > 1) {\n    r1 = Math.sqrt(lamda) * r1; // eslint-disable-line\n    r2 = Math.sqrt(lamda) * r2; // eslint-disable-line\n    sds = 0;\n  } else {\n    let seif = 1;\n    if (largeArcFlag === sweepFlag) {\n      seif = -1;\n    }\n    sds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n  }\n  const txd = sds * r1 * ryd / r2;\n  const tyd = -1 * sds * r2 * rxd / r1;\n  const tx = cpsi * txd - spsi * tyd + x / 2;\n  const ty = spsi * txd + cpsi * tyd + y / 2;\n  let rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n  let s1 = rad >= 0 ? rad : 2 * Math.PI + rad;\n  rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n  let dr = rad >= 0 ? rad : 2 * Math.PI + rad;\n  if (sweepFlag === 0 && dr > 0) {\n    dr -= 2 * Math.PI;\n  } else if (sweepFlag !== 0 && dr < 0) {\n    dr += 2 * Math.PI;\n  }\n  const sse = dr * 2 / Math.PI;\n  const seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n  const segr = dr / seg;\n  const t = 8 / 3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n  const cpsir1 = cpsi * r1;\n  const cpsir2 = cpsi * r2;\n  const spsir1 = spsi * r1;\n  const spsir2 = spsi * r2;\n  let mc = Math.cos(s1);\n  let ms = Math.sin(s1);\n  let x2 = -t * (cpsir1 * ms + spsir2 * mc);\n  let y2 = -t * (spsir1 * ms - cpsir2 * mc);\n  let x3 = 0;\n  let y3 = 0;\n  const result = [];\n  for (let n = 0; n < seg; n += 1) {\n    s1 += segr;\n    mc = Math.cos(s1);\n    ms = Math.sin(s1);\n    x3 = cpsir1 * mc - spsir2 * ms + tx;\n    y3 = spsir1 * mc + cpsir2 * ms + ty;\n    const dx = -t * (cpsir1 * ms + spsir2 * mc);\n    const dy = -t * (spsir1 * ms - cpsir2 * mc);\n    // CurveTo updates x0, y0 so need to restore it\n    const index = n * 6;\n    result[index] = Number(x2 + x0);\n    result[index + 1] = Number(y2 + y0);\n    result[index + 2] = Number(x3 - dx + x0);\n    result[index + 3] = Number(y3 - dy + y0);\n    result[index + 4] = Number(x3 + x0);\n    result[index + 5] = Number(y3 + y0);\n    x2 = x3 + dx;\n    y2 = y3 + dy;\n  }\n  return result.map(num => +num.toFixed(2));\n}\nexport function drawArc(startX, startY, rx, ry, xAxisRotation = 0, largeArcFlag = 0, sweepFlag = 0, stopX, stopY) {\n  const data = [];\n  const points = arcToCurves(startX, startY, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, stopX, stopY);\n  if (points != null) {\n    for (let i = 0, ii = points.length; i < ii; i += 6) {\n      data.push('C', points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5]);\n    }\n  }\n  return data.join(' ');\n}","map":{"version":3,"names":["Point","regexSupportedData","RegExp","isValid","data","test","mod","n","m","draw","points","round","initialMove","close","exclude","end","length","rounded","arcSize","slice","p0","wp","x","y","splice","pt","i","push","tmp","dx","dy","indexOf","dist","Math","sqrt","nx1","min","ny1","x1","y1","next","max","nx2","ny2","x2","y2","map","v","toFixed","join","drawPoints","options","pts","forEach","p","Array","isArray","arcToCurves","x0","y0","r1","r2","angle","largeArcFlag","sweepFlag","abs","ctx","cty","cpsi","cos","PI","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sds","seif","txd","tyd","tx","ty","rad","atan2","s1","dr","sse","seg","ceil","segr","t","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x3","y3","result","index","Number","num","drawArc","startX","startY","rx","ry","xAxisRotation","stopX","stopY","ii"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-geometry@2.0.5/node_modules/@antv/x6-geometry/src/path/util.ts"],"sourcesContent":["/* eslint-disable default-param-last */\n\nimport { Point } from '../point'\n\nconst regexSupportedData = new RegExp(`^[\\\\s\\\\dLMCZz,.]*$`) // eslint-disable-line prefer-regex-literals\n\nexport function isValid(data: any) {\n  if (typeof data !== 'string') {\n    return false\n  }\n\n  return regexSupportedData.test(data)\n}\n\n/**\n * Returns the remainder of division of `n` by `m`. You should use this\n * instead of the built-in operation as the built-in operation does not\n * properly handle negative numbers.\n */\nfunction mod(n: number, m: number) {\n  return ((n % m) + m) % m\n}\n\nexport interface DrawPointsOptions {\n  round?: number\n  initialMove?: boolean\n  close?: boolean\n  exclude?: number[]\n}\n\nfunction draw(\n  points: Point.PointLike[],\n  round?: number,\n  initialMove?: boolean,\n  close?: boolean,\n  exclude?: number[],\n) {\n  const data: (string | number)[] = []\n  const end = points[points.length - 1]\n  const rounded = round != null && round > 0\n  const arcSize = round || 0\n\n  // Adds virtual waypoint in the center between start and end point\n  if (close && rounded) {\n    points = points.slice() // eslint-disable-line\n    const p0 = points[0]\n    const wp = new Point(end.x + (p0.x - end.x) / 2, end.y + (p0.y - end.y) / 2)\n    points.splice(0, 0, wp)\n  }\n\n  let pt = points[0]\n  let i = 1\n\n  // Draws the line segments\n  if (initialMove) {\n    data.push('M', pt.x, pt.y)\n  } else {\n    data.push('L', pt.x, pt.y)\n  }\n\n  while (i < (close ? points.length : points.length - 1)) {\n    let tmp = points[mod(i, points.length)]\n    let dx = pt.x - tmp.x\n    let dy = pt.y - tmp.y\n\n    if (\n      rounded &&\n      (dx !== 0 || dy !== 0) &&\n      (exclude == null || exclude.indexOf(i - 1) < 0)\n    ) {\n      // Draws a line from the last point to the current\n      // point with a spacing of size off the current point\n      // into direction of the last point\n      let dist = Math.sqrt(dx * dx + dy * dy)\n      const nx1 = (dx * Math.min(arcSize, dist / 2)) / dist\n      const ny1 = (dy * Math.min(arcSize, dist / 2)) / dist\n\n      const x1 = tmp.x + nx1\n      const y1 = tmp.y + ny1\n      data.push('L', x1, y1)\n\n      // Draws a curve from the last point to the current\n      // point with a spacing of size off the current point\n      // into direction of the next point\n      let next = points[mod(i + 1, points.length)]\n\n      // Uses next non-overlapping point\n      while (\n        i < points.length - 2 &&\n        Math.round(next.x - tmp.x) === 0 &&\n        Math.round(next.y - tmp.y) === 0\n      ) {\n        next = points[mod(i + 2, points.length)]\n        i += 1\n      }\n\n      dx = next.x - tmp.x\n      dy = next.y - tmp.y\n\n      dist = Math.max(1, Math.sqrt(dx * dx + dy * dy))\n      const nx2 = (dx * Math.min(arcSize, dist / 2)) / dist\n      const ny2 = (dy * Math.min(arcSize, dist / 2)) / dist\n\n      const x2 = tmp.x + nx2\n      const y2 = tmp.y + ny2\n\n      data.push('Q', tmp.x, tmp.y, x2, y2)\n      tmp = new Point(x2, y2)\n    } else {\n      data.push('L', tmp.x, tmp.y)\n    }\n\n    pt = tmp\n    i += 1\n  }\n\n  if (close) {\n    data.push('Z')\n  } else {\n    data.push('L', end.x, end.y)\n  }\n\n  return data.map((v) => (typeof v === 'string' ? v : +v.toFixed(3))).join(' ')\n}\n\nexport function drawPoints(\n  points: (Point.PointLike | Point.PointData)[],\n  options: DrawPointsOptions = {},\n) {\n  const pts: Point.PointLike[] = []\n  if (points && points.length) {\n    points.forEach((p) => {\n      if (Array.isArray(p)) {\n        pts.push({ x: p[0], y: p[1] })\n      } else {\n        pts.push({ x: p.x, y: p.y })\n      }\n    })\n  }\n\n  return draw(\n    pts,\n    options.round,\n    options.initialMove == null || options.initialMove,\n    options.close,\n    options.exclude,\n  )\n}\n\n/**\n * Converts the given arc to a series of curves.\n */\nexport function arcToCurves(\n  x0: number,\n  y0: number,\n  r1: number,\n  r2: number,\n  angle = 0,\n  largeArcFlag = 0,\n  sweepFlag = 0,\n  x: number,\n  y: number,\n) {\n  if (r1 === 0 || r2 === 0) {\n    return []\n  }\n\n  x -= x0 // eslint-disable-line\n  y -= y0 // eslint-disable-line\n  r1 = Math.abs(r1) // eslint-disable-line\n  r2 = Math.abs(r2) // eslint-disable-line\n\n  const ctx = -x / 2\n  const cty = -y / 2\n  const cpsi = Math.cos((angle * Math.PI) / 180)\n  const spsi = Math.sin((angle * Math.PI) / 180)\n  const rxd = cpsi * ctx + spsi * cty\n  const ryd = -1 * spsi * ctx + cpsi * cty\n  const rxdd = rxd * rxd\n  const rydd = ryd * ryd\n  const r1x = r1 * r1\n  const r2y = r2 * r2\n  const lamda = rxdd / r1x + rydd / r2y\n\n  let sds\n\n  if (lamda > 1) {\n    r1 = Math.sqrt(lamda) * r1 // eslint-disable-line\n    r2 = Math.sqrt(lamda) * r2 // eslint-disable-line\n    sds = 0\n  } else {\n    let seif = 1\n    if (largeArcFlag === sweepFlag) {\n      seif = -1\n    }\n\n    sds =\n      seif *\n      Math.sqrt(\n        (r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd),\n      )\n  }\n\n  const txd = (sds * r1 * ryd) / r2\n  const tyd = (-1 * sds * r2 * rxd) / r1\n  const tx = cpsi * txd - spsi * tyd + x / 2\n  const ty = spsi * txd + cpsi * tyd + y / 2\n\n  let rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1)\n  let s1 = rad >= 0 ? rad : 2 * Math.PI + rad\n  rad =\n    Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) -\n    Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1)\n  let dr = rad >= 0 ? rad : 2 * Math.PI + rad\n\n  if (sweepFlag === 0 && dr > 0) {\n    dr -= 2 * Math.PI\n  } else if (sweepFlag !== 0 && dr < 0) {\n    dr += 2 * Math.PI\n  }\n\n  const sse = (dr * 2) / Math.PI\n  const seg = Math.ceil(sse < 0 ? -1 * sse : sse)\n  const segr = dr / seg\n  const t =\n    ((8 / 3) * Math.sin(segr / 4) * Math.sin(segr / 4)) / Math.sin(segr / 2)\n  const cpsir1 = cpsi * r1\n  const cpsir2 = cpsi * r2\n  const spsir1 = spsi * r1\n  const spsir2 = spsi * r2\n\n  let mc = Math.cos(s1)\n  let ms = Math.sin(s1)\n  let x2 = -t * (cpsir1 * ms + spsir2 * mc)\n  let y2 = -t * (spsir1 * ms - cpsir2 * mc)\n  let x3 = 0\n  let y3 = 0\n\n  const result = []\n\n  for (let n = 0; n < seg; n += 1) {\n    s1 += segr\n    mc = Math.cos(s1)\n    ms = Math.sin(s1)\n\n    x3 = cpsir1 * mc - spsir2 * ms + tx\n    y3 = spsir1 * mc + cpsir2 * ms + ty\n    const dx = -t * (cpsir1 * ms + spsir2 * mc)\n    const dy = -t * (spsir1 * ms - cpsir2 * mc)\n\n    // CurveTo updates x0, y0 so need to restore it\n    const index = n * 6\n    result[index] = Number(x2 + x0)\n    result[index + 1] = Number(y2 + y0)\n    result[index + 2] = Number(x3 - dx + x0)\n    result[index + 3] = Number(y3 - dy + y0)\n    result[index + 4] = Number(x3 + x0)\n    result[index + 5] = Number(y3 + y0)\n\n    x2 = x3 + dx\n    y2 = y3 + dy\n  }\n\n  return result.map((num) => +num.toFixed(2))\n}\n\nexport function drawArc(\n  startX: number,\n  startY: number,\n  rx: number,\n  ry: number,\n  xAxisRotation = 0,\n  largeArcFlag: 0 | 1 = 0,\n  sweepFlag: 0 | 1 = 0,\n  stopX: number,\n  stopY: number,\n) {\n  const data: (string | number)[] = []\n  const points = arcToCurves(\n    startX,\n    startY,\n    rx,\n    ry,\n    xAxisRotation,\n    largeArcFlag,\n    sweepFlag,\n    stopX,\n    stopY,\n  )\n\n  if (points != null) {\n    for (let i = 0, ii = points.length; i < ii; i += 6) {\n      data.push(\n        'C',\n        points[i],\n        points[i + 1],\n        points[i + 2],\n        points[i + 3],\n        points[i + 4],\n        points[i + 5],\n      )\n    }\n  }\n\n  return data.join(' ')\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}