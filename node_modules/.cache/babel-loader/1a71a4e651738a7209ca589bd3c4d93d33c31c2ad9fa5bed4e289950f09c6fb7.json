{"ast":null,"code":"import { Dom, NumberExt } from '@antv/x6-common';\nimport { Point, Rectangle } from '@antv/x6-geometry';\nimport { Base } from './base';\nimport { Util } from '../util';\nexport class TransformManager extends Base {\n  get container() {\n    return this.graph.view.container;\n  }\n  get viewport() {\n    return this.graph.view.viewport;\n  }\n  get stage() {\n    return this.graph.view.stage;\n  }\n  init() {\n    this.resize();\n  }\n  /**\n   * Returns the current transformation matrix of the graph.\n   */\n  getMatrix() {\n    const transform = this.viewport.getAttribute('transform');\n    if (transform !== this.viewportTransformString) {\n      // `getCTM`: top-left relative to the SVG element\n      // `getScreenCTM`: top-left relative to the document\n      this.viewportMatrix = this.viewport.getCTM();\n      this.viewportTransformString = transform;\n    }\n    // Clone the cached current transformation matrix.\n    // If no matrix previously stored the identity matrix is returned.\n    return Dom.createSVGMatrix(this.viewportMatrix);\n  }\n  /**\n   * Sets new transformation with the given `matrix`\n   */\n  setMatrix(matrix) {\n    const ctm = Dom.createSVGMatrix(matrix);\n    const transform = Dom.matrixToTransformString(ctm);\n    this.viewport.setAttribute('transform', transform);\n    this.viewportMatrix = ctm;\n    this.viewportTransformString = transform;\n  }\n  resize(width, height) {\n    let w = width === undefined ? this.options.width : width;\n    let h = height === undefined ? this.options.height : height;\n    this.options.width = w;\n    this.options.height = h;\n    if (typeof w === 'number') {\n      w = Math.round(w);\n    }\n    if (typeof h === 'number') {\n      h = Math.round(h);\n    }\n    this.container.style.width = w == null ? '' : `${w}px`;\n    this.container.style.height = h == null ? '' : `${h}px`;\n    const size = this.getComputedSize();\n    this.graph.trigger('resize', Object.assign({}, size));\n    return this;\n  }\n  getComputedSize() {\n    let w = this.options.width;\n    let h = this.options.height;\n    if (!NumberExt.isNumber(w)) {\n      w = this.container.clientWidth;\n    }\n    if (!NumberExt.isNumber(h)) {\n      h = this.container.clientHeight;\n    }\n    return {\n      width: w,\n      height: h\n    };\n  }\n  getScale() {\n    return Dom.matrixToScale(this.getMatrix());\n  }\n  scale(sx, sy = sx, ox = 0, oy = 0) {\n    sx = this.clampScale(sx); // eslint-disable-line\n    sy = this.clampScale(sy); // eslint-disable-line\n    if (ox || oy) {\n      const ts = this.getTranslation();\n      const tx = ts.tx - ox * (sx - 1);\n      const ty = ts.ty - oy * (sy - 1);\n      if (tx !== ts.tx || ty !== ts.ty) {\n        this.translate(tx, ty);\n      }\n    }\n    const matrix = this.getMatrix();\n    matrix.a = sx;\n    matrix.d = sy;\n    this.setMatrix(matrix);\n    this.graph.trigger('scale', {\n      sx,\n      sy,\n      ox,\n      oy\n    });\n    return this;\n  }\n  clampScale(scale) {\n    const range = this.graph.options.scaling;\n    return NumberExt.clamp(scale, range.min || 0.01, range.max || 16);\n  }\n  getZoom() {\n    return this.getScale().sx;\n  }\n  zoom(factor, options) {\n    options = options || {}; // eslint-disable-line\n    let sx = factor;\n    let sy = factor;\n    const scale = this.getScale();\n    const clientSize = this.getComputedSize();\n    let cx = clientSize.width / 2;\n    let cy = clientSize.height / 2;\n    if (!options.absolute) {\n      sx += scale.sx;\n      sy += scale.sy;\n    }\n    if (options.scaleGrid) {\n      sx = Math.round(sx / options.scaleGrid) * options.scaleGrid;\n      sy = Math.round(sy / options.scaleGrid) * options.scaleGrid;\n    }\n    if (options.maxScale) {\n      sx = Math.min(options.maxScale, sx);\n      sy = Math.min(options.maxScale, sy);\n    }\n    if (options.minScale) {\n      sx = Math.max(options.minScale, sx);\n      sy = Math.max(options.minScale, sy);\n    }\n    if (options.center) {\n      cx = options.center.x;\n      cy = options.center.y;\n    }\n    sx = this.clampScale(sx);\n    sy = this.clampScale(sy);\n    if (cx || cy) {\n      const ts = this.getTranslation();\n      const tx = cx - (cx - ts.tx) * (sx / scale.sx);\n      const ty = cy - (cy - ts.ty) * (sy / scale.sy);\n      if (tx !== ts.tx || ty !== ts.ty) {\n        this.translate(tx, ty);\n      }\n    }\n    this.scale(sx, sy);\n    return this;\n  }\n  getRotation() {\n    return Dom.matrixToRotation(this.getMatrix());\n  }\n  rotate(angle, cx, cy) {\n    if (cx == null || cy == null) {\n      const bbox = Util.getBBox(this.stage);\n      cx = bbox.width / 2; // eslint-disable-line\n      cy = bbox.height / 2; // eslint-disable-line\n    }\n    const ctm = this.getMatrix().translate(cx, cy).rotate(angle).translate(-cx, -cy);\n    this.setMatrix(ctm);\n    return this;\n  }\n  getTranslation() {\n    return Dom.matrixToTranslation(this.getMatrix());\n  }\n  translate(tx, ty) {\n    const matrix = this.getMatrix();\n    matrix.e = tx || 0;\n    matrix.f = ty || 0;\n    this.setMatrix(matrix);\n    const ts = this.getTranslation();\n    this.options.x = ts.tx;\n    this.options.y = ts.ty;\n    this.graph.trigger('translate', Object.assign({}, ts));\n    return this;\n  }\n  setOrigin(ox, oy) {\n    return this.translate(ox || 0, oy || 0);\n  }\n  fitToContent(gridWidth, gridHeight, padding, options) {\n    if (typeof gridWidth === 'object') {\n      const opts = gridWidth;\n      gridWidth = opts.gridWidth || 1; // eslint-disable-line\n      gridHeight = opts.gridHeight || 1; // eslint-disable-line\n      padding = opts.padding || 0; // eslint-disable-line\n      options = opts; // eslint-disable-line\n    } else {\n      gridWidth = gridWidth || 1; // eslint-disable-line\n      gridHeight = gridHeight || 1; // eslint-disable-line\n      padding = padding || 0; // eslint-disable-line\n      if (options == null) {\n        options = {}; // eslint-disable-line\n      }\n    }\n    const paddings = NumberExt.normalizeSides(padding);\n    const border = options.border || 0;\n    const contentArea = options.contentArea ? Rectangle.create(options.contentArea) : this.getContentArea(options);\n    if (border > 0) {\n      contentArea.inflate(border);\n    }\n    const scale = this.getScale();\n    const translate = this.getTranslation();\n    const sx = scale.sx;\n    const sy = scale.sy;\n    contentArea.x *= sx;\n    contentArea.y *= sy;\n    contentArea.width *= sx;\n    contentArea.height *= sy;\n    let width = Math.max(Math.ceil((contentArea.width + contentArea.x) / gridWidth), 1) * gridWidth;\n    let height = Math.max(Math.ceil((contentArea.height + contentArea.y) / gridHeight), 1) * gridHeight;\n    let tx = 0;\n    let ty = 0;\n    if (options.allowNewOrigin === 'negative' && contentArea.x < 0 || options.allowNewOrigin === 'positive' && contentArea.x >= 0 || options.allowNewOrigin === 'any') {\n      tx = Math.ceil(-contentArea.x / gridWidth) * gridWidth;\n      tx += paddings.left;\n      width += tx;\n    }\n    if (options.allowNewOrigin === 'negative' && contentArea.y < 0 || options.allowNewOrigin === 'positive' && contentArea.y >= 0 || options.allowNewOrigin === 'any') {\n      ty = Math.ceil(-contentArea.y / gridHeight) * gridHeight;\n      ty += paddings.top;\n      height += ty;\n    }\n    width += paddings.right;\n    height += paddings.bottom;\n    // Make sure the resulting width and height are greater than minimum.\n    width = Math.max(width, options.minWidth || 0);\n    height = Math.max(height, options.minHeight || 0);\n    // Make sure the resulting width and height are lesser than maximum.\n    width = Math.min(width, options.maxWidth || Number.MAX_SAFE_INTEGER);\n    height = Math.min(height, options.maxHeight || Number.MAX_SAFE_INTEGER);\n    const size = this.getComputedSize();\n    const sizeChanged = width !== size.width || height !== size.height;\n    const originChanged = tx !== translate.tx || ty !== translate.ty;\n    // Change the dimensions only if there is a size discrepency or an origin change\n    if (originChanged) {\n      this.translate(tx, ty);\n    }\n    if (sizeChanged) {\n      this.resize(width, height);\n    }\n    return new Rectangle(-tx / sx, -ty / sy, width / sx, height / sy);\n  }\n  scaleContentToFit(options = {}) {\n    this.scaleContentToFitImpl(options);\n  }\n  scaleContentToFitImpl(options = {}, translate = true) {\n    let contentBBox;\n    let contentLocalOrigin;\n    if (options.contentArea) {\n      const contentArea = options.contentArea;\n      contentBBox = this.graph.localToGraph(contentArea);\n      contentLocalOrigin = Point.create(contentArea);\n    } else {\n      contentBBox = this.getContentBBox(options);\n      contentLocalOrigin = this.graph.graphToLocal(contentBBox);\n    }\n    if (!contentBBox.width || !contentBBox.height) {\n      return;\n    }\n    const padding = NumberExt.normalizeSides(options.padding);\n    const minScale = options.minScale || 0;\n    const maxScale = options.maxScale || Number.MAX_SAFE_INTEGER;\n    const minScaleX = options.minScaleX || minScale;\n    const maxScaleX = options.maxScaleX || maxScale;\n    const minScaleY = options.minScaleY || minScale;\n    const maxScaleY = options.maxScaleY || maxScale;\n    let fittingBox;\n    if (options.viewportArea) {\n      fittingBox = options.viewportArea;\n    } else {\n      const computedSize = this.getComputedSize();\n      const currentTranslate = this.getTranslation();\n      fittingBox = {\n        x: currentTranslate.tx,\n        y: currentTranslate.ty,\n        width: computedSize.width,\n        height: computedSize.height\n      };\n    }\n    fittingBox = Rectangle.create(fittingBox).moveAndExpand({\n      x: padding.left,\n      y: padding.top,\n      width: -padding.left - padding.right,\n      height: -padding.top - padding.bottom\n    });\n    const currentScale = this.getScale();\n    let newSX = fittingBox.width / contentBBox.width * currentScale.sx;\n    let newSY = fittingBox.height / contentBBox.height * currentScale.sy;\n    if (options.preserveAspectRatio !== false) {\n      newSX = newSY = Math.min(newSX, newSY);\n    }\n    // snap scale to a grid\n    const gridSize = options.scaleGrid;\n    if (gridSize) {\n      newSX = gridSize * Math.floor(newSX / gridSize);\n      newSY = gridSize * Math.floor(newSY / gridSize);\n    }\n    // scale min/max boundaries\n    newSX = NumberExt.clamp(newSX, minScaleX, maxScaleX);\n    newSY = NumberExt.clamp(newSY, minScaleY, maxScaleY);\n    this.scale(newSX, newSY);\n    if (translate) {\n      const origin = this.options;\n      const newOX = fittingBox.x - contentLocalOrigin.x * newSX - origin.x;\n      const newOY = fittingBox.y - contentLocalOrigin.y * newSY - origin.y;\n      this.translate(newOX, newOY);\n    }\n  }\n  getContentArea(options = {}) {\n    // use geometry calc default\n    if (options.useCellGeometry !== false) {\n      return this.model.getAllCellsBBox() || new Rectangle();\n    }\n    return Util.getBBox(this.stage);\n  }\n  getContentBBox(options = {}) {\n    return this.graph.localToGraph(this.getContentArea(options));\n  }\n  getGraphArea() {\n    const rect = Rectangle.fromSize(this.getComputedSize());\n    return this.graph.graphToLocal(rect);\n  }\n  zoomToRect(rect, options = {}) {\n    const area = Rectangle.create(rect);\n    const graph = this.graph;\n    options.contentArea = area;\n    if (options.viewportArea == null) {\n      options.viewportArea = {\n        x: graph.options.x,\n        y: graph.options.y,\n        width: this.options.width,\n        height: this.options.height\n      };\n    }\n    this.scaleContentToFitImpl(options, false);\n    const center = area.getCenter();\n    this.centerPoint(center.x, center.y);\n    return this;\n  }\n  zoomToFit(options = {}) {\n    return this.zoomToRect(this.getContentArea(options), options);\n  }\n  centerPoint(x, y) {\n    const clientSize = this.getComputedSize();\n    const scale = this.getScale();\n    const ts = this.getTranslation();\n    const cx = clientSize.width / 2;\n    const cy = clientSize.height / 2;\n    x = typeof x === 'number' ? x : cx; // eslint-disable-line\n    y = typeof y === 'number' ? y : cy; // eslint-disable-line\n    x = cx - x * scale.sx; // eslint-disable-line\n    y = cy - y * scale.sy; // eslint-disable-line\n    if (ts.tx !== x || ts.ty !== y) {\n      this.translate(x, y);\n    }\n  }\n  centerContent(options) {\n    const rect = this.graph.getContentArea(options);\n    const center = rect.getCenter();\n    this.centerPoint(center.x, center.y);\n  }\n  centerCell(cell) {\n    return this.positionCell(cell, 'center');\n  }\n  positionPoint(point, x, y) {\n    const clientSize = this.getComputedSize();\n    // eslint-disable-next-line\n    x = NumberExt.normalizePercentage(x, Math.max(0, clientSize.width));\n    if (x < 0) {\n      x = clientSize.width + x; // eslint-disable-line\n    }\n    // eslint-disable-next-line\n    y = NumberExt.normalizePercentage(y, Math.max(0, clientSize.height));\n    if (y < 0) {\n      y = clientSize.height + y; // eslint-disable-line\n    }\n    const ts = this.getTranslation();\n    const scale = this.getScale();\n    const dx = x - point.x * scale.sx;\n    const dy = y - point.y * scale.sy;\n    if (ts.tx !== dx || ts.ty !== dy) {\n      this.translate(dx, dy);\n    }\n  }\n  positionRect(rect, pos) {\n    const bbox = Rectangle.create(rect);\n    switch (pos) {\n      case 'center':\n        return this.positionPoint(bbox.getCenter(), '50%', '50%');\n      case 'top':\n        return this.positionPoint(bbox.getTopCenter(), '50%', 0);\n      case 'top-right':\n        return this.positionPoint(bbox.getTopRight(), '100%', 0);\n      case 'right':\n        return this.positionPoint(bbox.getRightMiddle(), '100%', '50%');\n      case 'bottom-right':\n        return this.positionPoint(bbox.getBottomRight(), '100%', '100%');\n      case 'bottom':\n        return this.positionPoint(bbox.getBottomCenter(), '50%', '100%');\n      case 'bottom-left':\n        return this.positionPoint(bbox.getBottomLeft(), 0, '100%');\n      case 'left':\n        return this.positionPoint(bbox.getLeftMiddle(), 0, '50%');\n      case 'top-left':\n        return this.positionPoint(bbox.getTopLeft(), 0, 0);\n      default:\n        return this;\n    }\n  }\n  positionCell(cell, pos) {\n    const bbox = cell.getBBox();\n    return this.positionRect(bbox, pos);\n  }\n  positionContent(pos, options) {\n    const rect = this.graph.getContentArea(options);\n    return this.positionRect(rect, pos);\n  }\n}","map":{"version":3,"names":["Dom","NumberExt","Point","Rectangle","Base","Util","TransformManager","container","graph","view","viewport","stage","init","resize","getMatrix","transform","getAttribute","viewportTransformString","viewportMatrix","getCTM","createSVGMatrix","setMatrix","matrix","ctm","matrixToTransformString","setAttribute","width","height","w","undefined","options","h","Math","round","style","size","getComputedSize","trigger","Object","assign","isNumber","clientWidth","clientHeight","getScale","matrixToScale","scale","sx","sy","ox","oy","clampScale","ts","getTranslation","tx","ty","translate","a","d","range","scaling","clamp","min","max","getZoom","zoom","factor","clientSize","cx","cy","absolute","scaleGrid","maxScale","minScale","center","x","y","getRotation","matrixToRotation","rotate","angle","bbox","getBBox","matrixToTranslation","e","f","setOrigin","fitToContent","gridWidth","gridHeight","padding","opts","paddings","normalizeSides","border","contentArea","create","getContentArea","inflate","ceil","allowNewOrigin","left","top","right","bottom","minWidth","minHeight","maxWidth","Number","MAX_SAFE_INTEGER","maxHeight","sizeChanged","originChanged","scaleContentToFit","scaleContentToFitImpl","contentBBox","contentLocalOrigin","localToGraph","getContentBBox","graphToLocal","minScaleX","maxScaleX","minScaleY","maxScaleY","fittingBox","viewportArea","computedSize","currentTranslate","moveAndExpand","currentScale","newSX","newSY","preserveAspectRatio","gridSize","floor","origin","newOX","newOY","useCellGeometry","model","getAllCellsBBox","getGraphArea","rect","fromSize","zoomToRect","area","getCenter","centerPoint","zoomToFit","centerContent","centerCell","cell","positionCell","positionPoint","point","normalizePercentage","dx","dy","positionRect","pos","getTopCenter","getTopRight","getRightMiddle","getBottomRight","getBottomCenter","getBottomLeft","getLeftMiddle","getTopLeft","positionContent"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/graph/transform.ts"],"sourcesContent":["import { Dom, NumberExt } from '@antv/x6-common'\nimport { Point, Rectangle } from '@antv/x6-geometry'\nimport { Base } from './base'\nimport { Util } from '../util'\nimport { Cell } from '../model'\n\nexport class TransformManager extends Base {\n  protected viewportMatrix: DOMMatrix | null\n\n  protected viewportTransformString: string | null\n\n  protected get container() {\n    return this.graph.view.container\n  }\n\n  protected get viewport() {\n    return this.graph.view.viewport\n  }\n\n  protected get stage() {\n    return this.graph.view.stage\n  }\n\n  protected init() {\n    this.resize()\n  }\n\n  /**\n   * Returns the current transformation matrix of the graph.\n   */\n  getMatrix() {\n    const transform = this.viewport.getAttribute('transform')\n    if (transform !== this.viewportTransformString) {\n      // `getCTM`: top-left relative to the SVG element\n      // `getScreenCTM`: top-left relative to the document\n      this.viewportMatrix = this.viewport.getCTM()\n      this.viewportTransformString = transform\n    }\n\n    // Clone the cached current transformation matrix.\n    // If no matrix previously stored the identity matrix is returned.\n    return Dom.createSVGMatrix(this.viewportMatrix)\n  }\n\n  /**\n   * Sets new transformation with the given `matrix`\n   */\n  setMatrix(matrix: DOMMatrix | Dom.MatrixLike | null) {\n    const ctm = Dom.createSVGMatrix(matrix)\n    const transform = Dom.matrixToTransformString(ctm)\n    this.viewport.setAttribute('transform', transform)\n    this.viewportMatrix = ctm\n    this.viewportTransformString = transform\n  }\n\n  resize(width?: number, height?: number) {\n    let w = width === undefined ? this.options.width : width\n    let h = height === undefined ? this.options.height : height\n\n    this.options.width = w\n    this.options.height = h\n\n    if (typeof w === 'number') {\n      w = Math.round(w)\n    }\n    if (typeof h === 'number') {\n      h = Math.round(h)\n    }\n\n    this.container.style.width = w == null ? '' : `${w}px`\n    this.container.style.height = h == null ? '' : `${h}px`\n\n    const size = this.getComputedSize()\n    this.graph.trigger('resize', { ...size })\n    return this\n  }\n\n  getComputedSize() {\n    let w = this.options.width\n    let h = this.options.height\n    if (!NumberExt.isNumber(w)) {\n      w = this.container.clientWidth\n    }\n    if (!NumberExt.isNumber(h)) {\n      h = this.container.clientHeight\n    }\n    return { width: w, height: h }\n  }\n\n  getScale() {\n    return Dom.matrixToScale(this.getMatrix())\n  }\n\n  scale(sx: number, sy: number = sx, ox = 0, oy = 0) {\n    sx = this.clampScale(sx) // eslint-disable-line\n    sy = this.clampScale(sy) // eslint-disable-line\n\n    if (ox || oy) {\n      const ts = this.getTranslation()\n      const tx = ts.tx - ox * (sx - 1)\n      const ty = ts.ty - oy * (sy - 1)\n      if (tx !== ts.tx || ty !== ts.ty) {\n        this.translate(tx, ty)\n      }\n    }\n\n    const matrix = this.getMatrix()\n    matrix.a = sx\n    matrix.d = sy\n\n    this.setMatrix(matrix)\n    this.graph.trigger('scale', { sx, sy, ox, oy })\n    return this\n  }\n\n  clampScale(scale: number) {\n    const range = this.graph.options.scaling\n    return NumberExt.clamp(scale, range.min || 0.01, range.max || 16)\n  }\n\n  getZoom() {\n    return this.getScale().sx\n  }\n\n  zoom(factor: number, options?: TransformManager.ZoomOptions) {\n    options = options || {} // eslint-disable-line\n\n    let sx = factor\n    let sy = factor\n    const scale = this.getScale()\n    const clientSize = this.getComputedSize()\n    let cx = clientSize.width / 2\n    let cy = clientSize.height / 2\n\n    if (!options.absolute) {\n      sx += scale.sx\n      sy += scale.sy\n    }\n\n    if (options.scaleGrid) {\n      sx = Math.round(sx / options.scaleGrid) * options.scaleGrid\n      sy = Math.round(sy / options.scaleGrid) * options.scaleGrid\n    }\n\n    if (options.maxScale) {\n      sx = Math.min(options.maxScale, sx)\n      sy = Math.min(options.maxScale, sy)\n    }\n\n    if (options.minScale) {\n      sx = Math.max(options.minScale, sx)\n      sy = Math.max(options.minScale, sy)\n    }\n\n    if (options.center) {\n      cx = options.center.x\n      cy = options.center.y\n    }\n\n    sx = this.clampScale(sx)\n    sy = this.clampScale(sy)\n\n    if (cx || cy) {\n      const ts = this.getTranslation()\n      const tx = cx - (cx - ts.tx) * (sx / scale.sx)\n      const ty = cy - (cy - ts.ty) * (sy / scale.sy)\n      if (tx !== ts.tx || ty !== ts.ty) {\n        this.translate(tx, ty)\n      }\n    }\n\n    this.scale(sx, sy)\n\n    return this\n  }\n\n  getRotation() {\n    return Dom.matrixToRotation(this.getMatrix())\n  }\n\n  rotate(angle: number, cx?: number, cy?: number) {\n    if (cx == null || cy == null) {\n      const bbox = Util.getBBox(this.stage)\n      cx = bbox.width / 2 // eslint-disable-line\n      cy = bbox.height / 2 // eslint-disable-line\n    }\n\n    const ctm = this.getMatrix()\n      .translate(cx, cy)\n      .rotate(angle)\n      .translate(-cx, -cy)\n    this.setMatrix(ctm)\n    return this\n  }\n\n  getTranslation() {\n    return Dom.matrixToTranslation(this.getMatrix())\n  }\n\n  translate(tx: number, ty: number) {\n    const matrix = this.getMatrix()\n    matrix.e = tx || 0\n    matrix.f = ty || 0\n    this.setMatrix(matrix)\n    const ts = this.getTranslation()\n    this.options.x = ts.tx\n    this.options.y = ts.ty\n    this.graph.trigger('translate', { ...ts })\n    return this\n  }\n\n  setOrigin(ox?: number, oy?: number) {\n    return this.translate(ox || 0, oy || 0)\n  }\n\n  fitToContent(\n    gridWidth?: number | TransformManager.FitToContentFullOptions,\n    gridHeight?: number,\n    padding?: NumberExt.SideOptions,\n    options?: TransformManager.FitToContentOptions,\n  ) {\n    if (typeof gridWidth === 'object') {\n      const opts = gridWidth\n      gridWidth = opts.gridWidth || 1 // eslint-disable-line\n      gridHeight = opts.gridHeight || 1 // eslint-disable-line\n      padding = opts.padding || 0 // eslint-disable-line\n      options = opts // eslint-disable-line\n    } else {\n      gridWidth = gridWidth || 1 // eslint-disable-line\n      gridHeight = gridHeight || 1 // eslint-disable-line\n      padding = padding || 0 // eslint-disable-line\n      if (options == null) {\n        options = {} // eslint-disable-line\n      }\n    }\n\n    const paddings = NumberExt.normalizeSides(padding)\n    const border = options.border || 0\n    const contentArea = options.contentArea\n      ? Rectangle.create(options.contentArea)\n      : this.getContentArea(options)\n\n    if (border > 0) {\n      contentArea.inflate(border)\n    }\n\n    const scale = this.getScale()\n    const translate = this.getTranslation()\n    const sx = scale.sx\n    const sy = scale.sy\n\n    contentArea.x *= sx\n    contentArea.y *= sy\n    contentArea.width *= sx\n    contentArea.height *= sy\n\n    let width =\n      Math.max(Math.ceil((contentArea.width + contentArea.x) / gridWidth), 1) *\n      gridWidth\n\n    let height =\n      Math.max(\n        Math.ceil((contentArea.height + contentArea.y) / gridHeight),\n        1,\n      ) * gridHeight\n\n    let tx = 0\n    let ty = 0\n\n    if (\n      (options.allowNewOrigin === 'negative' && contentArea.x < 0) ||\n      (options.allowNewOrigin === 'positive' && contentArea.x >= 0) ||\n      options.allowNewOrigin === 'any'\n    ) {\n      tx = Math.ceil(-contentArea.x / gridWidth) * gridWidth\n      tx += paddings.left\n      width += tx\n    }\n\n    if (\n      (options.allowNewOrigin === 'negative' && contentArea.y < 0) ||\n      (options.allowNewOrigin === 'positive' && contentArea.y >= 0) ||\n      options.allowNewOrigin === 'any'\n    ) {\n      ty = Math.ceil(-contentArea.y / gridHeight) * gridHeight\n      ty += paddings.top\n      height += ty\n    }\n\n    width += paddings.right\n    height += paddings.bottom\n\n    // Make sure the resulting width and height are greater than minimum.\n    width = Math.max(width, options.minWidth || 0)\n    height = Math.max(height, options.minHeight || 0)\n\n    // Make sure the resulting width and height are lesser than maximum.\n    width = Math.min(width, options.maxWidth || Number.MAX_SAFE_INTEGER)\n    height = Math.min(height, options.maxHeight || Number.MAX_SAFE_INTEGER)\n\n    const size = this.getComputedSize()\n    const sizeChanged = width !== size.width || height !== size.height\n    const originChanged = tx !== translate.tx || ty !== translate.ty\n\n    // Change the dimensions only if there is a size discrepency or an origin change\n    if (originChanged) {\n      this.translate(tx, ty)\n    }\n\n    if (sizeChanged) {\n      this.resize(width, height)\n    }\n\n    return new Rectangle(-tx / sx, -ty / sy, width / sx, height / sy)\n  }\n\n  scaleContentToFit(options: TransformManager.ScaleContentToFitOptions = {}) {\n    this.scaleContentToFitImpl(options)\n  }\n\n  scaleContentToFitImpl(\n    options: TransformManager.ScaleContentToFitOptions = {},\n    translate = true,\n  ) {\n    let contentBBox\n    let contentLocalOrigin\n    if (options.contentArea) {\n      const contentArea = options.contentArea\n      contentBBox = this.graph.localToGraph(contentArea)\n      contentLocalOrigin = Point.create(contentArea)\n    } else {\n      contentBBox = this.getContentBBox(options)\n      contentLocalOrigin = this.graph.graphToLocal(contentBBox)\n    }\n\n    if (!contentBBox.width || !contentBBox.height) {\n      return\n    }\n\n    const padding = NumberExt.normalizeSides(options.padding)\n    const minScale = options.minScale || 0\n    const maxScale = options.maxScale || Number.MAX_SAFE_INTEGER\n    const minScaleX = options.minScaleX || minScale\n    const maxScaleX = options.maxScaleX || maxScale\n    const minScaleY = options.minScaleY || minScale\n    const maxScaleY = options.maxScaleY || maxScale\n\n    let fittingBox\n    if (options.viewportArea) {\n      fittingBox = options.viewportArea\n    } else {\n      const computedSize = this.getComputedSize()\n      const currentTranslate = this.getTranslation()\n      fittingBox = {\n        x: currentTranslate.tx,\n        y: currentTranslate.ty,\n        width: computedSize.width,\n        height: computedSize.height,\n      }\n    }\n\n    fittingBox = Rectangle.create(fittingBox).moveAndExpand({\n      x: padding.left,\n      y: padding.top,\n      width: -padding.left - padding.right,\n      height: -padding.top - padding.bottom,\n    })\n\n    const currentScale = this.getScale()\n\n    let newSX = (fittingBox.width / contentBBox.width) * currentScale.sx\n    let newSY = (fittingBox.height / contentBBox.height) * currentScale.sy\n\n    if (options.preserveAspectRatio !== false) {\n      newSX = newSY = Math.min(newSX, newSY)\n    }\n\n    // snap scale to a grid\n    const gridSize = options.scaleGrid\n    if (gridSize) {\n      newSX = gridSize * Math.floor(newSX / gridSize)\n      newSY = gridSize * Math.floor(newSY / gridSize)\n    }\n\n    // scale min/max boundaries\n    newSX = NumberExt.clamp(newSX, minScaleX, maxScaleX)\n    newSY = NumberExt.clamp(newSY, minScaleY, maxScaleY)\n\n    this.scale(newSX, newSY)\n\n    if (translate) {\n      const origin = this.options\n      const newOX = fittingBox.x - contentLocalOrigin.x * newSX - origin.x\n      const newOY = fittingBox.y - contentLocalOrigin.y * newSY - origin.y\n      this.translate(newOX, newOY)\n    }\n  }\n\n  getContentArea(options: TransformManager.GetContentAreaOptions = {}) {\n    // use geometry calc default\n    if (options.useCellGeometry !== false) {\n      return this.model.getAllCellsBBox() || new Rectangle()\n    }\n\n    return Util.getBBox(this.stage)\n  }\n\n  getContentBBox(options: TransformManager.GetContentAreaOptions = {}) {\n    return this.graph.localToGraph(this.getContentArea(options))\n  }\n\n  getGraphArea() {\n    const rect = Rectangle.fromSize(this.getComputedSize())\n    return this.graph.graphToLocal(rect)\n  }\n\n  zoomToRect(\n    rect: Rectangle.RectangleLike,\n    options: TransformManager.ScaleContentToFitOptions = {},\n  ) {\n    const area = Rectangle.create(rect)\n    const graph = this.graph\n\n    options.contentArea = area\n    if (options.viewportArea == null) {\n      options.viewportArea = {\n        x: graph.options.x,\n        y: graph.options.y,\n        width: this.options.width,\n        height: this.options.height,\n      }\n    }\n\n    this.scaleContentToFitImpl(options, false)\n    const center = area.getCenter()\n    this.centerPoint(center.x, center.y)\n\n    return this\n  }\n\n  zoomToFit(\n    options: TransformManager.GetContentAreaOptions &\n      TransformManager.ScaleContentToFitOptions = {},\n  ) {\n    return this.zoomToRect(this.getContentArea(options), options)\n  }\n\n  centerPoint(x?: number, y?: number) {\n    const clientSize = this.getComputedSize()\n    const scale = this.getScale()\n    const ts = this.getTranslation()\n    const cx = clientSize.width / 2\n    const cy = clientSize.height / 2\n\n    x = typeof x === 'number' ? x : cx // eslint-disable-line\n    y = typeof y === 'number' ? y : cy // eslint-disable-line\n\n    x = cx - x * scale.sx // eslint-disable-line\n    y = cy - y * scale.sy // eslint-disable-line\n\n    if (ts.tx !== x || ts.ty !== y) {\n      this.translate(x, y)\n    }\n  }\n\n  centerContent(options?: TransformManager.GetContentAreaOptions) {\n    const rect = this.graph.getContentArea(options)\n    const center = rect.getCenter()\n    this.centerPoint(center.x, center.y)\n  }\n\n  centerCell(cell: Cell) {\n    return this.positionCell(cell, 'center')\n  }\n\n  positionPoint(\n    point: Point.PointLike,\n    x: number | string,\n    y: number | string,\n  ) {\n    const clientSize = this.getComputedSize()\n\n    // eslint-disable-next-line\n    x = NumberExt.normalizePercentage(x, Math.max(0, clientSize.width))\n    if (x < 0) {\n      x = clientSize.width + x // eslint-disable-line\n    }\n\n    // eslint-disable-next-line\n    y = NumberExt.normalizePercentage(y, Math.max(0, clientSize.height))\n    if (y < 0) {\n      y = clientSize.height + y // eslint-disable-line\n    }\n\n    const ts = this.getTranslation()\n    const scale = this.getScale()\n    const dx = x - point.x * scale.sx\n    const dy = y - point.y * scale.sy\n\n    if (ts.tx !== dx || ts.ty !== dy) {\n      this.translate(dx, dy)\n    }\n  }\n\n  positionRect(rect: Rectangle.RectangleLike, pos: TransformManager.Direction) {\n    const bbox = Rectangle.create(rect)\n    switch (pos) {\n      case 'center':\n        return this.positionPoint(bbox.getCenter(), '50%', '50%')\n      case 'top':\n        return this.positionPoint(bbox.getTopCenter(), '50%', 0)\n      case 'top-right':\n        return this.positionPoint(bbox.getTopRight(), '100%', 0)\n      case 'right':\n        return this.positionPoint(bbox.getRightMiddle(), '100%', '50%')\n      case 'bottom-right':\n        return this.positionPoint(bbox.getBottomRight(), '100%', '100%')\n      case 'bottom':\n        return this.positionPoint(bbox.getBottomCenter(), '50%', '100%')\n      case 'bottom-left':\n        return this.positionPoint(bbox.getBottomLeft(), 0, '100%')\n      case 'left':\n        return this.positionPoint(bbox.getLeftMiddle(), 0, '50%')\n      case 'top-left':\n        return this.positionPoint(bbox.getTopLeft(), 0, 0)\n      default:\n        return this\n    }\n  }\n\n  positionCell(cell: Cell, pos: TransformManager.Direction) {\n    const bbox = cell.getBBox()\n    return this.positionRect(bbox, pos)\n  }\n\n  positionContent(\n    pos: TransformManager.Direction,\n    options?: TransformManager.GetContentAreaOptions,\n  ) {\n    const rect = this.graph.getContentArea(options)\n    return this.positionRect(rect, pos)\n  }\n}\n\nexport namespace TransformManager {\n  export interface FitToContentOptions extends GetContentAreaOptions {\n    minWidth?: number\n    minHeight?: number\n    maxWidth?: number\n    maxHeight?: number\n    contentArea?: Rectangle | Rectangle.RectangleLike\n    border?: number\n    allowNewOrigin?: 'negative' | 'positive' | 'any'\n  }\n\n  export interface FitToContentFullOptions extends FitToContentOptions {\n    gridWidth?: number\n    gridHeight?: number\n    padding?: NumberExt.SideOptions\n  }\n\n  export interface ScaleContentToFitOptions extends GetContentAreaOptions {\n    padding?: NumberExt.SideOptions\n    minScale?: number\n    maxScale?: number\n    minScaleX?: number\n    minScaleY?: number\n    maxScaleX?: number\n    maxScaleY?: number\n    scaleGrid?: number\n    contentArea?: Rectangle.RectangleLike\n    viewportArea?: Rectangle.RectangleLike\n    preserveAspectRatio?: boolean\n  }\n\n  export interface GetContentAreaOptions {\n    useCellGeometry?: boolean\n  }\n\n  export interface ZoomOptions {\n    absolute?: boolean\n    minScale?: number\n    maxScale?: number\n    scaleGrid?: number\n    center?: Point.PointLike\n  }\n\n  export type Direction =\n    | 'center'\n    | 'top'\n    | 'top-right'\n    | 'top-left'\n    | 'right'\n    | 'bottom-right'\n    | 'bottom'\n    | 'bottom-left'\n    | 'left'\n\n  export interface CenterOptions {\n    padding?: NumberExt.SideOptions\n  }\n\n  export type PositionContentOptions = GetContentAreaOptions & CenterOptions\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}