{"ast":null,"code":"/* eslint-disable no-bitwise */\nexport class FlagManager {\n  get cell() {\n    return this.view.cell;\n  }\n  constructor(view, actions, bootstrap = []) {\n    this.view = view;\n    const flags = {};\n    const attrs = {};\n    let shift = 0;\n    Object.keys(actions).forEach(attr => {\n      let labels = actions[attr];\n      if (!Array.isArray(labels)) {\n        labels = [labels];\n      }\n      labels.forEach(label => {\n        let flag = flags[label];\n        if (!flag) {\n          shift += 1;\n          flag = flags[label] = 1 << shift;\n        }\n        attrs[attr] |= flag;\n      });\n    });\n    let labels = bootstrap;\n    if (!Array.isArray(labels)) {\n      labels = [labels];\n    }\n    labels.forEach(label => {\n      if (!flags[label]) {\n        shift += 1;\n        flags[label] = 1 << shift;\n      }\n    });\n    // 26 - 30 are reserved for paper flags\n    // 31+ overflows maximal number\n    if (shift > 25) {\n      throw new Error('Maximum number of flags exceeded.');\n    }\n    this.flags = flags;\n    this.attrs = attrs;\n    this.bootstrap = bootstrap;\n  }\n  getFlag(label) {\n    const flags = this.flags;\n    if (flags == null) {\n      return 0;\n    }\n    if (Array.isArray(label)) {\n      return label.reduce((memo, key) => memo | flags[key], 0);\n    }\n    return flags[label] | 0;\n  }\n  hasAction(flag, label) {\n    return flag & this.getFlag(label);\n  }\n  removeAction(flag, label) {\n    return flag ^ flag & this.getFlag(label);\n  }\n  getBootstrapFlag() {\n    return this.getFlag(this.bootstrap);\n  }\n  getChangedFlag() {\n    let flag = 0;\n    if (!this.attrs) {\n      return flag;\n    }\n    Object.keys(this.attrs).forEach(attr => {\n      if (this.cell.hasChanged(attr)) {\n        flag |= this.attrs[attr];\n      }\n    });\n    return flag;\n  }\n}","map":{"version":3,"names":["FlagManager","cell","view","constructor","actions","bootstrap","flags","attrs","shift","Object","keys","forEach","attr","labels","Array","isArray","label","flag","Error","getFlag","reduce","memo","key","hasAction","removeAction","getBootstrapFlag","getChangedFlag","hasChanged"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/view/flag.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\n\nimport { KeyValue } from '@antv/x6-common'\nimport { CellView } from './cell'\n\nexport class FlagManager {\n  protected attrs: { [attr: string]: number }\n  protected flags: { [name: string]: number }\n  protected bootstrap: FlagManager.Actions\n\n  protected get cell() {\n    return this.view.cell\n  }\n\n  constructor(\n    protected view: CellView,\n    actions: KeyValue<FlagManager.Actions>,\n    bootstrap: FlagManager.Actions = [],\n  ) {\n    const flags: { [name: string]: number } = {}\n    const attrs: { [attr: string]: number } = {}\n\n    let shift = 0\n    Object.keys(actions).forEach((attr) => {\n      let labels = actions[attr]\n      if (!Array.isArray(labels)) {\n        labels = [labels]\n      }\n\n      labels.forEach((label) => {\n        let flag = flags[label]\n        if (!flag) {\n          shift += 1\n          flag = flags[label] = 1 << shift\n        }\n        attrs[attr] |= flag\n      })\n    })\n\n    let labels = bootstrap\n    if (!Array.isArray(labels)) {\n      labels = [labels]\n    }\n\n    labels.forEach((label) => {\n      if (!flags[label]) {\n        shift += 1\n        flags[label] = 1 << shift\n      }\n    })\n\n    // 26 - 30 are reserved for paper flags\n    // 31+ overflows maximal number\n    if (shift > 25) {\n      throw new Error('Maximum number of flags exceeded.')\n    }\n\n    this.flags = flags\n    this.attrs = attrs\n    this.bootstrap = bootstrap\n  }\n\n  getFlag(label: FlagManager.Actions) {\n    const flags = this.flags\n    if (flags == null) {\n      return 0\n    }\n\n    if (Array.isArray(label)) {\n      return label.reduce((memo, key) => memo | flags[key], 0)\n    }\n\n    return flags[label] | 0\n  }\n\n  hasAction(flag: number, label: FlagManager.Actions) {\n    return flag & this.getFlag(label)\n  }\n\n  removeAction(flag: number, label: FlagManager.Actions) {\n    return flag ^ (flag & this.getFlag(label))\n  }\n\n  getBootstrapFlag() {\n    return this.getFlag(this.bootstrap)\n  }\n\n  getChangedFlag() {\n    let flag = 0\n\n    if (!this.attrs) {\n      return flag\n    }\n\n    Object.keys(this.attrs).forEach((attr) => {\n      if (this.cell.hasChanged(attr)) {\n        flag |= this.attrs[attr]\n      }\n    })\n\n    return flag\n  }\n}\n\nexport namespace FlagManager {\n  export type Action =\n    | 'render'\n    | 'update'\n    | 'resize'\n    | 'scale'\n    | 'rotate'\n    | 'translate'\n    | 'ports'\n    | 'tools'\n    | 'source'\n    | 'target'\n    | 'vertices'\n    | 'labels'\n\n  export type Actions = Action | Action[]\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}