{"ast":null,"code":"import { Registry } from '../registry';\nimport * as highlighters from './main';\nexport var Highlighter;\n(function (Highlighter) {\n  function check(name, highlighter) {\n    if (typeof highlighter.highlight !== 'function') {\n      throw new Error(`Highlighter '${name}' is missing required \\`highlight()\\` method`);\n    }\n    if (typeof highlighter.unhighlight !== 'function') {\n      throw new Error(`Highlighter '${name}' is missing required \\`unhighlight()\\` method`);\n    }\n  }\n  Highlighter.check = check;\n})(Highlighter || (Highlighter = {}));\n(function (Highlighter) {\n  Highlighter.presets = highlighters;\n  Highlighter.registry = Registry.create({\n    type: 'highlighter'\n  });\n  Highlighter.registry.register(Highlighter.presets, true);\n})(Highlighter || (Highlighter = {}));","map":{"version":3,"names":["Registry","highlighters","Highlighter","check","name","highlighter","highlight","Error","unhighlight","presets","registry","create","type","register"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/highlighter/index.ts"],"sourcesContent":["import { KeyValue } from '@antv/x6-common'\nimport { Registry } from '../registry'\nimport { CellView } from '../../view'\nimport * as highlighters from './main'\n\nexport namespace Highlighter {\n  export interface Definition<T> {\n    highlight: (cellView: CellView, magnet: Element, options: T) => void\n    unhighlight: (cellView: CellView, magnet: Element, options: T) => void\n  }\n\n  export type CommonDefinition = Highlighter.Definition<KeyValue>\n}\n\nexport namespace Highlighter {\n  export function check(\n    name: string,\n    highlighter: Highlighter.CommonDefinition,\n  ) {\n    if (typeof highlighter.highlight !== 'function') {\n      throw new Error(\n        `Highlighter '${name}' is missing required \\`highlight()\\` method`,\n      )\n    }\n\n    if (typeof highlighter.unhighlight !== 'function') {\n      throw new Error(\n        `Highlighter '${name}' is missing required \\`unhighlight()\\` method`,\n      )\n    }\n  }\n}\n\nexport namespace Highlighter {\n  export type Presets = (typeof Highlighter)['presets']\n\n  export type OptionsMap = {\n    readonly [K in keyof Presets]-?: Parameters<Presets[K]['highlight']>[2]\n  }\n\n  export type NativeNames = keyof Presets\n\n  export interface NativeItem<T extends NativeNames = NativeNames> {\n    name: T\n    args?: OptionsMap[T]\n  }\n\n  export interface ManaualItem {\n    name: Exclude<string, NativeNames>\n    args?: KeyValue\n  }\n}\n\nexport namespace Highlighter {\n  export const presets = highlighters\n  export const registry = Registry.create<CommonDefinition, Presets>({\n    type: 'highlighter',\n  })\n\n  registry.register(presets, true)\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,OAAO,KAAKC,YAAY,MAAM,QAAQ;AAWtC,OAAM,IAAWC,WAAW;AAA5B,WAAiBA,WAAW;EAC1B,SAAgBC,KAAKA,CACnBC,IAAY,EACZC,WAAyC;IAEzC,IAAI,OAAOA,WAAW,CAACC,SAAS,KAAK,UAAU,EAAE;MAC/C,MAAM,IAAIC,KAAK,CACb,gBAAgBH,IAAI,8CAA8C,CACnE;;IAGH,IAAI,OAAOC,WAAW,CAACG,WAAW,KAAK,UAAU,EAAE;MACjD,MAAM,IAAID,KAAK,CACb,gBAAgBH,IAAI,gDAAgD,CACrE;;EAEL;EAfgBF,WAAA,CAAAC,KAAK,GAAAA,KAepB;AACH,CAAC,EAjBgBD,WAAW,KAAXA,WAAW;AAuC5B,WAAiBA,WAAW;EACbA,WAAA,CAAAO,OAAO,GAAGR,YAAY;EACtBC,WAAA,CAAAQ,QAAQ,GAAGV,QAAQ,CAACW,MAAM,CAA4B;IACjEC,IAAI,EAAE;GACP,CAAC;EAEFV,WAAA,CAAAQ,QAAQ,CAACG,QAAQ,CAACX,WAAA,CAAAO,OAAO,EAAE,IAAI,CAAC;AAClC,CAAC,EAPgBP,WAAW,KAAXA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}