{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Dom } from '@antv/x6-common';\nimport { Highlighter } from '../registry';\nimport { Base } from './base';\nexport class HighlightManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.highlights = {};\n  }\n  init() {\n    this.startListening();\n  }\n  startListening() {\n    this.graph.on('cell:highlight', this.onCellHighlight, this);\n    this.graph.on('cell:unhighlight', this.onCellUnhighlight, this);\n  }\n  stopListening() {\n    this.graph.off('cell:highlight', this.onCellHighlight, this);\n    this.graph.off('cell:unhighlight', this.onCellUnhighlight, this);\n  }\n  onCellHighlight({\n    view: cellView,\n    magnet,\n    options = {}\n  }) {\n    const resolved = this.resolveHighlighter(options);\n    if (!resolved) {\n      return;\n    }\n    const key = this.getHighlighterId(magnet, resolved);\n    if (!this.highlights[key]) {\n      const highlighter = resolved.highlighter;\n      highlighter.highlight(cellView, magnet, Object.assign({}, resolved.args));\n      this.highlights[key] = {\n        cellView,\n        magnet,\n        highlighter,\n        args: resolved.args\n      };\n    }\n  }\n  onCellUnhighlight({\n    magnet,\n    options = {}\n  }) {\n    const resolved = this.resolveHighlighter(options);\n    if (!resolved) {\n      return;\n    }\n    const id = this.getHighlighterId(magnet, resolved);\n    this.unhighlight(id);\n  }\n  resolveHighlighter(options) {\n    const graphOptions = this.options;\n    let highlighterDef = options.highlighter;\n    if (highlighterDef == null) {\n      // check for built-in types\n      const type = options.type;\n      highlighterDef = type && graphOptions.highlighting[type] || graphOptions.highlighting.default;\n    }\n    if (highlighterDef == null) {\n      return null;\n    }\n    const def = typeof highlighterDef === 'string' ? {\n      name: highlighterDef\n    } : highlighterDef;\n    const name = def.name;\n    const highlighter = Highlighter.registry.get(name);\n    if (highlighter == null) {\n      return Highlighter.registry.onNotFound(name);\n    }\n    Highlighter.check(name, highlighter);\n    return {\n      name,\n      highlighter,\n      args: def.args || {}\n    };\n  }\n  getHighlighterId(magnet, options) {\n    Dom.ensureId(magnet);\n    return options.name + magnet.id + JSON.stringify(options.args);\n  }\n  unhighlight(id) {\n    const highlight = this.highlights[id];\n    if (highlight) {\n      highlight.highlighter.unhighlight(highlight.cellView, highlight.magnet, highlight.args);\n      delete this.highlights[id];\n    }\n  }\n  dispose() {\n    Object.keys(this.highlights).forEach(id => this.unhighlight(id));\n    this.stopListening();\n  }\n}\n__decorate([HighlightManager.dispose()], HighlightManager.prototype, \"dispose\", null);","map":{"version":3,"names":["Dom","Highlighter","Base","HighlightManager","constructor","highlights","init","startListening","graph","on","onCellHighlight","onCellUnhighlight","stopListening","off","view","cellView","magnet","options","resolved","resolveHighlighter","key","getHighlighterId","highlighter","highlight","Object","assign","args","id","unhighlight","graphOptions","highlighterDef","type","highlighting","default","def","name","registry","get","onNotFound","check","ensureId","JSON","stringify","dispose","keys","forEach","__decorate"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/graph/highlight.ts"],"sourcesContent":["import { Dom, KeyValue } from '@antv/x6-common'\nimport { CellView } from '../view'\nimport { Highlighter } from '../registry'\nimport { EventArgs } from './events'\nimport { Base } from './base'\n\nexport class HighlightManager extends Base {\n  protected readonly highlights: KeyValue<HighlightManager.Cache> = {}\n\n  protected init() {\n    this.startListening()\n  }\n\n  protected startListening() {\n    this.graph.on('cell:highlight', this.onCellHighlight, this)\n    this.graph.on('cell:unhighlight', this.onCellUnhighlight, this)\n  }\n\n  protected stopListening() {\n    this.graph.off('cell:highlight', this.onCellHighlight, this)\n    this.graph.off('cell:unhighlight', this.onCellUnhighlight, this)\n  }\n\n  protected onCellHighlight({\n    view: cellView,\n    magnet,\n    options = {},\n  }: EventArgs['cell:highlight']) {\n    const resolved = this.resolveHighlighter(options)\n    if (!resolved) {\n      return\n    }\n\n    const key = this.getHighlighterId(magnet, resolved)\n    if (!this.highlights[key]) {\n      const highlighter = resolved.highlighter\n      highlighter.highlight(cellView, magnet, { ...resolved.args })\n\n      this.highlights[key] = {\n        cellView,\n        magnet,\n        highlighter,\n        args: resolved.args,\n      }\n    }\n  }\n\n  protected onCellUnhighlight({\n    magnet,\n    options = {},\n  }: EventArgs['cell:unhighlight']) {\n    const resolved = this.resolveHighlighter(options)\n    if (!resolved) {\n      return\n    }\n\n    const id = this.getHighlighterId(magnet, resolved)\n    this.unhighlight(id)\n  }\n\n  protected resolveHighlighter(options: CellView.HighlightOptions) {\n    const graphOptions = this.options\n    let highlighterDef: string | undefined | Highlighter.ManaualItem =\n      options.highlighter\n\n    if (highlighterDef == null) {\n      // check for built-in types\n      const type = options.type\n      highlighterDef =\n        (type && graphOptions.highlighting[type]) ||\n        graphOptions.highlighting.default\n    }\n\n    if (highlighterDef == null) {\n      return null\n    }\n\n    const def: Highlighter.ManaualItem =\n      typeof highlighterDef === 'string'\n        ? {\n            name: highlighterDef,\n          }\n        : highlighterDef\n\n    const name = def.name\n    const highlighter = Highlighter.registry.get(name)\n    if (highlighter == null) {\n      return Highlighter.registry.onNotFound(name)\n    }\n\n    Highlighter.check(name, highlighter)\n\n    return {\n      name,\n      highlighter,\n      args: def.args || {},\n    }\n  }\n\n  protected getHighlighterId(\n    magnet: Element,\n    options: NonNullable<\n      ReturnType<typeof HighlightManager.prototype.resolveHighlighter>\n    >,\n  ) {\n    Dom.ensureId(magnet)\n    return options.name + magnet.id + JSON.stringify(options.args)\n  }\n\n  protected unhighlight(id: string) {\n    const highlight = this.highlights[id]\n    if (highlight) {\n      highlight.highlighter.unhighlight(\n        highlight.cellView,\n        highlight.magnet,\n        highlight.args,\n      )\n\n      delete this.highlights[id]\n    }\n  }\n\n  @HighlightManager.dispose()\n  dispose() {\n    Object.keys(this.highlights).forEach((id) => this.unhighlight(id))\n    this.stopListening()\n  }\n}\n\nexport namespace HighlightManager {\n  export interface Cache {\n    highlighter: Highlighter.Definition<KeyValue>\n    cellView: CellView\n    magnet: Element\n    args: KeyValue\n  }\n\n  export type Options = Highlighter.NativeItem | Highlighter.ManaualItem\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}