{"ast":null,"code":"import { NumberExt } from '@antv/x6-common';\n/**\n * Routes the edge always to/from a certain side\n */\nexport const oneSide = function (vertices, options, edgeView) {\n  const side = options.side || 'bottom';\n  const padding = NumberExt.normalizeSides(options.padding || 40);\n  const sourceBBox = edgeView.sourceBBox;\n  const targetBBox = edgeView.targetBBox;\n  const sourcePoint = sourceBBox.getCenter();\n  const targetPoint = targetBBox.getCenter();\n  let coord;\n  let dim;\n  let factor;\n  switch (side) {\n    case 'top':\n      factor = -1;\n      coord = 'y';\n      dim = 'height';\n      break;\n    case 'left':\n      factor = -1;\n      coord = 'x';\n      dim = 'width';\n      break;\n    case 'right':\n      factor = 1;\n      coord = 'x';\n      dim = 'width';\n      break;\n    case 'bottom':\n    default:\n      factor = 1;\n      coord = 'y';\n      dim = 'height';\n      break;\n  }\n  // Move the points from the center of the element to outside of it.\n  sourcePoint[coord] += factor * (sourceBBox[dim] / 2 + padding[side]);\n  targetPoint[coord] += factor * (targetBBox[dim] / 2 + padding[side]);\n  // Make edge orthogonal (at least the first and last vertex).\n  if (factor * (sourcePoint[coord] - targetPoint[coord]) > 0) {\n    targetPoint[coord] = sourcePoint[coord];\n  } else {\n    sourcePoint[coord] = targetPoint[coord];\n  }\n  return [sourcePoint.toJSON(), ...vertices, targetPoint.toJSON()];\n};","map":{"version":3,"names":["NumberExt","oneSide","vertices","options","edgeView","side","padding","normalizeSides","sourceBBox","targetBBox","sourcePoint","getCenter","targetPoint","coord","dim","factor","toJSON"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/router/oneside.ts"],"sourcesContent":["import { NumberExt } from '@antv/x6-common'\nimport { PaddingOptions } from './util'\nimport { Router } from './index'\n\nexport interface OneSideRouterOptions extends PaddingOptions {\n  side?: 'left' | 'top' | 'right' | 'bottom'\n}\n\n/**\n * Routes the edge always to/from a certain side\n */\nexport const oneSide: Router.Definition<OneSideRouterOptions> = function (\n  vertices,\n  options,\n  edgeView,\n) {\n  const side = options.side || 'bottom'\n  const padding = NumberExt.normalizeSides(options.padding || 40)\n  const sourceBBox = edgeView.sourceBBox\n  const targetBBox = edgeView.targetBBox\n  const sourcePoint = sourceBBox.getCenter()\n  const targetPoint = targetBBox.getCenter()\n\n  let coord: 'x' | 'y'\n  let dim: 'width' | 'height'\n  let factor\n\n  switch (side) {\n    case 'top':\n      factor = -1\n      coord = 'y'\n      dim = 'height'\n      break\n    case 'left':\n      factor = -1\n      coord = 'x'\n      dim = 'width'\n      break\n    case 'right':\n      factor = 1\n      coord = 'x'\n      dim = 'width'\n      break\n    case 'bottom':\n    default:\n      factor = 1\n      coord = 'y'\n      dim = 'height'\n      break\n  }\n\n  // Move the points from the center of the element to outside of it.\n  sourcePoint[coord] += factor * (sourceBBox[dim] / 2 + padding[side])\n  targetPoint[coord] += factor * (targetBBox[dim] / 2 + padding[side])\n\n  // Make edge orthogonal (at least the first and last vertex).\n  if (factor * (sourcePoint[coord] - targetPoint[coord]) > 0) {\n    targetPoint[coord] = sourcePoint[coord]\n  } else {\n    sourcePoint[coord] = targetPoint[coord]\n  }\n\n  return [sourcePoint.toJSON(), ...vertices, targetPoint.toJSON()]\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAQ3C;;;AAGA,OAAO,MAAMC,OAAO,GAA4C,SAAAA,CAC9DC,QAAQ,EACRC,OAAO,EACPC,QAAQ;EAER,MAAMC,IAAI,GAAGF,OAAO,CAACE,IAAI,IAAI,QAAQ;EACrC,MAAMC,OAAO,GAAGN,SAAS,CAACO,cAAc,CAACJ,OAAO,CAACG,OAAO,IAAI,EAAE,CAAC;EAC/D,MAAME,UAAU,GAAGJ,QAAQ,CAACI,UAAU;EACtC,MAAMC,UAAU,GAAGL,QAAQ,CAACK,UAAU;EACtC,MAAMC,WAAW,GAAGF,UAAU,CAACG,SAAS,EAAE;EAC1C,MAAMC,WAAW,GAAGH,UAAU,CAACE,SAAS,EAAE;EAE1C,IAAIE,KAAgB;EACpB,IAAIC,GAAuB;EAC3B,IAAIC,MAAM;EAEV,QAAQV,IAAI;IACV,KAAK,KAAK;MACRU,MAAM,GAAG,CAAC,CAAC;MACXF,KAAK,GAAG,GAAG;MACXC,GAAG,GAAG,QAAQ;MACd;IACF,KAAK,MAAM;MACTC,MAAM,GAAG,CAAC,CAAC;MACXF,KAAK,GAAG,GAAG;MACXC,GAAG,GAAG,OAAO;MACb;IACF,KAAK,OAAO;MACVC,MAAM,GAAG,CAAC;MACVF,KAAK,GAAG,GAAG;MACXC,GAAG,GAAG,OAAO;MACb;IACF,KAAK,QAAQ;IACb;MACEC,MAAM,GAAG,CAAC;MACVF,KAAK,GAAG,GAAG;MACXC,GAAG,GAAG,QAAQ;MACd;;EAGJ;EACAJ,WAAW,CAACG,KAAK,CAAC,IAAIE,MAAM,IAAIP,UAAU,CAACM,GAAG,CAAC,GAAG,CAAC,GAAGR,OAAO,CAACD,IAAI,CAAC,CAAC;EACpEO,WAAW,CAACC,KAAK,CAAC,IAAIE,MAAM,IAAIN,UAAU,CAACK,GAAG,CAAC,GAAG,CAAC,GAAGR,OAAO,CAACD,IAAI,CAAC,CAAC;EAEpE;EACA,IAAIU,MAAM,IAAIL,WAAW,CAACG,KAAK,CAAC,GAAGD,WAAW,CAACC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;IAC1DD,WAAW,CAACC,KAAK,CAAC,GAAGH,WAAW,CAACG,KAAK,CAAC;GACxC,MAAM;IACLH,WAAW,CAACG,KAAK,CAAC,GAAGD,WAAW,CAACC,KAAK,CAAC;;EAGzC,OAAO,CAACH,WAAW,CAACM,MAAM,EAAE,EAAE,GAAGd,QAAQ,EAAEU,WAAW,CAACI,MAAM,EAAE,CAAC;AAClE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}