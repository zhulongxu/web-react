{"ast":null,"code":"import { FunctionExt } from '@antv/x6-common';\nimport { Registry } from '../registry';\nimport { raw } from './raw';\nimport * as attrs from './main';\nexport var Attr;\n(function (Attr) {\n  function isValidDefinition(def, val, options) {\n    if (def != null) {\n      if (typeof def === 'string') {\n        return true;\n      }\n      if (typeof def.qualify !== 'function' || FunctionExt.call(def.qualify, this, val, options)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  Attr.isValidDefinition = isValidDefinition;\n})(Attr || (Attr = {}));\n(function (Attr) {\n  Attr.presets = Object.assign(Object.assign({}, raw), attrs);\n  Attr.registry = Registry.create({\n    type: 'attribute definition'\n  });\n  Attr.registry.register(Attr.presets, true);\n})(Attr || (Attr = {}));","map":{"version":3,"names":["FunctionExt","Registry","raw","attrs","Attr","isValidDefinition","def","val","options","qualify","call","presets","Object","assign","registry","create","type","register"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/attr/index.ts"],"sourcesContent":["import { Rectangle, Point } from '@antv/x6-geometry'\nimport { JSONObject, FunctionExt } from '@antv/x6-common'\nimport { Registry } from '../registry'\nimport { Cell } from '../../model'\nimport { CellView } from '../../view'\nimport { raw } from './raw'\nimport * as attrs from './main'\n\nexport namespace Attr {\n  export type SimpleAttrValue = null | undefined | string | number\n\n  export type SimpleAttrs = { [name: string]: SimpleAttrValue }\n\n  export type ComplexAttrValue =\n    | null\n    | undefined\n    | boolean\n    | string\n    | number\n    | JSONObject\n\n  export type ComplexAttrs = { [name: string]: ComplexAttrValue }\n\n  export type CellAttrs = { [selector: string]: ComplexAttrs }\n}\n\nexport namespace Attr {\n  export interface QualifyOptions {\n    elem: Element\n    attrs: ComplexAttrs\n    cell: Cell\n    view: CellView\n  }\n\n  export type QualifyFucntion = (\n    this: CellView,\n    val: ComplexAttrValue,\n    options: QualifyOptions,\n  ) => boolean\n\n  export interface Options extends QualifyOptions {\n    refBBox: Rectangle\n  }\n\n  export type SetFunction = (\n    this: CellView,\n    val: ComplexAttrValue,\n    options: Options,\n  ) => SimpleAttrValue | SimpleAttrs | void\n\n  export type OffsetFunction = (\n    this: CellView,\n    val: ComplexAttrValue,\n    options: Options,\n  ) => Point.PointLike\n\n  export type PositionFunction = (\n    this: CellView,\n    val: ComplexAttrValue,\n    options: Options,\n  ) => Point.PointLike | undefined | null\n\n  export interface Qualify {\n    qualify?: QualifyFucntion\n  }\n\n  export interface SetDefinition extends Qualify {\n    set: SetFunction\n  }\n\n  export interface OffsetDefinition extends Qualify {\n    offset: OffsetFunction\n  }\n\n  export interface PositionDefinition extends Qualify {\n    /**\n     * Returns a point from the reference bounding box.\n     */\n    position: PositionFunction\n  }\n\n  export type Definition =\n    | string\n    | Qualify\n    | SetDefinition\n    | OffsetDefinition\n    | PositionDefinition\n\n  export type Definitions = { [attrName: string]: Definition }\n\n  export type GetDefinition = (name: string) => Definition | null | undefined\n}\n\nexport namespace Attr {\n  export function isValidDefinition(\n    this: CellView,\n    def: Definition | undefined | null,\n    val: ComplexAttrValue,\n    options: QualifyOptions,\n  ): def is Definition {\n    if (def != null) {\n      if (typeof def === 'string') {\n        return true\n      }\n\n      if (\n        typeof def.qualify !== 'function' ||\n        FunctionExt.call(def.qualify, this, val, options)\n      ) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nexport namespace Attr {\n  export type Presets = (typeof Attr)['presets']\n  export type NativeNames = keyof Presets\n}\n\nexport namespace Attr {\n  export const presets: Definitions = {\n    ...raw,\n    ...attrs,\n  }\n\n  export const registry = Registry.create<Definition, Presets>({\n    type: 'attribute definition',\n  })\n\n  registry.register(Attr.presets, true)\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,iBAAiB;AACzD,SAASC,QAAQ,QAAQ,aAAa;AAGtC,SAASC,GAAG,QAAQ,OAAO;AAC3B,OAAO,KAAKC,KAAK,MAAM,QAAQ;AAuF/B,OAAM,IAAWC,IAAI;AAArB,WAAiBA,IAAI;EACnB,SAAgBC,iBAAiBA,CAE/BC,GAAkC,EAClCC,GAAqB,EACrBC,OAAuB;IAEvB,IAAIF,GAAG,IAAI,IAAI,EAAE;MACf,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAO,IAAI;;MAGb,IACE,OAAOA,GAAG,CAACG,OAAO,KAAK,UAAU,IACjCT,WAAW,CAACU,IAAI,CAACJ,GAAG,CAACG,OAAO,EAAE,IAAI,EAAEF,GAAG,EAAEC,OAAO,CAAC,EACjD;QACA,OAAO,IAAI;;;IAIf,OAAO,KAAK;EACd;EApBgBJ,IAAA,CAAAC,iBAAiB,GAAAA,iBAoBhC;AACH,CAAC,EAtBgBD,IAAI,KAAJA,IAAI;AA6BrB,WAAiBA,IAAI;EACNA,IAAA,CAAAO,OAAO,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACfX,GAAG,GACHC,KAAK,CACT;EAEYC,IAAA,CAAAU,QAAQ,GAAGb,QAAQ,CAACc,MAAM,CAAsB;IAC3DC,IAAI,EAAE;GACP,CAAC;EAEFZ,IAAA,CAAAU,QAAQ,CAACG,QAAQ,CAACb,IAAI,CAACO,OAAO,EAAE,IAAI,CAAC;AACvC,CAAC,EAXgBP,IAAI,KAAJA,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}