{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Path } from '@antv/x6-geometry';\nimport { normalize } from './util';\nexport const async = _a => {\n  var {\n      width,\n      height,\n      offset,\n      open,\n      flip\n    } = _a,\n    attrs = __rest(_a, [\"width\", \"height\", \"offset\", \"open\", \"flip\"]);\n  let h = height || 6;\n  const w = width || 10;\n  const opened = open === true;\n  const fliped = flip === true;\n  const result = Object.assign(Object.assign({}, attrs), {\n    tagName: 'path'\n  });\n  if (fliped) {\n    h = -h;\n  }\n  const path = new Path();\n  path.moveTo(0, h).lineTo(w, 0);\n  if (!opened) {\n    path.lineTo(w, h);\n    path.close();\n  } else {\n    result.fill = 'none';\n  }\n  result.d = normalize(path.serialize(), {\n    x: offset || -w / 2,\n    y: h / 2\n  });\n  return result;\n};","map":{"version":3,"names":["Path","normalize","async","_a","width","height","offset","open","flip","attrs","__rest","h","w","opened","fliped","result","Object","assign","tagName","path","moveTo","lineTo","close","fill","d","serialize","x","y"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/marker/async.ts"],"sourcesContent":["import { Path } from '@antv/x6-geometry'\nimport { KeyValue } from '@antv/x6-common'\nimport { normalize } from './util'\nimport { Marker } from './index'\n\nexport interface AsyncMarkerOptions extends KeyValue {\n  width?: number\n  height?: number\n  offset?: number\n  open?: boolean\n  flip?: boolean\n}\n\nexport const async: Marker.Factory<AsyncMarkerOptions> = ({\n  width,\n  height,\n  offset,\n  open,\n  flip,\n  ...attrs\n}) => {\n  let h = height || 6\n  const w = width || 10\n  const opened = open === true\n  const fliped = flip === true\n  const result: Marker.Result = { ...attrs, tagName: 'path' }\n\n  if (fliped) {\n    h = -h\n  }\n\n  const path = new Path()\n\n  path.moveTo(0, h).lineTo(w, 0)\n\n  if (!opened) {\n    path.lineTo(w, h)\n    path.close()\n  } else {\n    result.fill = 'none'\n  }\n\n  result.d = normalize(path.serialize(), {\n    x: offset || -w / 2,\n    y: h / 2,\n  })\n\n  return result\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,IAAI,QAAQ,mBAAmB;AAExC,SAASC,SAAS,QAAQ,QAAQ;AAWlC,OAAO,MAAMC,KAAK,GAAwCC,EAOzD,IAAI;MAPqD;MACxDC,KAAK;MACLC,MAAM;MACNC,MAAM;MACNC,IAAI;MACJC;IAAI,IAAAL,EAEL;IADIM,KAAK,GAAAC,MAAA,CAAAP,EAAA,EANgD,6CAOzD,CADS;EAER,IAAIQ,CAAC,GAAGN,MAAM,IAAI,CAAC;EACnB,MAAMO,CAAC,GAAGR,KAAK,IAAI,EAAE;EACrB,MAAMS,MAAM,GAAGN,IAAI,KAAK,IAAI;EAC5B,MAAMO,MAAM,GAAGN,IAAI,KAAK,IAAI;EAC5B,MAAMO,MAAM,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAuBR,KAAK;IAAES,OAAO,EAAE;EAAM,EAAE;EAE3D,IAAIJ,MAAM,EAAE;IACVH,CAAC,GAAG,CAACA,CAAC;;EAGR,MAAMQ,IAAI,GAAG,IAAInB,IAAI,EAAE;EAEvBmB,IAAI,CAACC,MAAM,CAAC,CAAC,EAAET,CAAC,CAAC,CAACU,MAAM,CAACT,CAAC,EAAE,CAAC,CAAC;EAE9B,IAAI,CAACC,MAAM,EAAE;IACXM,IAAI,CAACE,MAAM,CAACT,CAAC,EAAED,CAAC,CAAC;IACjBQ,IAAI,CAACG,KAAK,EAAE;GACb,MAAM;IACLP,MAAM,CAACQ,IAAI,GAAG,MAAM;;EAGtBR,MAAM,CAACS,CAAC,GAAGvB,SAAS,CAACkB,IAAI,CAACM,SAAS,EAAE,EAAE;IACrCC,CAAC,EAAEpB,MAAM,IAAI,CAACM,CAAC,GAAG,CAAC;IACnBe,CAAC,EAAEhB,CAAC,GAAG;GACR,CAAC;EAEF,OAAOI,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}