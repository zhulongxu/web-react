{"ast":null,"code":"import { Point } from '@antv/x6-geometry';\nfunction toPercentage(value, max) {\n  if (max === 0) {\n    return '0%';\n  }\n  return `${Math.round(value / max * 100)}%`;\n}\nfunction pin(relative) {\n  const strategy = (terminal, view, magnet, coords) => {\n    return view.isEdgeElement(magnet) ? pinEdgeTerminal(relative, terminal, view, magnet, coords) : pinNodeTerminal(relative, terminal, view, magnet, coords);\n  };\n  return strategy;\n}\nfunction pinNodeTerminal(relative, data, view, magnet, coords) {\n  const node = view.cell;\n  const angle = node.getAngle();\n  const bbox = view.getUnrotatedBBoxOfElement(magnet);\n  const center = node.getBBox().getCenter();\n  const pos = Point.create(coords).rotate(angle, center);\n  let dx = pos.x - bbox.x;\n  let dy = pos.y - bbox.y;\n  if (relative) {\n    dx = toPercentage(dx, bbox.width);\n    dy = toPercentage(dy, bbox.height);\n  }\n  data.anchor = {\n    name: 'topLeft',\n    args: {\n      dx,\n      dy,\n      rotate: true\n    }\n  };\n  return data;\n}\nfunction pinEdgeTerminal(relative, end, view, magnet, coords) {\n  const connection = view.getConnection();\n  if (!connection) {\n    return end;\n  }\n  const length = connection.closestPointLength(coords);\n  if (relative) {\n    const totalLength = connection.length();\n    end.anchor = {\n      name: 'ratio',\n      args: {\n        ratio: length / totalLength\n      }\n    };\n  } else {\n    end.anchor = {\n      name: 'length',\n      args: {\n        length\n      }\n    };\n  }\n  return end;\n}\nexport const pinRelative = pin(true);\nexport const pinAbsolute = pin(false);","map":{"version":3,"names":["Point","toPercentage","value","max","Math","round","pin","relative","strategy","terminal","view","magnet","coords","isEdgeElement","pinEdgeTerminal","pinNodeTerminal","data","node","cell","angle","getAngle","bbox","getUnrotatedBBoxOfElement","center","getBBox","getCenter","pos","create","rotate","dx","x","dy","y","width","height","anchor","name","args","end","connection","getConnection","length","closestPointLength","totalLength","ratio","pinRelative","pinAbsolute"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/connection-strategy/pin.ts"],"sourcesContent":["import { Point } from '@antv/x6-geometry'\nimport { Node, Edge } from '../../model'\nimport { EdgeView, NodeView } from '../../view'\nimport { ConnectionStrategy } from './index'\n\nfunction toPercentage(value: number, max: number) {\n  if (max === 0) {\n    return '0%'\n  }\n\n  return `${Math.round((value / max) * 100)}%`\n}\n\nfunction pin(relative: boolean) {\n  const strategy: ConnectionStrategy.Definition = (\n    terminal,\n    view,\n    magnet,\n    coords,\n  ) => {\n    return view.isEdgeElement(magnet)\n      ? pinEdgeTerminal(relative, terminal, view as EdgeView, magnet, coords)\n      : pinNodeTerminal(relative, terminal, view as NodeView, magnet, coords)\n  }\n\n  return strategy\n}\n\nfunction pinNodeTerminal(\n  relative: boolean,\n  data: Edge.TerminalCellData,\n  view: NodeView,\n  magnet: Element,\n  coords: Point.PointLike,\n) {\n  const node = view.cell as Node\n  const angle = node.getAngle()\n  const bbox = view.getUnrotatedBBoxOfElement(magnet as SVGElement)\n  const center = node.getBBox().getCenter()\n  const pos = Point.create(coords).rotate(angle, center)\n\n  let dx: number | string = pos.x - bbox.x\n  let dy: number | string = pos.y - bbox.y\n\n  if (relative) {\n    dx = toPercentage(dx, bbox.width)\n    dy = toPercentage(dy, bbox.height)\n  }\n\n  data.anchor = {\n    name: 'topLeft',\n    args: {\n      dx,\n      dy,\n      rotate: true,\n    },\n  }\n\n  return data\n}\n\nfunction pinEdgeTerminal(\n  relative: boolean,\n  end: Edge.TerminalCellData,\n  view: EdgeView,\n  magnet: Element,\n  coords: Point.PointLike,\n) {\n  const connection = view.getConnection()\n  if (!connection) {\n    return end\n  }\n\n  const length = connection.closestPointLength(coords)\n  if (relative) {\n    const totalLength = connection.length()\n    end.anchor = {\n      name: 'ratio',\n      args: {\n        ratio: length / totalLength,\n      },\n    }\n  } else {\n    end.anchor = {\n      name: 'length',\n      args: {\n        length,\n      },\n    }\n  }\n\n  return end\n}\n\nexport const pinRelative = pin(true)\nexport const pinAbsolute = pin(false)\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,mBAAmB;AAKzC,SAASC,YAAYA,CAACC,KAAa,EAAEC,GAAW;EAC9C,IAAIA,GAAG,KAAK,CAAC,EAAE;IACb,OAAO,IAAI;;EAGb,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEH,KAAK,GAAGC,GAAG,GAAI,GAAG,CAAC,GAAG;AAC9C;AAEA,SAASG,GAAGA,CAACC,QAAiB;EAC5B,MAAMC,QAAQ,GAAkCA,CAC9CC,QAAQ,EACRC,IAAI,EACJC,MAAM,EACNC,MAAM,KACJ;IACF,OAAOF,IAAI,CAACG,aAAa,CAACF,MAAM,CAAC,GAC7BG,eAAe,CAACP,QAAQ,EAAEE,QAAQ,EAAEC,IAAgB,EAAEC,MAAM,EAAEC,MAAM,CAAC,GACrEG,eAAe,CAACR,QAAQ,EAAEE,QAAQ,EAAEC,IAAgB,EAAEC,MAAM,EAAEC,MAAM,CAAC;EAC3E,CAAC;EAED,OAAOJ,QAAQ;AACjB;AAEA,SAASO,eAAeA,CACtBR,QAAiB,EACjBS,IAA2B,EAC3BN,IAAc,EACdC,MAAe,EACfC,MAAuB;EAEvB,MAAMK,IAAI,GAAGP,IAAI,CAACQ,IAAY;EAC9B,MAAMC,KAAK,GAAGF,IAAI,CAACG,QAAQ,EAAE;EAC7B,MAAMC,IAAI,GAAGX,IAAI,CAACY,yBAAyB,CAACX,MAAoB,CAAC;EACjE,MAAMY,MAAM,GAAGN,IAAI,CAACO,OAAO,EAAE,CAACC,SAAS,EAAE;EACzC,MAAMC,GAAG,GAAG1B,KAAK,CAAC2B,MAAM,CAACf,MAAM,CAAC,CAACgB,MAAM,CAACT,KAAK,EAAEI,MAAM,CAAC;EAEtD,IAAIM,EAAE,GAAoBH,GAAG,CAACI,CAAC,GAAGT,IAAI,CAACS,CAAC;EACxC,IAAIC,EAAE,GAAoBL,GAAG,CAACM,CAAC,GAAGX,IAAI,CAACW,CAAC;EAExC,IAAIzB,QAAQ,EAAE;IACZsB,EAAE,GAAG5B,YAAY,CAAC4B,EAAE,EAAER,IAAI,CAACY,KAAK,CAAC;IACjCF,EAAE,GAAG9B,YAAY,CAAC8B,EAAE,EAAEV,IAAI,CAACa,MAAM,CAAC;;EAGpClB,IAAI,CAACmB,MAAM,GAAG;IACZC,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE;MACJR,EAAE;MACFE,EAAE;MACFH,MAAM,EAAE;;GAEX;EAED,OAAOZ,IAAI;AACb;AAEA,SAASF,eAAeA,CACtBP,QAAiB,EACjB+B,GAA0B,EAC1B5B,IAAc,EACdC,MAAe,EACfC,MAAuB;EAEvB,MAAM2B,UAAU,GAAG7B,IAAI,CAAC8B,aAAa,EAAE;EACvC,IAAI,CAACD,UAAU,EAAE;IACf,OAAOD,GAAG;;EAGZ,MAAMG,MAAM,GAAGF,UAAU,CAACG,kBAAkB,CAAC9B,MAAM,CAAC;EACpD,IAAIL,QAAQ,EAAE;IACZ,MAAMoC,WAAW,GAAGJ,UAAU,CAACE,MAAM,EAAE;IACvCH,GAAG,CAACH,MAAM,GAAG;MACXC,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE;QACJO,KAAK,EAAEH,MAAM,GAAGE;;KAEnB;GACF,MAAM;IACLL,GAAG,CAACH,MAAM,GAAG;MACXC,IAAI,EAAE,QAAQ;MACdC,IAAI,EAAE;QACJI;;KAEH;;EAGH,OAAOH,GAAG;AACZ;AAEA,OAAO,MAAMO,WAAW,GAAGvC,GAAG,CAAC,IAAI,CAAC;AACpC,OAAO,MAAMwC,WAAW,GAAGxC,GAAG,CAAC,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}