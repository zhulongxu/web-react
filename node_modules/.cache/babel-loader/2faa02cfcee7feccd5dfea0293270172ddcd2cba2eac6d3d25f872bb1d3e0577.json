{"ast":null,"code":"import { Point } from '@antv/x6-geometry';\nimport { Dom, FunctionExt, NumberExt, ObjectExt } from '@antv/x6-common';\nimport { ToolsView } from '../../view/tool';\nimport { Util } from '../../util';\nexport class CellEditor extends ToolsView.ToolItem {\n  constructor() {\n    super(...arguments);\n    this.labelIndex = -1;\n    this.distance = 0.5;\n    this.dblClick = this.onCellDblClick.bind(this);\n  }\n  onRender() {\n    const cellView = this.cellView;\n    if (cellView) {\n      cellView.on('cell:dblclick', this.dblClick);\n    }\n  }\n  createElement() {\n    const classNames = [this.prefixClassName(`${this.cell.isEdge() ? 'edge' : 'node'}-tool-editor`), this.prefixClassName('cell-tool-editor')];\n    this.editor = ToolsView.createElement('div', false);\n    this.addClass(classNames, this.editor);\n    this.editor.contentEditable = 'true';\n    this.container.appendChild(this.editor);\n  }\n  removeElement() {\n    this.undelegateDocumentEvents();\n    if (this.editor) {\n      this.container.removeChild(this.editor);\n      this.editor = null;\n    }\n  }\n  updateEditor() {\n    const {\n      cell,\n      editor\n    } = this;\n    if (!editor) {\n      return;\n    }\n    const {\n      style\n    } = editor;\n    if (cell.isNode()) {\n      this.updateNodeEditorTransform();\n    } else if (cell.isEdge()) {\n      this.updateEdgeEditorTransform();\n    }\n    // set font style\n    const {\n      attrs\n    } = this.options;\n    style.fontSize = `${attrs.fontSize}px`;\n    style.fontFamily = attrs.fontFamily;\n    style.color = attrs.color;\n    style.backgroundColor = attrs.backgroundColor;\n    // set init value\n    const text = this.getCellText() || '';\n    editor.innerText = text;\n    this.setCellText(''); // clear display value when edit status because char ghosting.\n    return this;\n  }\n  updateNodeEditorTransform() {\n    const {\n      graph,\n      cell,\n      editor\n    } = this;\n    if (!editor) {\n      return;\n    }\n    let pos = Point.create();\n    let minWidth = 20;\n    let translate = '';\n    let {\n      x,\n      y\n    } = this.options;\n    const {\n      width,\n      height\n    } = this.options;\n    if (typeof x !== 'undefined' && typeof y !== 'undefined') {\n      const bbox = cell.getBBox();\n      x = NumberExt.normalizePercentage(x, bbox.width);\n      y = NumberExt.normalizePercentage(y, bbox.height);\n      pos = bbox.topLeft.translate(x, y);\n      minWidth = bbox.width - x * 2;\n    } else {\n      const bbox = cell.getBBox();\n      pos = bbox.center;\n      minWidth = bbox.width - 4;\n      translate = 'translate(-50%, -50%)';\n    }\n    const scale = graph.scale();\n    const {\n      style\n    } = editor;\n    pos = graph.localToGraph(pos);\n    style.left = `${pos.x}px`;\n    style.top = `${pos.y}px`;\n    style.transform = `scale(${scale.sx}, ${scale.sy}) ${translate}`;\n    style.minWidth = `${minWidth}px`;\n    if (typeof width === 'number') {\n      style.width = `${width}px`;\n    }\n    if (typeof height === 'number') {\n      style.height = `${height}px`;\n    }\n  }\n  updateEdgeEditorTransform() {\n    if (!this.event) {\n      return;\n    }\n    const {\n      graph,\n      editor\n    } = this;\n    if (!editor) {\n      return;\n    }\n    let pos = Point.create();\n    let minWidth = 20;\n    const {\n      style\n    } = editor;\n    const target = this.event.target;\n    const parent = target.parentElement;\n    const isEdgeLabel = parent && Dom.hasClass(parent, this.prefixClassName('edge-label'));\n    if (isEdgeLabel) {\n      const index = parent.getAttribute('data-index') || '0';\n      this.labelIndex = parseInt(index, 10);\n      const matrix = parent.getAttribute('transform');\n      const {\n        translation\n      } = Dom.parseTransformString(matrix);\n      pos = new Point(translation.tx, translation.ty);\n      minWidth = Util.getBBox(target).width;\n    } else {\n      if (!this.options.labelAddable) {\n        return this;\n      }\n      pos = graph.clientToLocal(Point.create(this.event.clientX, this.event.clientY));\n      const view = this.cellView;\n      const d = view.path.closestPointLength(pos);\n      this.distance = d;\n      this.labelIndex = -1;\n    }\n    pos = graph.localToGraph(pos);\n    const scale = graph.scale();\n    style.left = `${pos.x}px`;\n    style.top = `${pos.y}px`;\n    style.minWidth = `${minWidth}px`;\n    style.transform = `scale(${scale.sx}, ${scale.sy}) translate(-50%, -50%)`;\n  }\n  onDocumentMouseUp(e) {\n    if (this.editor && e.target !== this.editor) {\n      const value = this.editor.innerText.replace(/\\n$/, '') || '';\n      // set value, when value is null, we will remove label in edge\n      this.setCellText(value !== '' ? value : null);\n      // remove tool\n      this.removeElement();\n    }\n  }\n  onCellDblClick({\n    e\n  }) {\n    if (!this.editor) {\n      e.stopPropagation();\n      this.removeElement();\n      this.event = e;\n      this.createElement();\n      this.updateEditor();\n      this.autoFocus();\n      this.delegateDocumentEvents(this.options.documentEvents);\n    }\n  }\n  onMouseDown(e) {\n    e.stopPropagation();\n  }\n  autoFocus() {\n    setTimeout(() => {\n      if (this.editor) {\n        this.editor.focus();\n        this.selectText();\n      }\n    });\n  }\n  selectText() {\n    if (window.getSelection && this.editor) {\n      const range = document.createRange();\n      const selection = window.getSelection();\n      range.selectNodeContents(this.editor);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n  getCellText() {\n    const {\n      getText\n    } = this.options;\n    if (typeof getText === 'function') {\n      return FunctionExt.call(getText, this.cellView, {\n        cell: this.cell,\n        index: this.labelIndex\n      });\n    }\n    if (typeof getText === 'string') {\n      if (this.cell.isNode()) {\n        return this.cell.attr(getText);\n      }\n      if (this.cell.isEdge()) {\n        if (this.labelIndex !== -1) {\n          return this.cell.prop(`labels/${this.labelIndex}/attrs/${getText}`);\n        }\n      }\n    }\n  }\n  setCellText(value) {\n    const setText = this.options.setText;\n    if (typeof setText === 'function') {\n      FunctionExt.call(setText, this.cellView, {\n        cell: this.cell,\n        value,\n        index: this.labelIndex,\n        distance: this.distance\n      });\n      return;\n    }\n    if (typeof setText === 'string') {\n      if (this.cell.isNode()) {\n        if (value !== null) {\n          this.cell.attr(setText, value);\n        }\n        return;\n      }\n      if (this.cell.isEdge()) {\n        const edge = this.cell;\n        if (this.labelIndex === -1) {\n          if (value) {\n            const newLabel = {\n              position: {\n                distance: this.distance\n              },\n              attrs: {}\n            };\n            ObjectExt.setByPath(newLabel, `attrs/${setText}`, value);\n            edge.appendLabel(newLabel);\n          }\n        } else {\n          if (value !== null) {\n            edge.prop(`labels/${this.labelIndex}/attrs/${setText}`, value);\n          } else if (typeof this.labelIndex === 'number') {\n            edge.removeLabelAt(this.labelIndex);\n          }\n        }\n      }\n    }\n  }\n  onRemove() {\n    const cellView = this.cellView;\n    if (cellView) {\n      cellView.off('cell:dblclick', this.dblClick);\n    }\n    this.removeElement();\n  }\n}\n(function (CellEditor) {\n  CellEditor.config({\n    tagName: 'div',\n    isSVGElement: false,\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    },\n    documentEvents: {\n      mouseup: 'onDocumentMouseUp',\n      touchend: 'onDocumentMouseUp',\n      touchcancel: 'onDocumentMouseUp'\n    }\n  });\n})(CellEditor || (CellEditor = {}));\n(function (CellEditor) {\n  CellEditor.NodeEditor = CellEditor.define({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff'\n    },\n    getText: 'text/text',\n    setText: 'text/text'\n  });\n  CellEditor.EdgeEditor = CellEditor.define({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff'\n    },\n    labelAddable: true,\n    getText: 'label/text',\n    setText: 'label/text'\n  });\n})(CellEditor || (CellEditor = {}));","map":{"version":3,"names":["Point","Dom","FunctionExt","NumberExt","ObjectExt","ToolsView","Util","CellEditor","ToolItem","constructor","labelIndex","distance","dblClick","onCellDblClick","bind","onRender","cellView","on","createElement","classNames","prefixClassName","cell","isEdge","editor","addClass","contentEditable","container","appendChild","removeElement","undelegateDocumentEvents","removeChild","updateEditor","style","isNode","updateNodeEditorTransform","updateEdgeEditorTransform","attrs","options","fontSize","fontFamily","color","backgroundColor","text","getCellText","innerText","setCellText","graph","pos","create","minWidth","translate","x","y","width","height","bbox","getBBox","normalizePercentage","topLeft","center","scale","localToGraph","left","top","transform","sx","sy","event","target","parent","parentElement","isEdgeLabel","hasClass","index","getAttribute","parseInt","matrix","translation","parseTransformString","tx","ty","labelAddable","clientToLocal","clientX","clientY","view","d","path","closestPointLength","onDocumentMouseUp","e","value","replace","stopPropagation","autoFocus","delegateDocumentEvents","documentEvents","onMouseDown","setTimeout","focus","selectText","window","getSelection","range","document","createRange","selection","selectNodeContents","removeAllRanges","addRange","getText","call","attr","prop","setText","edge","newLabel","position","setByPath","appendLabel","removeLabelAt","onRemove","off","config","tagName","isSVGElement","events","mousedown","touchstart","mouseup","touchend","touchcancel","NodeEditor","define","EdgeEditor"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/tool/editor.ts"],"sourcesContent":["import { Point } from '@antv/x6-geometry'\nimport { Dom, FunctionExt, NumberExt, ObjectExt } from '@antv/x6-common'\nimport { ToolsView } from '../../view/tool'\nimport { Cell, Edge } from '../../model'\nimport { CellView, NodeView, EdgeView } from '../../view'\nimport { Util } from '../../util'\n\nexport class CellEditor extends ToolsView.ToolItem<\n  NodeView | EdgeView,\n  CellEditor.CellEditorOptions & { event: Dom.EventObject }\n> {\n  private editor: HTMLDivElement | null\n  private labelIndex = -1\n  private distance = 0.5\n  private event: Dom.DoubleClickEvent\n  private dblClick = this.onCellDblClick.bind(this)\n\n  onRender() {\n    const cellView = this.cellView as CellView\n    if (cellView) {\n      cellView.on('cell:dblclick', this.dblClick)\n    }\n  }\n\n  createElement() {\n    const classNames = [\n      this.prefixClassName(\n        `${this.cell.isEdge() ? 'edge' : 'node'}-tool-editor`,\n      ),\n      this.prefixClassName('cell-tool-editor'),\n    ]\n    this.editor = ToolsView.createElement('div', false) as HTMLDivElement\n    this.addClass(classNames, this.editor)\n    this.editor.contentEditable = 'true'\n    this.container.appendChild(this.editor)\n  }\n\n  removeElement() {\n    this.undelegateDocumentEvents()\n    if (this.editor) {\n      this.container.removeChild(this.editor)\n      this.editor = null\n    }\n  }\n\n  updateEditor() {\n    const { cell, editor } = this\n\n    if (!editor) {\n      return\n    }\n\n    const { style } = editor\n\n    if (cell.isNode()) {\n      this.updateNodeEditorTransform()\n    } else if (cell.isEdge()) {\n      this.updateEdgeEditorTransform()\n    }\n\n    // set font style\n    const { attrs } = this.options\n    style.fontSize = `${attrs.fontSize}px`\n    style.fontFamily = attrs.fontFamily\n    style.color = attrs.color\n    style.backgroundColor = attrs.backgroundColor\n\n    // set init value\n    const text = this.getCellText() || ''\n    editor.innerText = text\n    this.setCellText('') // clear display value when edit status because char ghosting.\n\n    return this\n  }\n\n  updateNodeEditorTransform() {\n    const { graph, cell, editor } = this\n\n    if (!editor) {\n      return\n    }\n\n    let pos = Point.create()\n    let minWidth = 20\n    let translate = ''\n    let { x, y } = this.options\n    const { width, height } = this.options\n\n    if (typeof x !== 'undefined' && typeof y !== 'undefined') {\n      const bbox = cell.getBBox()\n      x = NumberExt.normalizePercentage(x, bbox.width)\n      y = NumberExt.normalizePercentage(y, bbox.height)\n      pos = bbox.topLeft.translate(x, y)\n      minWidth = bbox.width - x * 2\n    } else {\n      const bbox = cell.getBBox()\n      pos = bbox.center\n      minWidth = bbox.width - 4\n      translate = 'translate(-50%, -50%)'\n    }\n\n    const scale = graph.scale()\n    const { style } = editor\n    pos = graph.localToGraph(pos)\n    style.left = `${pos.x}px`\n    style.top = `${pos.y}px`\n    style.transform = `scale(${scale.sx}, ${scale.sy}) ${translate}`\n    style.minWidth = `${minWidth}px`\n\n    if (typeof width === 'number') {\n      style.width = `${width}px`\n    }\n    if (typeof height === 'number') {\n      style.height = `${height}px`\n    }\n  }\n\n  updateEdgeEditorTransform() {\n    if (!this.event) {\n      return\n    }\n\n    const { graph, editor } = this\n    if (!editor) {\n      return\n    }\n\n    let pos = Point.create()\n    let minWidth = 20\n    const { style } = editor\n    const target = this.event.target\n    const parent = target.parentElement\n    const isEdgeLabel =\n      parent && Dom.hasClass(parent, this.prefixClassName('edge-label'))\n    if (isEdgeLabel) {\n      const index = parent.getAttribute('data-index') || '0'\n      this.labelIndex = parseInt(index, 10)\n      const matrix = parent.getAttribute('transform')\n      const { translation } = Dom.parseTransformString(matrix)\n      pos = new Point(translation.tx, translation.ty)\n      minWidth = Util.getBBox(target).width\n    } else {\n      if (!this.options.labelAddable) {\n        return this\n      }\n      pos = graph.clientToLocal(\n        Point.create(this.event.clientX, this.event.clientY),\n      )\n      const view = this.cellView as EdgeView\n      const d = view.path.closestPointLength(pos)\n      this.distance = d\n      this.labelIndex = -1\n    }\n\n    pos = graph.localToGraph(pos)\n    const scale = graph.scale()\n    style.left = `${pos.x}px`\n    style.top = `${pos.y}px`\n    style.minWidth = `${minWidth}px`\n    style.transform = `scale(${scale.sx}, ${scale.sy}) translate(-50%, -50%)`\n  }\n\n  onDocumentMouseUp(e: Dom.MouseDownEvent) {\n    if (this.editor && e.target !== this.editor) {\n      const value = this.editor.innerText.replace(/\\n$/, '') || ''\n      // set value, when value is null, we will remove label in edge\n      this.setCellText(value !== '' ? value : null)\n      // remove tool\n      this.removeElement()\n    }\n  }\n\n  onCellDblClick({ e }: { e: Dom.DoubleClickEvent }) {\n    if (!this.editor) {\n      e.stopPropagation()\n      this.removeElement()\n      this.event = e\n      this.createElement()\n      this.updateEditor()\n      this.autoFocus()\n      this.delegateDocumentEvents(this.options.documentEvents!)\n    }\n  }\n\n  onMouseDown(e: Dom.MouseDownEvent) {\n    e.stopPropagation()\n  }\n\n  autoFocus() {\n    setTimeout(() => {\n      if (this.editor) {\n        this.editor.focus()\n        this.selectText()\n      }\n    })\n  }\n\n  selectText() {\n    if (window.getSelection && this.editor) {\n      const range = document.createRange()\n      const selection = window.getSelection()!\n      range.selectNodeContents(this.editor)\n      selection.removeAllRanges()\n      selection.addRange(range)\n    }\n  }\n\n  getCellText() {\n    const { getText } = this.options\n    if (typeof getText === 'function') {\n      return FunctionExt.call(getText, this.cellView, {\n        cell: this.cell,\n        index: this.labelIndex,\n      })\n    }\n    if (typeof getText === 'string') {\n      if (this.cell.isNode()) {\n        return this.cell.attr(getText)\n      }\n      if (this.cell.isEdge()) {\n        if (this.labelIndex !== -1) {\n          return this.cell.prop(`labels/${this.labelIndex}/attrs/${getText}`)\n        }\n      }\n    }\n  }\n\n  setCellText(value: string | null) {\n    const setText = this.options.setText\n    if (typeof setText === 'function') {\n      FunctionExt.call(setText, this.cellView, {\n        cell: this.cell,\n        value,\n        index: this.labelIndex,\n        distance: this.distance,\n      })\n      return\n    }\n    if (typeof setText === 'string') {\n      if (this.cell.isNode()) {\n        if (value !== null) {\n          this.cell.attr(setText, value)\n        }\n        return\n      }\n      if (this.cell.isEdge()) {\n        const edge = this.cell as Edge\n        if (this.labelIndex === -1) {\n          if (value) {\n            const newLabel = {\n              position: {\n                distance: this.distance,\n              },\n              attrs: {},\n            }\n            ObjectExt.setByPath(newLabel, `attrs/${setText}`, value)\n            edge.appendLabel(newLabel)\n          }\n        } else {\n          if (value !== null) {\n            edge.prop(`labels/${this.labelIndex}/attrs/${setText}`, value)\n          } else if (typeof this.labelIndex === 'number') {\n            edge.removeLabelAt(this.labelIndex)\n          }\n        }\n      }\n    }\n  }\n\n  protected onRemove() {\n    const cellView = this.cellView as CellView\n    if (cellView) {\n      cellView.off('cell:dblclick', this.dblClick)\n    }\n    this.removeElement()\n  }\n}\n\nexport namespace CellEditor {\n  export interface CellEditorOptions extends ToolsView.ToolItem.Options {\n    x?: number | string\n    y?: number | string\n    width?: number\n    height?: number\n    attrs: {\n      fontSize: number\n      fontFamily: string\n      color: string\n      backgroundColor: string\n    }\n    labelAddable?: boolean\n    getText:\n      | ((\n          this: CellView,\n          args: {\n            cell: Cell\n            index?: number\n          },\n        ) => string)\n      | string\n    setText:\n      | ((\n          this: CellView,\n          args: {\n            cell: Cell\n            value: string | null\n            index?: number\n            distance?: number\n          },\n        ) => void)\n      | string\n  }\n}\n\nexport namespace CellEditor {\n  CellEditor.config({\n    tagName: 'div',\n    isSVGElement: false,\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown',\n    },\n    documentEvents: {\n      mouseup: 'onDocumentMouseUp',\n      touchend: 'onDocumentMouseUp',\n      touchcancel: 'onDocumentMouseUp',\n    },\n  })\n}\n\nexport namespace CellEditor {\n  export const NodeEditor = CellEditor.define<CellEditorOptions>({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff',\n    },\n    getText: 'text/text',\n    setText: 'text/text',\n  })\n\n  export const EdgeEditor = CellEditor.define<CellEditorOptions>({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff',\n    },\n    labelAddable: true,\n    getText: 'label/text',\n    setText: 'label/text',\n  })\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,mBAAmB;AACzC,SAASC,GAAG,EAAEC,WAAW,EAAEC,SAAS,EAAEC,SAAS,QAAQ,iBAAiB;AACxE,SAASC,SAAS,QAAQ,iBAAiB;AAG3C,SAASC,IAAI,QAAQ,YAAY;AAEjC,OAAM,MAAOC,UAAW,SAAQF,SAAS,CAACG,QAGzC;EAHDC,YAAA;;IAKU,KAAAC,UAAU,GAAG,CAAC,CAAC;IACf,KAAAC,QAAQ,GAAG,GAAG;IAEd,KAAAC,QAAQ,GAAG,IAAI,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;EAqQnD;EAnQEC,QAAQA,CAAA;IACN,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAoB;IAC1C,IAAIA,QAAQ,EAAE;MACZA,QAAQ,CAACC,EAAE,CAAC,eAAe,EAAE,IAAI,CAACL,QAAQ,CAAC;;EAE/C;EAEAM,aAAaA,CAAA;IACX,MAAMC,UAAU,GAAG,CACjB,IAAI,CAACC,eAAe,CAClB,GAAG,IAAI,CAACC,IAAI,CAACC,MAAM,EAAE,GAAG,MAAM,GAAG,MAAM,cAAc,CACtD,EACD,IAAI,CAACF,eAAe,CAAC,kBAAkB,CAAC,CACzC;IACD,IAAI,CAACG,MAAM,GAAGlB,SAAS,CAACa,aAAa,CAAC,KAAK,EAAE,KAAK,CAAmB;IACrE,IAAI,CAACM,QAAQ,CAACL,UAAU,EAAE,IAAI,CAACI,MAAM,CAAC;IACtC,IAAI,CAACA,MAAM,CAACE,eAAe,GAAG,MAAM;IACpC,IAAI,CAACC,SAAS,CAACC,WAAW,CAAC,IAAI,CAACJ,MAAM,CAAC;EACzC;EAEAK,aAAaA,CAAA;IACX,IAAI,CAACC,wBAAwB,EAAE;IAC/B,IAAI,IAAI,CAACN,MAAM,EAAE;MACf,IAAI,CAACG,SAAS,CAACI,WAAW,CAAC,IAAI,CAACP,MAAM,CAAC;MACvC,IAAI,CAACA,MAAM,GAAG,IAAI;;EAEtB;EAEAQ,YAAYA,CAAA;IACV,MAAM;MAAEV,IAAI;MAAEE;IAAM,CAAE,GAAG,IAAI;IAE7B,IAAI,CAACA,MAAM,EAAE;MACX;;IAGF,MAAM;MAAES;IAAK,CAAE,GAAGT,MAAM;IAExB,IAAIF,IAAI,CAACY,MAAM,EAAE,EAAE;MACjB,IAAI,CAACC,yBAAyB,EAAE;KACjC,MAAM,IAAIb,IAAI,CAACC,MAAM,EAAE,EAAE;MACxB,IAAI,CAACa,yBAAyB,EAAE;;IAGlC;IACA,MAAM;MAAEC;IAAK,CAAE,GAAG,IAAI,CAACC,OAAO;IAC9BL,KAAK,CAACM,QAAQ,GAAG,GAAGF,KAAK,CAACE,QAAQ,IAAI;IACtCN,KAAK,CAACO,UAAU,GAAGH,KAAK,CAACG,UAAU;IACnCP,KAAK,CAACQ,KAAK,GAAGJ,KAAK,CAACI,KAAK;IACzBR,KAAK,CAACS,eAAe,GAAGL,KAAK,CAACK,eAAe;IAE7C;IACA,MAAMC,IAAI,GAAG,IAAI,CAACC,WAAW,EAAE,IAAI,EAAE;IACrCpB,MAAM,CAACqB,SAAS,GAAGF,IAAI;IACvB,IAAI,CAACG,WAAW,CAAC,EAAE,CAAC,EAAC;IAErB,OAAO,IAAI;EACb;EAEAX,yBAAyBA,CAAA;IACvB,MAAM;MAAEY,KAAK;MAAEzB,IAAI;MAAEE;IAAM,CAAE,GAAG,IAAI;IAEpC,IAAI,CAACA,MAAM,EAAE;MACX;;IAGF,IAAIwB,GAAG,GAAG/C,KAAK,CAACgD,MAAM,EAAE;IACxB,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAI;MAAEC,CAAC;MAAEC;IAAC,CAAE,GAAG,IAAI,CAACf,OAAO;IAC3B,MAAM;MAAEgB,KAAK;MAAEC;IAAM,CAAE,GAAG,IAAI,CAACjB,OAAO;IAEtC,IAAI,OAAOc,CAAC,KAAK,WAAW,IAAI,OAAOC,CAAC,KAAK,WAAW,EAAE;MACxD,MAAMG,IAAI,GAAGlC,IAAI,CAACmC,OAAO,EAAE;MAC3BL,CAAC,GAAGhD,SAAS,CAACsD,mBAAmB,CAACN,CAAC,EAAEI,IAAI,CAACF,KAAK,CAAC;MAChDD,CAAC,GAAGjD,SAAS,CAACsD,mBAAmB,CAACL,CAAC,EAAEG,IAAI,CAACD,MAAM,CAAC;MACjDP,GAAG,GAAGQ,IAAI,CAACG,OAAO,CAACR,SAAS,CAACC,CAAC,EAAEC,CAAC,CAAC;MAClCH,QAAQ,GAAGM,IAAI,CAACF,KAAK,GAAGF,CAAC,GAAG,CAAC;KAC9B,MAAM;MACL,MAAMI,IAAI,GAAGlC,IAAI,CAACmC,OAAO,EAAE;MAC3BT,GAAG,GAAGQ,IAAI,CAACI,MAAM;MACjBV,QAAQ,GAAGM,IAAI,CAACF,KAAK,GAAG,CAAC;MACzBH,SAAS,GAAG,uBAAuB;;IAGrC,MAAMU,KAAK,GAAGd,KAAK,CAACc,KAAK,EAAE;IAC3B,MAAM;MAAE5B;IAAK,CAAE,GAAGT,MAAM;IACxBwB,GAAG,GAAGD,KAAK,CAACe,YAAY,CAACd,GAAG,CAAC;IAC7Bf,KAAK,CAAC8B,IAAI,GAAG,GAAGf,GAAG,CAACI,CAAC,IAAI;IACzBnB,KAAK,CAAC+B,GAAG,GAAG,GAAGhB,GAAG,CAACK,CAAC,IAAI;IACxBpB,KAAK,CAACgC,SAAS,GAAG,SAASJ,KAAK,CAACK,EAAE,KAAKL,KAAK,CAACM,EAAE,KAAKhB,SAAS,EAAE;IAChElB,KAAK,CAACiB,QAAQ,GAAG,GAAGA,QAAQ,IAAI;IAEhC,IAAI,OAAOI,KAAK,KAAK,QAAQ,EAAE;MAC7BrB,KAAK,CAACqB,KAAK,GAAG,GAAGA,KAAK,IAAI;;IAE5B,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;MAC9BtB,KAAK,CAACsB,MAAM,GAAG,GAAGA,MAAM,IAAI;;EAEhC;EAEAnB,yBAAyBA,CAAA;IACvB,IAAI,CAAC,IAAI,CAACgC,KAAK,EAAE;MACf;;IAGF,MAAM;MAAErB,KAAK;MAAEvB;IAAM,CAAE,GAAG,IAAI;IAC9B,IAAI,CAACA,MAAM,EAAE;MACX;;IAGF,IAAIwB,GAAG,GAAG/C,KAAK,CAACgD,MAAM,EAAE;IACxB,IAAIC,QAAQ,GAAG,EAAE;IACjB,MAAM;MAAEjB;IAAK,CAAE,GAAGT,MAAM;IACxB,MAAM6C,MAAM,GAAG,IAAI,CAACD,KAAK,CAACC,MAAM;IAChC,MAAMC,MAAM,GAAGD,MAAM,CAACE,aAAa;IACnC,MAAMC,WAAW,GACfF,MAAM,IAAIpE,GAAG,CAACuE,QAAQ,CAACH,MAAM,EAAE,IAAI,CAACjD,eAAe,CAAC,YAAY,CAAC,CAAC;IACpE,IAAImD,WAAW,EAAE;MACf,MAAME,KAAK,GAAGJ,MAAM,CAACK,YAAY,CAAC,YAAY,CAAC,IAAI,GAAG;MACtD,IAAI,CAAChE,UAAU,GAAGiE,QAAQ,CAACF,KAAK,EAAE,EAAE,CAAC;MACrC,MAAMG,MAAM,GAAGP,MAAM,CAACK,YAAY,CAAC,WAAW,CAAC;MAC/C,MAAM;QAAEG;MAAW,CAAE,GAAG5E,GAAG,CAAC6E,oBAAoB,CAACF,MAAM,CAAC;MACxD7B,GAAG,GAAG,IAAI/C,KAAK,CAAC6E,WAAW,CAACE,EAAE,EAAEF,WAAW,CAACG,EAAE,CAAC;MAC/C/B,QAAQ,GAAG3C,IAAI,CAACkD,OAAO,CAACY,MAAM,CAAC,CAACf,KAAK;KACtC,MAAM;MACL,IAAI,CAAC,IAAI,CAAChB,OAAO,CAAC4C,YAAY,EAAE;QAC9B,OAAO,IAAI;;MAEblC,GAAG,GAAGD,KAAK,CAACoC,aAAa,CACvBlF,KAAK,CAACgD,MAAM,CAAC,IAAI,CAACmB,KAAK,CAACgB,OAAO,EAAE,IAAI,CAAChB,KAAK,CAACiB,OAAO,CAAC,CACrD;MACD,MAAMC,IAAI,GAAG,IAAI,CAACrE,QAAoB;MACtC,MAAMsE,CAAC,GAAGD,IAAI,CAACE,IAAI,CAACC,kBAAkB,CAACzC,GAAG,CAAC;MAC3C,IAAI,CAACpC,QAAQ,GAAG2E,CAAC;MACjB,IAAI,CAAC5E,UAAU,GAAG,CAAC,CAAC;;IAGtBqC,GAAG,GAAGD,KAAK,CAACe,YAAY,CAACd,GAAG,CAAC;IAC7B,MAAMa,KAAK,GAAGd,KAAK,CAACc,KAAK,EAAE;IAC3B5B,KAAK,CAAC8B,IAAI,GAAG,GAAGf,GAAG,CAACI,CAAC,IAAI;IACzBnB,KAAK,CAAC+B,GAAG,GAAG,GAAGhB,GAAG,CAACK,CAAC,IAAI;IACxBpB,KAAK,CAACiB,QAAQ,GAAG,GAAGA,QAAQ,IAAI;IAChCjB,KAAK,CAACgC,SAAS,GAAG,SAASJ,KAAK,CAACK,EAAE,KAAKL,KAAK,CAACM,EAAE,yBAAyB;EAC3E;EAEAuB,iBAAiBA,CAACC,CAAqB;IACrC,IAAI,IAAI,CAACnE,MAAM,IAAImE,CAAC,CAACtB,MAAM,KAAK,IAAI,CAAC7C,MAAM,EAAE;MAC3C,MAAMoE,KAAK,GAAG,IAAI,CAACpE,MAAM,CAACqB,SAAS,CAACgD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE;MAC5D;MACA,IAAI,CAAC/C,WAAW,CAAC8C,KAAK,KAAK,EAAE,GAAGA,KAAK,GAAG,IAAI,CAAC;MAC7C;MACA,IAAI,CAAC/D,aAAa,EAAE;;EAExB;EAEAf,cAAcA,CAAC;IAAE6E;EAAC,CAA+B;IAC/C,IAAI,CAAC,IAAI,CAACnE,MAAM,EAAE;MAChBmE,CAAC,CAACG,eAAe,EAAE;MACnB,IAAI,CAACjE,aAAa,EAAE;MACpB,IAAI,CAACuC,KAAK,GAAGuB,CAAC;MACd,IAAI,CAACxE,aAAa,EAAE;MACpB,IAAI,CAACa,YAAY,EAAE;MACnB,IAAI,CAAC+D,SAAS,EAAE;MAChB,IAAI,CAACC,sBAAsB,CAAC,IAAI,CAAC1D,OAAO,CAAC2D,cAAe,CAAC;;EAE7D;EAEAC,WAAWA,CAACP,CAAqB;IAC/BA,CAAC,CAACG,eAAe,EAAE;EACrB;EAEAC,SAASA,CAAA;IACPI,UAAU,CAAC,MAAK;MACd,IAAI,IAAI,CAAC3E,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAAC4E,KAAK,EAAE;QACnB,IAAI,CAACC,UAAU,EAAE;;IAErB,CAAC,CAAC;EACJ;EAEAA,UAAUA,CAAA;IACR,IAAIC,MAAM,CAACC,YAAY,IAAI,IAAI,CAAC/E,MAAM,EAAE;MACtC,MAAMgF,KAAK,GAAGC,QAAQ,CAACC,WAAW,EAAE;MACpC,MAAMC,SAAS,GAAGL,MAAM,CAACC,YAAY,EAAG;MACxCC,KAAK,CAACI,kBAAkB,CAAC,IAAI,CAACpF,MAAM,CAAC;MACrCmF,SAAS,CAACE,eAAe,EAAE;MAC3BF,SAAS,CAACG,QAAQ,CAACN,KAAK,CAAC;;EAE7B;EAEA5D,WAAWA,CAAA;IACT,MAAM;MAAEmE;IAAO,CAAE,GAAG,IAAI,CAACzE,OAAO;IAChC,IAAI,OAAOyE,OAAO,KAAK,UAAU,EAAE;MACjC,OAAO5G,WAAW,CAAC6G,IAAI,CAACD,OAAO,EAAE,IAAI,CAAC9F,QAAQ,EAAE;QAC9CK,IAAI,EAAE,IAAI,CAACA,IAAI;QACfoD,KAAK,EAAE,IAAI,CAAC/D;OACb,CAAC;;IAEJ,IAAI,OAAOoG,OAAO,KAAK,QAAQ,EAAE;MAC/B,IAAI,IAAI,CAACzF,IAAI,CAACY,MAAM,EAAE,EAAE;QACtB,OAAO,IAAI,CAACZ,IAAI,CAAC2F,IAAI,CAACF,OAAO,CAAC;;MAEhC,IAAI,IAAI,CAACzF,IAAI,CAACC,MAAM,EAAE,EAAE;QACtB,IAAI,IAAI,CAACZ,UAAU,KAAK,CAAC,CAAC,EAAE;UAC1B,OAAO,IAAI,CAACW,IAAI,CAAC4F,IAAI,CAAC,UAAU,IAAI,CAACvG,UAAU,UAAUoG,OAAO,EAAE,CAAC;;;;EAI3E;EAEAjE,WAAWA,CAAC8C,KAAoB;IAC9B,MAAMuB,OAAO,GAAG,IAAI,CAAC7E,OAAO,CAAC6E,OAAO;IACpC,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;MACjChH,WAAW,CAAC6G,IAAI,CAACG,OAAO,EAAE,IAAI,CAAClG,QAAQ,EAAE;QACvCK,IAAI,EAAE,IAAI,CAACA,IAAI;QACfsE,KAAK;QACLlB,KAAK,EAAE,IAAI,CAAC/D,UAAU;QACtBC,QAAQ,EAAE,IAAI,CAACA;OAChB,CAAC;MACF;;IAEF,IAAI,OAAOuG,OAAO,KAAK,QAAQ,EAAE;MAC/B,IAAI,IAAI,CAAC7F,IAAI,CAACY,MAAM,EAAE,EAAE;QACtB,IAAI0D,KAAK,KAAK,IAAI,EAAE;UAClB,IAAI,CAACtE,IAAI,CAAC2F,IAAI,CAACE,OAAO,EAAEvB,KAAK,CAAC;;QAEhC;;MAEF,IAAI,IAAI,CAACtE,IAAI,CAACC,MAAM,EAAE,EAAE;QACtB,MAAM6F,IAAI,GAAG,IAAI,CAAC9F,IAAY;QAC9B,IAAI,IAAI,CAACX,UAAU,KAAK,CAAC,CAAC,EAAE;UAC1B,IAAIiF,KAAK,EAAE;YACT,MAAMyB,QAAQ,GAAG;cACfC,QAAQ,EAAE;gBACR1G,QAAQ,EAAE,IAAI,CAACA;eAChB;cACDyB,KAAK,EAAE;aACR;YACDhC,SAAS,CAACkH,SAAS,CAACF,QAAQ,EAAE,SAASF,OAAO,EAAE,EAAEvB,KAAK,CAAC;YACxDwB,IAAI,CAACI,WAAW,CAACH,QAAQ,CAAC;;SAE7B,MAAM;UACL,IAAIzB,KAAK,KAAK,IAAI,EAAE;YAClBwB,IAAI,CAACF,IAAI,CAAC,UAAU,IAAI,CAACvG,UAAU,UAAUwG,OAAO,EAAE,EAAEvB,KAAK,CAAC;WAC/D,MAAM,IAAI,OAAO,IAAI,CAACjF,UAAU,KAAK,QAAQ,EAAE;YAC9CyG,IAAI,CAACK,aAAa,CAAC,IAAI,CAAC9G,UAAU,CAAC;;;;;EAK7C;EAEU+G,QAAQA,CAAA;IAChB,MAAMzG,QAAQ,GAAG,IAAI,CAACA,QAAoB;IAC1C,IAAIA,QAAQ,EAAE;MACZA,QAAQ,CAAC0G,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC9G,QAAQ,CAAC;;IAE9C,IAAI,CAACgB,aAAa,EAAE;EACtB;;AAuCF,WAAiBrB,UAAU;EACzBA,UAAU,CAACoH,MAAM,CAAC;IAChBC,OAAO,EAAE,KAAK;IACdC,YAAY,EAAE,KAAK;IACnBC,MAAM,EAAE;MACNC,SAAS,EAAE,aAAa;MACxBC,UAAU,EAAE;KACb;IACDhC,cAAc,EAAE;MACdiC,OAAO,EAAE,mBAAmB;MAC5BC,QAAQ,EAAE,mBAAmB;MAC7BC,WAAW,EAAE;;GAEhB,CAAC;AACJ,CAAC,EAdgB5H,UAAU,KAAVA,UAAU;AAgB3B,WAAiBA,UAAU;EACZA,UAAA,CAAA6H,UAAU,GAAG7H,UAAU,CAAC8H,MAAM,CAAoB;IAC7DjG,KAAK,EAAE;MACLE,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,8BAA8B;MAC1CC,KAAK,EAAE,MAAM;MACbC,eAAe,EAAE;KAClB;IACDqE,OAAO,EAAE,WAAW;IACpBI,OAAO,EAAE;GACV,CAAC;EAEW3G,UAAA,CAAA+H,UAAU,GAAG/H,UAAU,CAAC8H,MAAM,CAAoB;IAC7DjG,KAAK,EAAE;MACLE,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,8BAA8B;MAC1CC,KAAK,EAAE,MAAM;MACbC,eAAe,EAAE;KAClB;IACDwC,YAAY,EAAE,IAAI;IAClB6B,OAAO,EAAE,YAAY;IACrBI,OAAO,EAAE;GACV,CAAC;AACJ,CAAC,EAvBgB3G,UAAU,KAAVA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}