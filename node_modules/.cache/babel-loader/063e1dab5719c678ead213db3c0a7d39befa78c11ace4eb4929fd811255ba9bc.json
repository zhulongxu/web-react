{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Point } from '@antv/x6-geometry';\nimport { ObjectExt } from '@antv/x6-common';\nimport { Base } from './base';\nexport class Poly extends Base {\n  get points() {\n    return this.getPoints();\n  }\n  set points(pts) {\n    this.setPoints(pts);\n  }\n  getPoints() {\n    return this.getAttrByPath('body/refPoints');\n  }\n  setPoints(points, options) {\n    if (points == null) {\n      this.removePoints();\n    } else {\n      this.setAttrByPath('body/refPoints', Poly.pointsToString(points), options);\n    }\n    return this;\n  }\n  removePoints() {\n    this.removeAttrByPath('body/refPoints');\n    return this;\n  }\n}\n(function (Poly) {\n  function pointsToString(points) {\n    return typeof points === 'string' ? points : points.map(p => {\n      if (Array.isArray(p)) {\n        return p.join(',');\n      }\n      if (Point.isPointLike(p)) {\n        return `${p.x}, ${p.y}`;\n      }\n      return '';\n    }).join(' ');\n  }\n  Poly.pointsToString = pointsToString;\n  Poly.config({\n    propHooks(metadata) {\n      const {\n          points\n        } = metadata,\n        others = __rest(metadata, [\"points\"]);\n      if (points) {\n        const data = pointsToString(points);\n        if (data) {\n          ObjectExt.setByPath(others, 'attrs/body/refPoints', data);\n        }\n      }\n      return others;\n    }\n  });\n})(Poly || (Poly = {}));","map":{"version":3,"names":["Point","ObjectExt","Base","Poly","points","getPoints","pts","setPoints","getAttrByPath","options","removePoints","setAttrByPath","pointsToString","removeAttrByPath","map","p","Array","isArray","join","isPointLike","x","y","config","propHooks","metadata","others","__rest","data","setByPath"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/shape/poly.ts"],"sourcesContent":["import { Point } from '@antv/x6-geometry'\nimport { ObjectExt } from '@antv/x6-common'\nimport { Base } from './base'\nimport { Node } from '../model/node'\n\nexport class Poly extends Base {\n  get points() {\n    return this.getPoints()\n  }\n\n  set points(pts: string | undefined | null) {\n    this.setPoints(pts)\n  }\n\n  getPoints() {\n    return this.getAttrByPath<string>('body/refPoints')\n  }\n\n  setPoints(\n    points?: string | Point.PointLike[] | Point.PointData[] | null,\n    options?: Node.SetOptions,\n  ) {\n    if (points == null) {\n      this.removePoints()\n    } else {\n      this.setAttrByPath('body/refPoints', Poly.pointsToString(points), options)\n    }\n\n    return this\n  }\n\n  removePoints() {\n    this.removeAttrByPath('body/refPoints')\n    return this\n  }\n}\n\nexport namespace Poly {\n  export function pointsToString(\n    points: Point.PointLike[] | Point.PointData[] | string,\n  ) {\n    return typeof points === 'string'\n      ? points\n      : (points as Point.PointLike[])\n          .map((p) => {\n            if (Array.isArray(p)) {\n              return p.join(',')\n            }\n            if (Point.isPointLike(p)) {\n              return `${p.x}, ${p.y}`\n            }\n            return ''\n          })\n          .join(' ')\n  }\n\n  Poly.config({\n    propHooks(metadata) {\n      const { points, ...others } = metadata\n      if (points) {\n        const data = pointsToString(points)\n        if (data) {\n          ObjectExt.setByPath(others, 'attrs/body/refPoints', data)\n        }\n      }\n      return others\n    },\n  })\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,KAAK,QAAQ,mBAAmB;AACzC,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,IAAI,QAAQ,QAAQ;AAG7B,OAAM,MAAOC,IAAK,SAAQD,IAAI;EAC5B,IAAIE,MAAMA,CAAA;IACR,OAAO,IAAI,CAACC,SAAS,EAAE;EACzB;EAEA,IAAID,MAAMA,CAACE,GAA8B;IACvC,IAAI,CAACC,SAAS,CAACD,GAAG,CAAC;EACrB;EAEAD,SAASA,CAAA;IACP,OAAO,IAAI,CAACG,aAAa,CAAS,gBAAgB,CAAC;EACrD;EAEAD,SAASA,CACPH,MAA8D,EAC9DK,OAAyB;IAEzB,IAAIL,MAAM,IAAI,IAAI,EAAE;MAClB,IAAI,CAACM,YAAY,EAAE;KACpB,MAAM;MACL,IAAI,CAACC,aAAa,CAAC,gBAAgB,EAAER,IAAI,CAACS,cAAc,CAACR,MAAM,CAAC,EAAEK,OAAO,CAAC;;IAG5E,OAAO,IAAI;EACb;EAEAC,YAAYA,CAAA;IACV,IAAI,CAACG,gBAAgB,CAAC,gBAAgB,CAAC;IACvC,OAAO,IAAI;EACb;;AAGF,WAAiBV,IAAI;EACnB,SAAgBS,cAAcA,CAC5BR,MAAsD;IAEtD,OAAO,OAAOA,MAAM,KAAK,QAAQ,GAC7BA,MAAM,GACLA,MAA4B,CAC1BU,GAAG,CAAEC,CAAC,IAAI;MACT,IAAIC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,EAAE;QACpB,OAAOA,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC;;MAEpB,IAAIlB,KAAK,CAACmB,WAAW,CAACJ,CAAC,CAAC,EAAE;QACxB,OAAO,GAAGA,CAAC,CAACK,CAAC,KAAKL,CAAC,CAACM,CAAC,EAAE;;MAEzB,OAAO,EAAE;IACX,CAAC,CAAC,CACDH,IAAI,CAAC,GAAG,CAAC;EAClB;EAhBgBf,IAAA,CAAAS,cAAc,GAAAA,cAgB7B;EAEDT,IAAI,CAACmB,MAAM,CAAC;IACVC,SAASA,CAACC,QAAQ;MAChB,MAAM;UAAEpB;QAAM,IAAgBoB,QAAQ;QAAnBC,MAAM,GAAAC,MAAA,CAAKF,QAAQ,EAAhC,UAAqB,CAAW;MACtC,IAAIpB,MAAM,EAAE;QACV,MAAMuB,IAAI,GAAGf,cAAc,CAACR,MAAM,CAAC;QACnC,IAAIuB,IAAI,EAAE;UACR1B,SAAS,CAAC2B,SAAS,CAACH,MAAM,EAAE,sBAAsB,EAAEE,IAAI,CAAC;;;MAG7D,OAAOF,MAAM;IACf;GACD,CAAC;AACJ,CAAC,EA/BgBtB,IAAI,KAAJA,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}