{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { ObjectExt } from '@antv/x6-common';\nimport { Base } from './base';\nexport function getMarkup(tagName, selector = 'body') {\n  return [{\n    tagName,\n    selector\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }];\n}\nexport function getImageUrlHook(attrName = 'xlink:href') {\n  const hook = metadata => {\n    const {\n        imageUrl,\n        imageWidth,\n        imageHeight\n      } = metadata,\n      others = __rest(metadata, [\"imageUrl\", \"imageWidth\", \"imageHeight\"]);\n    if (imageUrl != null || imageWidth != null || imageHeight != null) {\n      const apply = () => {\n        if (others.attrs) {\n          const image = others.attrs.image;\n          if (imageUrl != null) {\n            image[attrName] = imageUrl;\n          }\n          if (imageWidth != null) {\n            image.width = imageWidth;\n          }\n          if (imageHeight != null) {\n            image.height = imageHeight;\n          }\n          others.attrs.image = image;\n        }\n      };\n      if (others.attrs) {\n        if (others.attrs.image == null) {\n          others.attrs.image = {};\n        }\n        apply();\n      } else {\n        others.attrs = {\n          image: {}\n        };\n        apply();\n      }\n    }\n    return others;\n  };\n  return hook;\n}\nexport function createShape(shape, config, options = {}) {\n  const defaults = {\n    constructorName: shape,\n    markup: getMarkup(shape, options.selector),\n    attrs: {\n      [shape]: Object.assign({}, Base.bodyAttr)\n    }\n  };\n  const base = options.parent || Base;\n  return base.define(ObjectExt.merge(defaults, config, {\n    shape\n  }));\n}","map":{"version":3,"names":["ObjectExt","Base","getMarkup","tagName","selector","getImageUrlHook","attrName","hook","metadata","imageUrl","imageWidth","imageHeight","others","__rest","apply","attrs","image","width","height","createShape","shape","config","options","defaults","constructorName","markup","Object","assign","bodyAttr","base","parent","define","merge"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/shape/util.ts"],"sourcesContent":["import { ObjectExt } from '@antv/x6-common'\nimport { Cell, Node } from '../model'\nimport { Markup } from '../view'\nimport { Base } from './base'\n\nexport function getMarkup(tagName: string, selector = 'body'): Markup {\n  return [\n    {\n      tagName,\n      selector,\n    },\n    {\n      tagName: 'text',\n      selector: 'label',\n    },\n  ]\n}\n\nexport function getImageUrlHook(attrName = 'xlink:href') {\n  const hook: Cell.PropHook = (metadata) => {\n    const { imageUrl, imageWidth, imageHeight, ...others } = metadata\n    if (imageUrl != null || imageWidth != null || imageHeight != null) {\n      const apply = () => {\n        if (others.attrs) {\n          const image = others.attrs.image\n          if (imageUrl != null) {\n            image[attrName] = imageUrl\n          }\n          if (imageWidth != null) {\n            image.width = imageWidth\n          }\n          if (imageHeight != null) {\n            image.height = imageHeight\n          }\n          others.attrs.image = image\n        }\n      }\n\n      if (others.attrs) {\n        if (others.attrs.image == null) {\n          others.attrs.image = {}\n        }\n        apply()\n      } else {\n        others.attrs = {\n          image: {},\n        }\n        apply()\n      }\n    }\n\n    return others\n  }\n\n  return hook\n}\n\nexport function createShape(\n  shape: string,\n  config: Node.Config,\n  options: {\n    selector?: string\n    parent?: Node.Definition | typeof Base\n  } = {},\n) {\n  const defaults: Node.Config = {\n    constructorName: shape,\n    markup: getMarkup(shape, options.selector),\n    attrs: {\n      [shape]: { ...Base.bodyAttr },\n    },\n  }\n\n  const base = options.parent || Base\n  return base.define(\n    ObjectExt.merge(defaults, config, { shape }),\n  ) as typeof Base\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAG3C,SAASC,IAAI,QAAQ,QAAQ;AAE7B,OAAM,SAAUC,SAASA,CAACC,OAAe,EAAEC,QAAQ,GAAG,MAAM;EAC1D,OAAO,CACL;IACED,OAAO;IACPC;GACD,EACD;IACED,OAAO,EAAE,MAAM;IACfC,QAAQ,EAAE;GACX,CACF;AACH;AAEA,OAAM,SAAUC,eAAeA,CAACC,QAAQ,GAAG,YAAY;EACrD,MAAMC,IAAI,GAAmBC,QAAQ,IAAI;IACvC,MAAM;QAAEC,QAAQ;QAAEC,UAAU;QAAEC;MAAW,IAAgBH,QAAQ;MAAnBI,MAAM,GAAAC,MAAA,CAAKL,QAAQ,EAA3D,yCAAgD,CAAW;IACjE,IAAIC,QAAQ,IAAI,IAAI,IAAIC,UAAU,IAAI,IAAI,IAAIC,WAAW,IAAI,IAAI,EAAE;MACjE,MAAMG,KAAK,GAAGA,CAAA,KAAK;QACjB,IAAIF,MAAM,CAACG,KAAK,EAAE;UAChB,MAAMC,KAAK,GAAGJ,MAAM,CAACG,KAAK,CAACC,KAAK;UAChC,IAAIP,QAAQ,IAAI,IAAI,EAAE;YACpBO,KAAK,CAACV,QAAQ,CAAC,GAAGG,QAAQ;;UAE5B,IAAIC,UAAU,IAAI,IAAI,EAAE;YACtBM,KAAK,CAACC,KAAK,GAAGP,UAAU;;UAE1B,IAAIC,WAAW,IAAI,IAAI,EAAE;YACvBK,KAAK,CAACE,MAAM,GAAGP,WAAW;;UAE5BC,MAAM,CAACG,KAAK,CAACC,KAAK,GAAGA,KAAK;;MAE9B,CAAC;MAED,IAAIJ,MAAM,CAACG,KAAK,EAAE;QAChB,IAAIH,MAAM,CAACG,KAAK,CAACC,KAAK,IAAI,IAAI,EAAE;UAC9BJ,MAAM,CAACG,KAAK,CAACC,KAAK,GAAG,EAAE;;QAEzBF,KAAK,EAAE;OACR,MAAM;QACLF,MAAM,CAACG,KAAK,GAAG;UACbC,KAAK,EAAE;SACR;QACDF,KAAK,EAAE;;;IAIX,OAAOF,MAAM;EACf,CAAC;EAED,OAAOL,IAAI;AACb;AAEA,OAAM,SAAUY,WAAWA,CACzBC,KAAa,EACbC,MAAmB,EACnBC,OAAA,GAGI,EAAE;EAEN,MAAMC,QAAQ,GAAgB;IAC5BC,eAAe,EAAEJ,KAAK;IACtBK,MAAM,EAAEvB,SAAS,CAACkB,KAAK,EAAEE,OAAO,CAAClB,QAAQ,CAAC;IAC1CW,KAAK,EAAE;MACL,CAACK,KAAK,GAACM,MAAA,CAAAC,MAAA,KAAO1B,IAAI,CAAC2B,QAAQ;;GAE9B;EAED,MAAMC,IAAI,GAAGP,OAAO,CAACQ,MAAM,IAAI7B,IAAI;EACnC,OAAO4B,IAAI,CAACE,MAAM,CAChB/B,SAAS,CAACgC,KAAK,CAACT,QAAQ,EAAEF,MAAM,EAAE;IAAED;EAAK,CAAE,CAAC,CAC9B;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}