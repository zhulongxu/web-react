{"ast":null,"code":"import { ObjectExt, Dom, Vector } from '@antv/x6-common';\n// eslint-disable-next-line\nexport var Markup;\n(function (Markup) {\n  function isJSONMarkup(markup) {\n    return markup != null && !isStringMarkup(markup);\n  }\n  Markup.isJSONMarkup = isJSONMarkup;\n  function isStringMarkup(markup) {\n    return markup != null && typeof markup === 'string';\n  }\n  Markup.isStringMarkup = isStringMarkup;\n  function clone(markup) {\n    return markup == null || isStringMarkup(markup) ? markup : ObjectExt.cloneDeep(markup);\n  }\n  Markup.clone = clone;\n  /**\n   * Removes blank space in markup to prevent create empty text node.\n   */\n  function sanitize(markup) {\n    return `${markup}`.trim().replace(/[\\r|\\n]/g, ' ').replace(/>\\s+</g, '><');\n  }\n  Markup.sanitize = sanitize;\n  function parseJSONMarkup(markup, options = {\n    ns: Dom.ns.svg\n  }) {\n    const fragment = document.createDocumentFragment();\n    const groups = {};\n    const selectors = {};\n    const queue = [{\n      markup: Array.isArray(markup) ? markup : [markup],\n      parent: fragment,\n      ns: options.ns\n    }];\n    while (queue.length > 0) {\n      const item = queue.pop();\n      let ns = item.ns || Dom.ns.svg;\n      const defines = item.markup;\n      const parentNode = item.parent;\n      defines.forEach(define => {\n        // tagName\n        const tagName = define.tagName;\n        if (!tagName) {\n          throw new TypeError('Invalid tagName');\n        }\n        // ns\n        if (define.ns) {\n          ns = define.ns;\n        }\n        const node = ns ? Dom.createElementNS(tagName, ns) : Dom.createElement(tagName);\n        // attrs\n        const attrs = define.attrs;\n        if (attrs) {\n          Dom.attr(node, Dom.kebablizeAttrs(attrs));\n        }\n        // style\n        const style = define.style;\n        if (style) {\n          Dom.css(node, style);\n        }\n        // classname\n        const className = define.className;\n        if (className != null) {\n          node.setAttribute('class', Array.isArray(className) ? className.join(' ') : className);\n        }\n        // textContent\n        if (define.textContent) {\n          node.textContent = define.textContent;\n        }\n        // selector\n        const selector = define.selector;\n        if (selector != null) {\n          if (selectors[selector]) {\n            throw new TypeError('Selector must be unique');\n          }\n          selectors[selector] = node;\n        }\n        // group\n        if (define.groupSelector) {\n          let nodeGroups = define.groupSelector;\n          if (!Array.isArray(nodeGroups)) {\n            nodeGroups = [nodeGroups];\n          }\n          nodeGroups.forEach(name => {\n            if (!groups[name]) {\n              groups[name] = [];\n            }\n            groups[name].push(node);\n          });\n        }\n        parentNode.appendChild(node);\n        // children\n        const children = define.children;\n        if (Array.isArray(children)) {\n          queue.push({\n            ns,\n            markup: children,\n            parent: node\n          });\n        }\n      });\n    }\n    Object.keys(groups).forEach(groupName => {\n      if (selectors[groupName]) {\n        throw new Error('Ambiguous group selector');\n      }\n      selectors[groupName] = groups[groupName];\n    });\n    return {\n      fragment,\n      selectors,\n      groups\n    };\n  }\n  Markup.parseJSONMarkup = parseJSONMarkup;\n  function createContainer(firstChild) {\n    return firstChild instanceof SVGElement ? Dom.createSvgElement('g') : Dom.createElement('div');\n  }\n  function renderMarkup(markup) {\n    if (isStringMarkup(markup)) {\n      const nodes = Vector.createVectors(markup);\n      const count = nodes.length;\n      if (count === 1) {\n        return {\n          elem: nodes[0].node\n        };\n      }\n      if (count > 1) {\n        const elem = createContainer(nodes[0].node);\n        nodes.forEach(node => {\n          elem.appendChild(node.node);\n        });\n        return {\n          elem\n        };\n      }\n      return {};\n    }\n    const result = parseJSONMarkup(markup);\n    const fragment = result.fragment;\n    let elem = null;\n    if (fragment.childNodes.length > 1) {\n      elem = createContainer(fragment.firstChild);\n      elem.appendChild(fragment);\n    } else {\n      elem = fragment.firstChild;\n    }\n    return {\n      elem,\n      selectors: result.selectors\n    };\n  }\n  Markup.renderMarkup = renderMarkup;\n  function parseLabelStringMarkup(markup) {\n    const children = Vector.createVectors(markup);\n    const fragment = document.createDocumentFragment();\n    for (let i = 0, n = children.length; i < n; i += 1) {\n      const currentChild = children[i].node;\n      fragment.appendChild(currentChild);\n    }\n    return {\n      fragment,\n      selectors: {}\n    };\n  }\n  Markup.parseLabelStringMarkup = parseLabelStringMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n  function getSelector(elem, stop, prev) {\n    if (elem != null) {\n      let selector;\n      const tagName = elem.tagName.toLowerCase();\n      if (elem === stop) {\n        if (typeof prev === 'string') {\n          selector = `> ${tagName} > ${prev}`;\n        } else {\n          selector = `> ${tagName}`;\n        }\n        return selector;\n      }\n      const parent = elem.parentNode;\n      if (parent && parent.childNodes.length > 1) {\n        const nth = Dom.index(elem) + 1;\n        selector = `${tagName}:nth-child(${nth})`;\n      } else {\n        selector = tagName;\n      }\n      if (prev) {\n        selector += ` > ${prev}`;\n      }\n      return getSelector(elem.parentNode, stop, selector);\n    }\n    return prev;\n  }\n  Markup.getSelector = getSelector;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n  function getPortContainerMarkup() {\n    return 'g';\n  }\n  Markup.getPortContainerMarkup = getPortContainerMarkup;\n  function getPortMarkup() {\n    return {\n      tagName: 'circle',\n      selector: 'circle',\n      attrs: {\n        r: 10,\n        fill: '#FFFFFF',\n        stroke: '#000000'\n      }\n    };\n  }\n  Markup.getPortMarkup = getPortMarkup;\n  function getPortLabelMarkup() {\n    return {\n      tagName: 'text',\n      selector: 'text',\n      attrs: {\n        fill: '#000000'\n      }\n    };\n  }\n  Markup.getPortLabelMarkup = getPortLabelMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n  function getEdgeMarkup() {\n    return [{\n      tagName: 'path',\n      selector: 'wrap',\n      groupSelector: 'lines',\n      attrs: {\n        fill: 'none',\n        cursor: 'pointer',\n        stroke: 'transparent',\n        strokeLinecap: 'round'\n      }\n    }, {\n      tagName: 'path',\n      selector: 'line',\n      groupSelector: 'lines',\n      attrs: {\n        fill: 'none',\n        pointerEvents: 'none'\n      }\n    }];\n  }\n  Markup.getEdgeMarkup = getEdgeMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n  function getForeignObjectMarkup(bare = false) {\n    return {\n      tagName: 'foreignObject',\n      selector: 'fo',\n      children: [{\n        ns: Dom.ns.xhtml,\n        tagName: 'body',\n        selector: 'foBody',\n        attrs: {\n          xmlns: Dom.ns.xhtml\n        },\n        style: {\n          width: '100%',\n          height: '100%',\n          background: 'transparent'\n        },\n        children: bare ? [] : [{\n          tagName: 'div',\n          selector: 'foContent',\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }]\n      }]\n    };\n  }\n  Markup.getForeignObjectMarkup = getForeignObjectMarkup;\n})(Markup || (Markup = {}));","map":{"version":3,"names":["ObjectExt","Dom","Vector","Markup","isJSONMarkup","markup","isStringMarkup","clone","cloneDeep","sanitize","trim","replace","parseJSONMarkup","options","ns","svg","fragment","document","createDocumentFragment","groups","selectors","queue","Array","isArray","parent","length","item","pop","defines","parentNode","forEach","define","tagName","TypeError","node","createElementNS","createElement","attrs","attr","kebablizeAttrs","style","css","className","setAttribute","join","textContent","selector","groupSelector","nodeGroups","name","push","appendChild","children","Object","keys","groupName","Error","createContainer","firstChild","SVGElement","createSvgElement","renderMarkup","nodes","createVectors","count","elem","result","childNodes","parseLabelStringMarkup","i","n","currentChild","getSelector","stop","prev","toLowerCase","nth","index","getPortContainerMarkup","getPortMarkup","r","fill","stroke","getPortLabelMarkup","getEdgeMarkup","cursor","strokeLinecap","pointerEvents","getForeignObjectMarkup","bare","xhtml","xmlns","width","height","background"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/view/markup.ts"],"sourcesContent":["import { ObjectExt, Dom, Vector, KeyValue, Nilable } from '@antv/x6-common'\nimport { Attr } from '../registry'\n\nexport type Markup = string | Markup.JSONMarkup | Markup.JSONMarkup[]\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export type Selectors = KeyValue<Element | Element[]>\n\n  export interface JSONMarkup {\n    /**\n     * The namespace URI of the element. It defaults to SVG namespace\n     * `\"http://www.w3.org/2000/svg\"`.\n     */\n    ns?: string | null\n\n    /**\n     * The type of element to be created.\n     */\n    tagName: string\n\n    /**\n     * A unique selector for targeting the element within the `attr`\n     * cell attribute.\n     */\n    selector?: string | null\n\n    /**\n     * A selector for targeting multiple elements within the `attr`\n     * cell attribute. The group selector name must not be the same\n     * as an existing selector name.\n     */\n    groupSelector?: string | string[] | null\n\n    attrs?: Attr.SimpleAttrs\n\n    style?: Record<string, string | number>\n\n    className?: string | string[]\n\n    children?: JSONMarkup[]\n\n    textContent?: string\n  }\n\n  export interface ParseResult {\n    fragment: DocumentFragment\n    selectors: Selectors\n    groups: KeyValue<Element[]>\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function isJSONMarkup(markup?: Nilable<Markup>) {\n    return markup != null && !isStringMarkup(markup)\n  }\n\n  export function isStringMarkup(markup?: Nilable<Markup>): markup is string {\n    return markup != null && typeof markup === 'string'\n  }\n\n  export function clone(markup?: Nilable<Markup>) {\n    return markup == null || isStringMarkup(markup)\n      ? markup\n      : ObjectExt.cloneDeep(markup)\n  }\n\n  /**\n   * Removes blank space in markup to prevent create empty text node.\n   */\n  export function sanitize(markup: string) {\n    return `${markup}`\n      .trim()\n      .replace(/[\\r|\\n]/g, ' ')\n      .replace(/>\\s+</g, '><')\n  }\n\n  export function parseJSONMarkup(\n    markup: JSONMarkup | JSONMarkup[],\n    options: { ns?: string } = { ns: Dom.ns.svg },\n  ): ParseResult {\n    const fragment = document.createDocumentFragment()\n    const groups: KeyValue<Element[]> = {}\n    const selectors: Selectors = {}\n\n    const queue: {\n      markup: JSONMarkup[]\n      parent: Element | DocumentFragment\n      ns?: string\n    }[] = [\n      {\n        markup: Array.isArray(markup) ? markup : [markup],\n        parent: fragment,\n        ns: options.ns,\n      },\n    ]\n\n    while (queue.length > 0) {\n      const item = queue.pop()!\n      let ns = item.ns || Dom.ns.svg\n      const defines = item.markup\n      const parentNode = item.parent\n\n      defines.forEach((define) => {\n        // tagName\n        const tagName = define.tagName\n        if (!tagName) {\n          throw new TypeError('Invalid tagName')\n        }\n\n        // ns\n        if (define.ns) {\n          ns = define.ns\n        }\n\n        const node = ns\n          ? Dom.createElementNS(tagName, ns)\n          : Dom.createElement(tagName)\n\n        // attrs\n        const attrs = define.attrs\n        if (attrs) {\n          Dom.attr(node, Dom.kebablizeAttrs(attrs))\n        }\n\n        // style\n        const style = define.style\n        if (style) {\n          Dom.css(node, style)\n        }\n\n        // classname\n        const className = define.className\n        if (className != null) {\n          node.setAttribute(\n            'class',\n            Array.isArray(className) ? className.join(' ') : className,\n          )\n        }\n\n        // textContent\n        if (define.textContent) {\n          node.textContent = define.textContent\n        }\n\n        // selector\n        const selector = define.selector\n        if (selector != null) {\n          if (selectors[selector]) {\n            throw new TypeError('Selector must be unique')\n          }\n\n          selectors[selector] = node\n        }\n\n        // group\n        if (define.groupSelector) {\n          let nodeGroups = define.groupSelector\n          if (!Array.isArray(nodeGroups)) {\n            nodeGroups = [nodeGroups]\n          }\n\n          nodeGroups.forEach((name) => {\n            if (!groups[name]) {\n              groups[name] = []\n            }\n            groups[name].push(node)\n          })\n        }\n\n        parentNode.appendChild(node)\n\n        // children\n        const children = define.children\n        if (Array.isArray(children)) {\n          queue.push({ ns, markup: children, parent: node })\n        }\n      })\n    }\n\n    Object.keys(groups).forEach((groupName) => {\n      if (selectors[groupName]) {\n        throw new Error('Ambiguous group selector')\n      }\n      selectors[groupName] = groups[groupName]\n    })\n\n    return { fragment, selectors, groups }\n  }\n\n  function createContainer(firstChild: Element) {\n    return firstChild instanceof SVGElement\n      ? Dom.createSvgElement('g')\n      : Dom.createElement('div')\n  }\n\n  export function renderMarkup(markup: Markup): {\n    elem?: Element\n    selectors?: Selectors\n  } {\n    if (isStringMarkup(markup)) {\n      const nodes = Vector.createVectors(markup)\n      const count = nodes.length\n\n      if (count === 1) {\n        return {\n          elem: nodes[0].node as Element,\n        }\n      }\n\n      if (count > 1) {\n        const elem = createContainer(nodes[0].node)\n        nodes.forEach((node) => {\n          elem.appendChild(node.node)\n        })\n\n        return { elem }\n      }\n\n      return {}\n    }\n\n    const result = parseJSONMarkup(markup)\n    const fragment = result.fragment\n    let elem: Element | null = null\n    if (fragment.childNodes.length > 1) {\n      elem = createContainer(fragment.firstChild as Element)\n      elem.appendChild(fragment)\n    } else {\n      elem = fragment.firstChild as Element\n    }\n\n    return { elem, selectors: result.selectors }\n  }\n\n  export function parseLabelStringMarkup(markup: string) {\n    const children = Vector.createVectors(markup)\n    const fragment = document.createDocumentFragment()\n    for (let i = 0, n = children.length; i < n; i += 1) {\n      const currentChild = children[i].node\n      fragment.appendChild(currentChild)\n    }\n\n    return { fragment, selectors: {} }\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function getSelector(\n    elem: Element,\n    stop: Element,\n    prev?: string,\n  ): string | undefined {\n    if (elem != null) {\n      let selector\n      const tagName = elem.tagName.toLowerCase()\n\n      if (elem === stop) {\n        if (typeof prev === 'string') {\n          selector = `> ${tagName} > ${prev}`\n        } else {\n          selector = `> ${tagName}`\n        }\n        return selector\n      }\n\n      const parent = elem.parentNode\n      if (parent && parent.childNodes.length > 1) {\n        const nth = Dom.index(elem) + 1\n        selector = `${tagName}:nth-child(${nth})`\n      } else {\n        selector = tagName\n      }\n\n      if (prev) {\n        selector += ` > ${prev}`\n      }\n\n      return getSelector(elem.parentNode as Element, stop, selector)\n    }\n\n    return prev\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function getPortContainerMarkup(): Markup {\n    return 'g'\n  }\n\n  export function getPortMarkup(): Markup {\n    return {\n      tagName: 'circle',\n      selector: 'circle',\n      attrs: {\n        r: 10,\n        fill: '#FFFFFF',\n        stroke: '#000000',\n      },\n    }\n  }\n\n  export function getPortLabelMarkup(): Markup {\n    return {\n      tagName: 'text',\n      selector: 'text',\n      attrs: {\n        fill: '#000000',\n      },\n    }\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function getEdgeMarkup(): Markup {\n    return [\n      {\n        tagName: 'path',\n        selector: 'wrap',\n        groupSelector: 'lines',\n        attrs: {\n          fill: 'none',\n          cursor: 'pointer',\n          stroke: 'transparent',\n          strokeLinecap: 'round',\n        },\n      },\n      {\n        tagName: 'path',\n        selector: 'line',\n        groupSelector: 'lines',\n        attrs: {\n          fill: 'none',\n          pointerEvents: 'none',\n        },\n      },\n    ]\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Markup {\n  export function getForeignObjectMarkup(bare = false): Markup.JSONMarkup {\n    return {\n      tagName: 'foreignObject',\n      selector: 'fo',\n      children: [\n        {\n          ns: Dom.ns.xhtml,\n          tagName: 'body',\n          selector: 'foBody',\n          attrs: {\n            xmlns: Dom.ns.xhtml,\n          },\n          style: {\n            width: '100%',\n            height: '100%',\n            background: 'transparent',\n          },\n          children: bare\n            ? []\n            : [\n                {\n                  tagName: 'div',\n                  selector: 'foContent',\n                  style: {\n                    width: '100%',\n                    height: '100%',\n                  },\n                },\n              ],\n        },\n      ],\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}