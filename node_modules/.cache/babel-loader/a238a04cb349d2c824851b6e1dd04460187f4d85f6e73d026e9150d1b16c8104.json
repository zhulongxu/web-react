{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-common@2.0.17/node_modules/@antv/x6-common/src/dom/event/types.ts"],"sourcesContent":["import {\n  EventRaw,\n  UIEventRaw,\n  DragEventRaw,\n  FocusEventRaw,\n  MouseEventRaw,\n  TouchEventRaw,\n  KeyboardEventRaw,\n} from './alias'\nimport { EventObject } from './object'\n\ninterface EventBase<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n  TEvent extends EventRaw = any,\n> extends EventObject<TDelegateTarget, TData, TCurrentTarget, TTarget, TEvent> {\n  relatedTarget?: undefined\n\n  bubbles: boolean\n  cancelable: boolean\n  eventPhase: number\n\n  detail: undefined\n  view: undefined\n\n  button: undefined\n  buttons: undefined\n  clientX: undefined\n  clientY: undefined\n  offsetX: undefined\n  offsetY: undefined\n  pageX: undefined\n  pageY: undefined\n  screenX: undefined\n  screenY: undefined\n\n  /** @deprecated */\n  toElement: undefined\n\n  pointerId: undefined\n  pointerType: undefined\n\n  /** @deprecated */\n  char: undefined\n  /** @deprecated */\n  charCode: undefined\n  key: undefined\n  /** @deprecated */\n  keyCode: undefined\n\n  changedTouches: undefined\n  targetTouches: undefined\n  touches: undefined\n\n  which: undefined\n\n  altKey: undefined\n  ctrlKey: undefined\n  metaKey: undefined\n  shiftKey: undefined\n}\n\ninterface ChangeEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'change'\n}\n\ninterface ResizeEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'resize'\n}\n\ninterface ScrollEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'scroll'\n}\n\ninterface SelectEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'select'\n}\n\ninterface SubmitEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'submit'\n}\n\ninterface UIEventBase<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n  TEvent extends UIEventRaw = any,\n> extends EventObject<TDelegateTarget, TData, TCurrentTarget, TTarget, TEvent> {\n  bubbles: boolean\n  cancelable: boolean\n  eventPhase: number\n\n  detail: number\n  view: Window\n}\n\ninterface MouseEventBase<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends UIEventBase<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget,\n    MouseEventRaw\n  > {\n  relatedTarget?: EventTarget | null\n\n  button: number\n  buttons: number\n  clientX: number\n  clientY: number\n  offsetX: number\n  offsetY: number\n  pageX: number\n  pageY: number\n  screenX: number\n  screenY: number\n  /** @deprecated */\n  toElement: Element\n\n  pointerId: undefined\n  pointerType: undefined\n\n  /** @deprecated */\n  char: undefined\n  /** @deprecated */\n  charCode: undefined\n  key: undefined\n  /** @deprecated */\n  keyCode: undefined\n\n  changedTouches: undefined\n  targetTouches: undefined\n  touches: undefined\n\n  which: number\n\n  altKey: boolean\n  ctrlKey: boolean\n\n  metaKey: boolean\n  shiftKey: boolean\n}\n\nexport interface ClickEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  relatedTarget?: null\n  type: 'click'\n}\n\nexport interface ContextMenuEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  relatedTarget?: null\n  type: 'contextmenu'\n}\n\nexport interface DoubleClickEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  relatedTarget?: null\n  type: 'dblclick'\n}\n\nexport interface MouseDownEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  relatedTarget?: null\n  type: 'mousedown'\n}\n\nexport interface MouseEnterEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'mouseenter'\n}\n\nexport interface MouseLeaveEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'mouseleave'\n}\n\nexport interface MouseMoveEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  relatedTarget?: null\n  type: 'mousemove'\n}\n\nexport interface MouseOutEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'mouseout'\n}\n\nexport interface MouseOverEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'mouseover'\n}\n\nexport interface MouseUpEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  relatedTarget?: null\n  type: 'mouseup'\n}\n\ninterface DragEventBase<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends UIEventBase<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget,\n    DragEventRaw\n  > {}\n\nexport interface DragEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'drag'\n}\n\nexport interface DragEndEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'dragend'\n}\n\nexport interface DragEnterEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'dragenter'\n}\n\nexport interface DragExitEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'dragexit'\n}\n\nexport interface DragLeaveEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'dragleave'\n}\n\nexport interface DragOverEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'dragover'\n}\n\nexport interface DragStartEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'dragstart'\n}\n\nexport interface DropEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'drop'\n}\n\ninterface KeyboardEventBase<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends UIEventBase<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget,\n    KeyboardEventRaw\n  > {\n  relatedTarget?: undefined\n\n  button: undefined\n  buttons: undefined\n  clientX: undefined\n  clientY: undefined\n  offsetX: undefined\n  offsetY: undefined\n  pageX: undefined\n  pageY: undefined\n  screenX: undefined\n  screenY: undefined\n  /** @deprecated */\n  toElement: undefined\n\n  pointerId: undefined\n  pointerType: undefined\n\n  /** @deprecated */\n  char: string | undefined\n  /** @deprecated */\n  charCode: number\n  code: string\n  key: string\n  /** @deprecated */\n  keyCode: number\n\n  changedTouches: undefined\n  targetTouches: undefined\n  touches: undefined\n\n  which: number\n\n  altKey: boolean\n  ctrlKey: boolean\n\n  metaKey: boolean\n  shiftKey: boolean\n}\n\nexport interface KeyDownEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'keydown'\n}\n\nexport interface KeyPressEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'keypress'\n}\n\nexport interface KeyUpEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'keyup'\n}\n\ninterface TouchEventBase<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends UIEventBase<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget,\n    TouchEventRaw\n  > {\n  relatedTarget?: undefined\n\n  button: undefined\n  buttons: undefined\n  clientX: undefined\n  clientY: undefined\n  offsetX: undefined\n  offsetY: undefined\n\n  pageY: undefined\n  screenX: undefined\n  screenY: undefined\n  /** @deprecated */\n  toElement: undefined\n\n  pointerId: undefined\n  pointerType: undefined\n\n  /** @deprecated */\n  char: undefined\n  /** @deprecated */\n  charCode: undefined\n  key: undefined\n  /** @deprecated */\n  keyCode: undefined\n\n  changedTouches: TouchList\n  targetTouches: TouchList\n  touches: TouchList\n\n  which: undefined\n\n  altKey: boolean\n  ctrlKey: boolean\n\n  metaKey: boolean\n  shiftKey: boolean\n}\n\nexport interface TouchCancelEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'touchcancel'\n}\n\nexport interface TouchEndEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'touchend'\n}\n\nexport interface TouchMoveEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'touchmove'\n}\n\nexport interface TouchStartEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'touchstart'\n}\n\ninterface FocusEventBase<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends UIEventBase<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget,\n    FocusEventRaw\n  > {\n  relatedTarget?: EventTarget | null\n\n  button: undefined\n  buttons: undefined\n  clientX: undefined\n  clientY: undefined\n  offsetX: undefined\n  offsetY: undefined\n  pageX: undefined\n  pageY: undefined\n  screenX: undefined\n  screenY: undefined\n\n  /** @deprecated */\n  toElement: undefined\n\n  pointerId: undefined\n  pointerType: undefined\n\n  /** @deprecated */\n  char: undefined\n  /** @deprecated */\n  charCode: undefined\n  key: undefined\n  /** @deprecated */\n  keyCode: undefined\n\n  changedTouches: undefined\n  targetTouches: undefined\n  touches: undefined\n\n  which: undefined\n\n  altKey: undefined\n  ctrlKey: undefined\n  metaKey: undefined\n  shiftKey: undefined\n}\n\nexport interface BlurEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'blur'\n}\n\nexport interface FocusEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'focus'\n}\n\nexport interface FocusInEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'focusin'\n}\n\nexport interface FocusOutEvent<\n  TDelegateTarget = any,\n  TData = any,\n  TCurrentTarget = any,\n  TTarget = any,\n> extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n  type: 'focusout'\n}\n\ninterface TypeToTriggeredEventMap<\n  TDelegateTarget,\n  TData,\n  TCurrentTarget,\n  TTarget,\n> {\n  // Event\n\n  change: ChangeEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  resize: ResizeEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  scroll: ScrollEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  select: SelectEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  submit: SubmitEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n\n  // UIEvent\n\n  // MouseEvent\n\n  click: ClickEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  contextmenu: ContextMenuEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  dblclick: DoubleClickEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  mousedown: MouseDownEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  mouseenter: MouseEnterEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  mouseleave: MouseLeaveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  mousemove: MouseMoveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  mouseout: MouseOutEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  mouseover: MouseOverEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  mouseup: MouseUpEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n\n  // DragEvent\n\n  drag: DragEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  dragend: DragEndEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  dragenter: DragEnterEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  dragexit: DragExitEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  dragleave: DragLeaveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  dragover: DragOverEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  dragstart: DragStartEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  drop: DropEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n\n  // KeyboardEvent\n\n  keydown: KeyDownEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  keypress: KeyPressEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  keyup: KeyUpEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n\n  // TouchEvent\n\n  touchcancel: TouchCancelEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  touchend: TouchEndEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  touchmove: TouchMoveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  touchstart: TouchStartEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n\n  // FocusEvent\n\n  blur: BlurEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  focus: FocusEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  focusin: FocusInEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n  focusout: FocusOutEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>\n\n  [type: string]: EventObject<TDelegateTarget, TData, TCurrentTarget, TTarget>\n}\n\nexport type EventHandlerBase<TContext, T> = (\n  this: TContext,\n  e: T,\n  ...args: any[]\n) => any\n\nexport type EventHandler<TCurrentTarget, TData = undefined> = EventHandlerBase<\n  TCurrentTarget,\n  EventObject<TCurrentTarget, TData>\n>\n\nexport type TypeEventHandler<\n  TDelegateTarget,\n  TData,\n  TCurrentTarget,\n  TTarget,\n  TType extends keyof TypeToTriggeredEventMap<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget\n  >,\n> = EventHandlerBase<\n  TCurrentTarget,\n  TypeToTriggeredEventMap<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget\n  >[TType]\n>\n\nexport interface TypeEventHandlers<\n  TDelegateTarget,\n  TData,\n  TCurrentTarget,\n  TTarget,\n> extends TypeEventHandlersBase<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget\n  > {\n  // No idea why it's necessary to include `object` in the union but otherwise TypeScript complains that\n  // derived types of Event are not assignable to Event.\n  [type: string]:\n    | TypeEventHandler<TDelegateTarget, TData, TCurrentTarget, TTarget, string>\n    | false\n    | undefined\n    | Record<string, unknown>\n}\n\ntype TypeEventHandlersBase<TDelegateTarget, TData, TCurrentTarget, TTarget> = {\n  [TType in keyof TypeToTriggeredEventMap<\n    TDelegateTarget,\n    TData,\n    TCurrentTarget,\n    TTarget\n  >]?:\n    | TypeEventHandler<TDelegateTarget, TData, TCurrentTarget, TTarget, string>\n    | false\n    | Record<string, unknown>\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}