{"ast":null,"code":"import { Dom, FunctionExt } from '@antv/x6-common';\nimport { Point } from '@antv/x6-geometry';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nclass Anchor extends ToolsView.ToolItem {\n  get type() {\n    return this.options.type;\n  }\n  onRender() {\n    Dom.addClass(this.container, this.prefixClassName(`edge-tool-${this.type}-anchor`));\n    this.toggleArea(false);\n    this.update();\n  }\n  update() {\n    const type = this.type;\n    const edgeView = this.cellView;\n    const terminalView = edgeView.getTerminalView(type);\n    if (terminalView) {\n      this.updateAnchor();\n      this.updateArea();\n      this.container.style.display = '';\n    } else {\n      this.container.style.display = 'none';\n    }\n    return this;\n  }\n  updateAnchor() {\n    const childNodes = this.childNodes;\n    if (!childNodes) {\n      return;\n    }\n    const anchorNode = childNodes.anchor;\n    if (!anchorNode) {\n      return;\n    }\n    const type = this.type;\n    const edgeView = this.cellView;\n    const options = this.options;\n    const position = edgeView.getTerminalAnchor(type);\n    const customAnchor = edgeView.cell.prop([type, 'anchor']);\n    anchorNode.setAttribute('transform', `translate(${position.x}, ${position.y})`);\n    const anchorAttrs = customAnchor ? options.customAnchorAttrs : options.defaultAnchorAttrs;\n    if (anchorAttrs) {\n      Object.keys(anchorAttrs).forEach(attrName => {\n        anchorNode.setAttribute(attrName, anchorAttrs[attrName]);\n      });\n    }\n  }\n  updateArea() {\n    const childNodes = this.childNodes;\n    if (!childNodes) {\n      return;\n    }\n    const areaNode = childNodes.area;\n    if (!areaNode) {\n      return;\n    }\n    const type = this.type;\n    const edgeView = this.cellView;\n    const terminalView = edgeView.getTerminalView(type);\n    if (terminalView) {\n      const terminalCell = terminalView.cell;\n      const magnet = edgeView.getTerminalMagnet(type);\n      let padding = this.options.areaPadding || 0;\n      if (!Number.isFinite(padding)) {\n        padding = 0;\n      }\n      let bbox;\n      let angle;\n      let center;\n      if (terminalView.isEdgeElement(magnet)) {\n        bbox = terminalView.getBBox();\n        angle = 0;\n        center = bbox.getCenter();\n      } else {\n        bbox = terminalView.getUnrotatedBBoxOfElement(magnet);\n        angle = terminalCell.getAngle();\n        center = bbox.getCenter();\n        if (angle) {\n          center.rotate(-angle, terminalCell.getBBox().getCenter());\n        }\n      }\n      bbox.inflate(padding);\n      Dom.attr(areaNode, {\n        x: -bbox.width / 2,\n        y: -bbox.height / 2,\n        width: bbox.width,\n        height: bbox.height,\n        transform: `translate(${center.x}, ${center.y}) rotate(${angle})`\n      });\n    }\n  }\n  toggleArea(visible) {\n    if (this.childNodes) {\n      const elem = this.childNodes.area;\n      if (elem) {\n        elem.style.display = visible ? '' : 'none';\n      }\n    }\n  }\n  onMouseDown(evt) {\n    if (this.guard(evt)) {\n      return;\n    }\n    evt.stopPropagation();\n    evt.preventDefault();\n    this.graph.view.undelegateEvents();\n    if (this.options.documentEvents) {\n      this.delegateDocumentEvents(this.options.documentEvents);\n    }\n    this.focus();\n    this.toggleArea(this.options.restrictArea);\n    this.cell.startBatch('move-anchor', {\n      ui: true,\n      toolId: this.cid\n    });\n  }\n  resetAnchor(anchor) {\n    const type = this.type;\n    const cell = this.cell;\n    if (anchor) {\n      cell.prop([type, 'anchor'], anchor, {\n        rewrite: true,\n        ui: true,\n        toolId: this.cid\n      });\n    } else {\n      cell.removeProp([type, 'anchor'], {\n        ui: true,\n        toolId: this.cid\n      });\n    }\n  }\n  onMouseMove(evt) {\n    const terminalType = this.type;\n    const edgeView = this.cellView;\n    const terminalView = edgeView.getTerminalView(terminalType);\n    if (terminalView == null) {\n      return;\n    }\n    const e = this.normalizeEvent(evt);\n    const terminalCell = terminalView.cell;\n    const terminalMagnet = edgeView.getTerminalMagnet(terminalType);\n    let coords = this.graph.coord.clientToLocalPoint(e.clientX, e.clientY);\n    const snapFn = this.options.snap;\n    if (typeof snapFn === 'function') {\n      const tmp = FunctionExt.call(snapFn, edgeView, coords, terminalView, terminalMagnet, terminalType, edgeView, this);\n      coords = Point.create(tmp);\n    }\n    if (this.options.restrictArea) {\n      if (terminalView.isEdgeElement(terminalMagnet)) {\n        const pointAtConnection = terminalView.getClosestPoint(coords);\n        if (pointAtConnection) {\n          coords = pointAtConnection;\n        }\n      } else {\n        const bbox = terminalView.getUnrotatedBBoxOfElement(terminalMagnet);\n        const angle = terminalCell.getAngle();\n        const origin = terminalCell.getBBox().getCenter();\n        const rotatedCoords = coords.clone().rotate(angle, origin);\n        if (!bbox.containsPoint(rotatedCoords)) {\n          coords = bbox.getNearestPointToPoint(rotatedCoords).rotate(-angle, origin);\n        }\n      }\n    }\n    let anchor;\n    const anchorFn = this.options.anchor;\n    if (typeof anchorFn === 'function') {\n      anchor = FunctionExt.call(anchorFn, edgeView, coords, terminalView, terminalMagnet, terminalType, edgeView, this);\n    }\n    this.resetAnchor(anchor);\n    this.update();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onMouseUp(evt) {\n    this.graph.view.delegateEvents();\n    this.undelegateDocumentEvents();\n    this.blur();\n    this.toggleArea(false);\n    const edgeView = this.cellView;\n    if (this.options.removeRedundancies) {\n      edgeView.removeRedundantLinearVertices({\n        ui: true,\n        toolId: this.cid\n      });\n    }\n    this.cell.stopBatch('move-anchor', {\n      ui: true,\n      toolId: this.cid\n    });\n  }\n  onDblClick() {\n    const anchor = this.options.resetAnchor;\n    if (anchor) {\n      this.resetAnchor(anchor === true ? undefined : anchor);\n    }\n    this.update();\n  }\n}\n(function (Anchor) {\n  Anchor.config({\n    tagName: 'g',\n    markup: [{\n      tagName: 'circle',\n      selector: 'anchor',\n      attrs: {\n        cursor: 'pointer'\n      }\n    }, {\n      tagName: 'rect',\n      selector: 'area',\n      attrs: {\n        'pointer-events': 'none',\n        fill: 'none',\n        stroke: '#33334F',\n        'stroke-dasharray': '2,4',\n        rx: 5,\n        ry: 5\n      }\n    }],\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown',\n      dblclick: 'onDblClick'\n    },\n    documentEvents: {\n      mousemove: 'onMouseMove',\n      touchmove: 'onMouseMove',\n      mouseup: 'onMouseUp',\n      touchend: 'onMouseUp',\n      touchcancel: 'onMouseUp'\n    },\n    customAnchorAttrs: {\n      'stroke-width': 4,\n      stroke: '#33334F',\n      fill: '#FFFFFF',\n      r: 5\n    },\n    defaultAnchorAttrs: {\n      'stroke-width': 2,\n      stroke: '#FFFFFF',\n      fill: '#33334F',\n      r: 6\n    },\n    areaPadding: 6,\n    snapRadius: 10,\n    resetAnchor: true,\n    restrictArea: true,\n    removeRedundancies: true,\n    anchor: Util.getAnchor,\n    snap(pos, terminalView, terminalMagnet, terminalType, edgeView, toolView) {\n      const snapRadius = toolView.options.snapRadius || 0;\n      const isSource = terminalType === 'source';\n      const refIndex = isSource ? 0 : -1;\n      const ref = this.cell.getVertexAt(refIndex) || this.getTerminalAnchor(isSource ? 'target' : 'source');\n      if (ref) {\n        if (Math.abs(ref.x - pos.x) < snapRadius) pos.x = ref.x;\n        if (Math.abs(ref.y - pos.y) < snapRadius) pos.y = ref.y;\n      }\n      return pos;\n    }\n  });\n})(Anchor || (Anchor = {}));\nexport const SourceAnchor = Anchor.define({\n  name: 'source-anchor',\n  type: 'source'\n});\nexport const TargetAnchor = Anchor.define({\n  name: 'target-anchor',\n  type: 'target'\n});","map":{"version":3,"names":["Dom","FunctionExt","Point","ToolsView","Util","Anchor","ToolItem","type","options","onRender","addClass","container","prefixClassName","toggleArea","update","edgeView","cellView","terminalView","getTerminalView","updateAnchor","updateArea","style","display","childNodes","anchorNode","anchor","position","getTerminalAnchor","customAnchor","cell","prop","setAttribute","x","y","anchorAttrs","customAnchorAttrs","defaultAnchorAttrs","Object","keys","forEach","attrName","areaNode","area","terminalCell","magnet","getTerminalMagnet","padding","areaPadding","Number","isFinite","bbox","angle","center","isEdgeElement","getBBox","getCenter","getUnrotatedBBoxOfElement","getAngle","rotate","inflate","attr","width","height","transform","visible","elem","onMouseDown","evt","guard","stopPropagation","preventDefault","graph","view","undelegateEvents","documentEvents","delegateDocumentEvents","focus","restrictArea","startBatch","ui","toolId","cid","resetAnchor","rewrite","removeProp","onMouseMove","terminalType","e","normalizeEvent","terminalMagnet","coords","coord","clientToLocalPoint","clientX","clientY","snapFn","snap","tmp","call","create","pointAtConnection","getClosestPoint","origin","rotatedCoords","clone","containsPoint","getNearestPointToPoint","anchorFn","onMouseUp","delegateEvents","undelegateDocumentEvents","blur","removeRedundancies","removeRedundantLinearVertices","stopBatch","onDblClick","undefined","config","tagName","markup","selector","attrs","cursor","fill","stroke","rx","ry","events","mousedown","touchstart","dblclick","mousemove","touchmove","mouseup","touchend","touchcancel","r","snapRadius","getAnchor","pos","toolView","isSource","refIndex","ref","getVertexAt","Math","abs","SourceAnchor","define","name","TargetAnchor"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/tool/anchor.ts"],"sourcesContent":["import { Dom, FunctionExt } from '@antv/x6-common'\nimport { Point } from '@antv/x6-geometry'\nimport { Attr } from '../attr'\nimport { Edge } from '../../model/edge'\nimport { Node } from '../../model/node'\nimport { EdgeView } from '../../view/edge'\nimport { CellView } from '../../view/cell'\nimport { ToolsView } from '../../view/tool'\nimport * as Util from './util'\n\nclass Anchor extends ToolsView.ToolItem<EdgeView, Anchor.Options> {\n  protected get type() {\n    return this.options.type!\n  }\n\n  protected onRender() {\n    Dom.addClass(\n      this.container,\n      this.prefixClassName(`edge-tool-${this.type}-anchor`),\n    )\n\n    this.toggleArea(false)\n    this.update()\n  }\n\n  update() {\n    const type = this.type\n    const edgeView = this.cellView\n    const terminalView = edgeView.getTerminalView(type)\n    if (terminalView) {\n      this.updateAnchor()\n      this.updateArea()\n      this.container.style.display = ''\n    } else {\n      this.container.style.display = 'none'\n    }\n    return this\n  }\n\n  protected updateAnchor() {\n    const childNodes = this.childNodes\n    if (!childNodes) {\n      return\n    }\n\n    const anchorNode = childNodes.anchor\n    if (!anchorNode) {\n      return\n    }\n\n    const type = this.type\n    const edgeView = this.cellView\n    const options = this.options\n    const position = edgeView.getTerminalAnchor(type)\n    const customAnchor = edgeView.cell.prop([type, 'anchor'])\n    anchorNode.setAttribute(\n      'transform',\n      `translate(${position.x}, ${position.y})`,\n    )\n\n    const anchorAttrs = customAnchor\n      ? options.customAnchorAttrs\n      : options.defaultAnchorAttrs\n\n    if (anchorAttrs) {\n      Object.keys(anchorAttrs).forEach((attrName) => {\n        anchorNode.setAttribute(attrName, anchorAttrs[attrName] as string)\n      })\n    }\n  }\n\n  protected updateArea() {\n    const childNodes = this.childNodes\n    if (!childNodes) {\n      return\n    }\n\n    const areaNode = childNodes.area\n    if (!areaNode) {\n      return\n    }\n\n    const type = this.type\n    const edgeView = this.cellView\n    const terminalView = edgeView.getTerminalView(type)\n    if (terminalView) {\n      const terminalCell = terminalView.cell as Node\n      const magnet = edgeView.getTerminalMagnet(type)\n      let padding = this.options.areaPadding || 0\n      if (!Number.isFinite(padding)) {\n        padding = 0\n      }\n\n      let bbox\n      let angle\n      let center\n      if (terminalView.isEdgeElement(magnet)) {\n        bbox = terminalView.getBBox()\n        angle = 0\n        center = bbox.getCenter()\n      } else {\n        bbox = terminalView.getUnrotatedBBoxOfElement(magnet as SVGElement)\n        angle = terminalCell.getAngle()\n        center = bbox.getCenter()\n        if (angle) {\n          center.rotate(-angle, terminalCell.getBBox().getCenter())\n        }\n      }\n\n      bbox.inflate(padding)\n\n      Dom.attr(areaNode, {\n        x: -bbox.width / 2,\n        y: -bbox.height / 2,\n        width: bbox.width,\n        height: bbox.height,\n        transform: `translate(${center.x}, ${center.y}) rotate(${angle})`,\n      })\n    }\n  }\n\n  protected toggleArea(visible?: boolean) {\n    if (this.childNodes) {\n      const elem = this.childNodes.area as HTMLElement\n      if (elem) {\n        elem.style.display = visible ? '' : 'none'\n      }\n    }\n  }\n\n  protected onMouseDown(evt: Dom.MouseDownEvent) {\n    if (this.guard(evt)) {\n      return\n    }\n    evt.stopPropagation()\n    evt.preventDefault()\n    this.graph.view.undelegateEvents()\n    if (this.options.documentEvents) {\n      this.delegateDocumentEvents(this.options.documentEvents)\n    }\n    this.focus()\n    this.toggleArea(this.options.restrictArea)\n    this.cell.startBatch('move-anchor', {\n      ui: true,\n      toolId: this.cid,\n    })\n  }\n\n  protected resetAnchor(anchor?: Edge.TerminalCellData['anchor']) {\n    const type = this.type\n    const cell = this.cell\n    if (anchor) {\n      cell.prop([type, 'anchor'], anchor, {\n        rewrite: true,\n        ui: true,\n        toolId: this.cid,\n      })\n    } else {\n      cell.removeProp([type, 'anchor'], {\n        ui: true,\n        toolId: this.cid,\n      })\n    }\n  }\n\n  protected onMouseMove(evt: Dom.MouseMoveEvent) {\n    const terminalType = this.type\n    const edgeView = this.cellView\n    const terminalView = edgeView.getTerminalView(terminalType)\n    if (terminalView == null) {\n      return\n    }\n\n    const e = this.normalizeEvent(evt)\n    const terminalCell = terminalView.cell\n    const terminalMagnet = edgeView.getTerminalMagnet(terminalType)!\n    let coords = this.graph.coord.clientToLocalPoint(e.clientX, e.clientY)\n\n    const snapFn = this.options.snap\n    if (typeof snapFn === 'function') {\n      const tmp = FunctionExt.call(\n        snapFn,\n        edgeView,\n        coords,\n        terminalView,\n        terminalMagnet,\n        terminalType,\n        edgeView,\n        this,\n      )\n      coords = Point.create(tmp)\n    }\n\n    if (this.options.restrictArea) {\n      if (terminalView.isEdgeElement(terminalMagnet)) {\n        const pointAtConnection = (terminalView as EdgeView).getClosestPoint(\n          coords,\n        )\n        if (pointAtConnection) {\n          coords = pointAtConnection\n        }\n      } else {\n        const bbox = terminalView.getUnrotatedBBoxOfElement(\n          terminalMagnet as SVGElement,\n        )\n        const angle = (terminalCell as Node).getAngle()\n        const origin = terminalCell.getBBox().getCenter()\n        const rotatedCoords = coords.clone().rotate(angle, origin)\n        if (!bbox.containsPoint(rotatedCoords)) {\n          coords = bbox\n            .getNearestPointToPoint(rotatedCoords)\n            .rotate(-angle, origin)\n        }\n      }\n    }\n\n    let anchor\n    const anchorFn = this.options.anchor\n    if (typeof anchorFn === 'function') {\n      anchor = FunctionExt.call(\n        anchorFn,\n        edgeView,\n        coords,\n        terminalView,\n        terminalMagnet,\n        terminalType,\n        edgeView,\n        this,\n      ) as Edge.TerminalCellData['anchor']\n    }\n\n    this.resetAnchor(anchor)\n    this.update()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected onMouseUp(evt: Dom.MouseUpEvent) {\n    this.graph.view.delegateEvents()\n    this.undelegateDocumentEvents()\n    this.blur()\n    this.toggleArea(false)\n    const edgeView = this.cellView\n    if (this.options.removeRedundancies) {\n      edgeView.removeRedundantLinearVertices({ ui: true, toolId: this.cid })\n    }\n    this.cell.stopBatch('move-anchor', { ui: true, toolId: this.cid })\n  }\n\n  protected onDblClick() {\n    const anchor = this.options.resetAnchor\n    if (anchor) {\n      this.resetAnchor(anchor === true ? undefined : anchor)\n    }\n    this.update()\n  }\n}\n\nnamespace Anchor {\n  export interface Options extends ToolsView.ToolItem.Options {\n    type?: Edge.TerminalType\n    snapRadius?: number\n    areaPadding?: number\n    restrictArea?: boolean\n    resetAnchor?: boolean | Edge.TerminalCellData['anchor']\n    removeRedundancies?: boolean\n    defaultAnchorAttrs?: Attr.SimpleAttrs\n    customAnchorAttrs?: Attr.SimpleAttrs\n    snap?: (\n      this: EdgeView,\n      pos: Point,\n      terminalView: CellView,\n      terminalMagnet: Element | null,\n      terminalType: Edge.TerminalType,\n      edgeView: EdgeView,\n      toolView: Anchor,\n    ) => Point.PointLike\n    anchor?: (\n      this: EdgeView,\n      pos: Point,\n      terminalView: CellView,\n      terminalMagnet: Element | null,\n      terminalType: Edge.TerminalType,\n      edgeView: EdgeView,\n      toolView: Anchor,\n    ) => Edge.TerminalCellData['anchor']\n  }\n}\n\nnamespace Anchor {\n  Anchor.config<Anchor.Options>({\n    tagName: 'g',\n    markup: [\n      {\n        tagName: 'circle',\n        selector: 'anchor',\n        attrs: {\n          cursor: 'pointer',\n        },\n      },\n      {\n        tagName: 'rect',\n        selector: 'area',\n        attrs: {\n          'pointer-events': 'none',\n          fill: 'none',\n          stroke: '#33334F',\n          'stroke-dasharray': '2,4',\n          rx: 5,\n          ry: 5,\n        },\n      },\n    ],\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown',\n      dblclick: 'onDblClick',\n    },\n    documentEvents: {\n      mousemove: 'onMouseMove',\n      touchmove: 'onMouseMove',\n      mouseup: 'onMouseUp',\n      touchend: 'onMouseUp',\n      touchcancel: 'onMouseUp',\n    },\n    customAnchorAttrs: {\n      'stroke-width': 4,\n      stroke: '#33334F',\n      fill: '#FFFFFF',\n      r: 5,\n    },\n    defaultAnchorAttrs: {\n      'stroke-width': 2,\n      stroke: '#FFFFFF',\n      fill: '#33334F',\n      r: 6,\n    },\n    areaPadding: 6,\n    snapRadius: 10,\n    resetAnchor: true,\n    restrictArea: true,\n    removeRedundancies: true,\n    anchor: Util.getAnchor,\n    snap(pos, terminalView, terminalMagnet, terminalType, edgeView, toolView) {\n      const snapRadius = toolView.options.snapRadius || 0\n      const isSource = terminalType === 'source'\n      const refIndex = isSource ? 0 : -1\n      const ref =\n        this.cell.getVertexAt(refIndex) ||\n        this.getTerminalAnchor(isSource ? 'target' : 'source')\n      if (ref) {\n        if (Math.abs(ref.x - pos.x) < snapRadius) pos.x = ref.x\n        if (Math.abs(ref.y - pos.y) < snapRadius) pos.y = ref.y\n      }\n      return pos\n    },\n  })\n}\n\nexport const SourceAnchor = Anchor.define<Anchor.Options>({\n  name: 'source-anchor',\n  type: 'source',\n})\n\nexport const TargetAnchor = Anchor.define<Anchor.Options>({\n  name: 'target-anchor',\n  type: 'target',\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}