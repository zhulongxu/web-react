{"ast":null,"code":"import { ObjectExt } from '@antv/x6-common';\nimport { Point } from '@antv/x6-geometry';\nimport { PortLayout, PortLabelLayout } from '../registry';\nexport class PortManager {\n  constructor(data) {\n    this.ports = [];\n    this.groups = {};\n    this.init(ObjectExt.cloneDeep(data));\n  }\n  getPorts() {\n    return this.ports;\n  }\n  getGroup(groupName) {\n    return groupName != null ? this.groups[groupName] : null;\n  }\n  getPortsByGroup(groupName) {\n    return this.ports.filter(p => p.group === groupName || p.group == null && groupName == null);\n  }\n  getPortsLayoutByGroup(groupName, elemBBox) {\n    const ports = this.getPortsByGroup(groupName);\n    const group = groupName ? this.getGroup(groupName) : null;\n    const groupPosition = group ? group.position : null;\n    const groupPositionName = groupPosition ? groupPosition.name : null;\n    let layoutFn;\n    if (groupPositionName != null) {\n      const fn = PortLayout.registry.get(groupPositionName);\n      if (fn == null) {\n        return PortLayout.registry.onNotFound(groupPositionName);\n      }\n      layoutFn = fn;\n    } else {\n      layoutFn = PortLayout.presets.left;\n    }\n    const portsArgs = ports.map(port => port && port.position && port.position.args || {});\n    const groupArgs = groupPosition && groupPosition.args || {};\n    const layouts = layoutFn(portsArgs, elemBBox, groupArgs);\n    return layouts.map((portLayout, index) => {\n      const port = ports[index];\n      return {\n        portLayout,\n        portId: port.id,\n        portSize: port.size,\n        portAttrs: port.attrs,\n        labelSize: port.label.size,\n        labelLayout: this.getPortLabelLayout(port, Point.create(portLayout.position), elemBBox)\n      };\n    });\n  }\n  init(data) {\n    const {\n      groups,\n      items\n    } = data;\n    if (groups != null) {\n      Object.keys(groups).forEach(key => {\n        this.groups[key] = this.parseGroup(groups[key]);\n      });\n    }\n    if (Array.isArray(items)) {\n      items.forEach(item => {\n        this.ports.push(this.parsePort(item));\n      });\n    }\n  }\n  parseGroup(group) {\n    return Object.assign(Object.assign({}, group), {\n      label: this.getLabel(group, true),\n      position: this.getPortPosition(group.position, true)\n    });\n  }\n  parsePort(port) {\n    const result = Object.assign({}, port);\n    const group = this.getGroup(port.group) || {};\n    result.markup = result.markup || group.markup;\n    result.attrs = ObjectExt.merge({}, group.attrs, result.attrs);\n    result.position = this.createPosition(group, result);\n    result.label = ObjectExt.merge({}, group.label, this.getLabel(result));\n    result.zIndex = this.getZIndex(group, result);\n    result.size = Object.assign(Object.assign({}, group.size), result.size);\n    return result;\n  }\n  getZIndex(group, port) {\n    if (typeof port.zIndex === 'number') {\n      return port.zIndex;\n    }\n    if (typeof group.zIndex === 'number' || group.zIndex === 'auto') {\n      return group.zIndex;\n    }\n    return 'auto';\n  }\n  createPosition(group, port) {\n    return ObjectExt.merge({\n      name: 'left',\n      args: {}\n    }, group.position, {\n      args: port.args\n    });\n  }\n  getPortPosition(position, setDefault = false) {\n    if (position == null) {\n      if (setDefault) {\n        return {\n          name: 'left',\n          args: {}\n        };\n      }\n    } else {\n      if (typeof position === 'string') {\n        return {\n          name: position,\n          args: {}\n        };\n      }\n      if (Array.isArray(position)) {\n        return {\n          name: 'absolute',\n          args: {\n            x: position[0],\n            y: position[1]\n          }\n        };\n      }\n      if (typeof position === 'object') {\n        return position;\n      }\n    }\n    return {\n      args: {}\n    };\n  }\n  getPortLabelPosition(position, setDefault = false) {\n    if (position == null) {\n      if (setDefault) {\n        return {\n          name: 'left',\n          args: {}\n        };\n      }\n    } else {\n      if (typeof position === 'string') {\n        return {\n          name: position,\n          args: {}\n        };\n      }\n      if (typeof position === 'object') {\n        return position;\n      }\n    }\n    return {\n      args: {}\n    };\n  }\n  getLabel(item, setDefaults = false) {\n    const label = item.label || {};\n    label.position = this.getPortLabelPosition(label.position, setDefaults);\n    return label;\n  }\n  getPortLabelLayout(port, portPosition, elemBBox) {\n    const name = port.label.position.name || 'left';\n    const args = port.label.position.args || {};\n    const layoutFn = PortLabelLayout.registry.get(name) || PortLabelLayout.presets.left;\n    if (layoutFn) {\n      return layoutFn(portPosition, elemBBox, args);\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["ObjectExt","Point","PortLayout","PortLabelLayout","PortManager","constructor","data","ports","groups","init","cloneDeep","getPorts","getGroup","groupName","getPortsByGroup","filter","p","group","getPortsLayoutByGroup","elemBBox","groupPosition","position","groupPositionName","name","layoutFn","fn","registry","get","onNotFound","presets","left","portsArgs","map","port","args","groupArgs","layouts","portLayout","index","portId","id","portSize","size","portAttrs","attrs","labelSize","label","labelLayout","getPortLabelLayout","create","items","Object","keys","forEach","key","parseGroup","Array","isArray","item","push","parsePort","assign","getLabel","getPortPosition","result","markup","merge","createPosition","zIndex","getZIndex","setDefault","x","y","getPortLabelPosition","setDefaults","portPosition"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/model/port.ts"],"sourcesContent":["import { JSONObject, ObjectExt, Size, KeyValue } from '@antv/x6-common'\nimport { Point, Rectangle } from '@antv/x6-geometry'\nimport { Markup } from '../view'\nimport { Attr, PortLayout, PortLabelLayout } from '../registry'\n\nexport class PortManager {\n  ports: PortManager.Port[]\n  groups: { [name: string]: PortManager.Group }\n\n  constructor(data: PortManager.Metadata) {\n    this.ports = []\n    this.groups = {}\n    this.init(ObjectExt.cloneDeep(data))\n  }\n\n  getPorts() {\n    return this.ports\n  }\n\n  getGroup(groupName?: string | null) {\n    return groupName != null ? this.groups[groupName] : null\n  }\n\n  getPortsByGroup(groupName?: string): PortManager.Port[] {\n    return this.ports.filter(\n      (p) => p.group === groupName || (p.group == null && groupName == null),\n    )\n  }\n\n  getPortsLayoutByGroup(groupName: string | undefined, elemBBox: Rectangle) {\n    const ports = this.getPortsByGroup(groupName)\n    const group = groupName ? this.getGroup(groupName) : null\n    const groupPosition = group ? group.position : null\n    const groupPositionName = groupPosition ? groupPosition.name : null\n\n    let layoutFn: PortLayout.Definition<any>\n\n    if (groupPositionName != null) {\n      const fn = PortLayout.registry.get(groupPositionName)\n      if (fn == null) {\n        return PortLayout.registry.onNotFound(groupPositionName)\n      }\n      layoutFn = fn\n    } else {\n      layoutFn = PortLayout.presets.left\n    }\n\n    const portsArgs = ports.map(\n      (port) => (port && port.position && port.position.args) || {},\n    )\n    const groupArgs = (groupPosition && groupPosition.args) || {}\n    const layouts = layoutFn(portsArgs, elemBBox, groupArgs)\n    return layouts.map<PortManager.LayoutResult>((portLayout, index) => {\n      const port = ports[index]\n      return {\n        portLayout,\n        portId: port.id!,\n        portSize: port.size,\n        portAttrs: port.attrs,\n        labelSize: port.label.size,\n        labelLayout: this.getPortLabelLayout(\n          port,\n          Point.create(portLayout.position),\n          elemBBox,\n        ),\n      }\n    })\n  }\n\n  protected init(data: PortManager.Metadata) {\n    const { groups, items } = data\n\n    if (groups != null) {\n      Object.keys(groups).forEach((key) => {\n        this.groups[key] = this.parseGroup(groups[key])\n      })\n    }\n\n    if (Array.isArray(items)) {\n      items.forEach((item) => {\n        this.ports.push(this.parsePort(item))\n      })\n    }\n  }\n\n  protected parseGroup(group: PortManager.GroupMetadata) {\n    return {\n      ...group,\n      label: this.getLabel(group, true),\n      position: this.getPortPosition(group.position, true),\n    } as PortManager.Group\n  }\n\n  protected parsePort(port: PortManager.PortMetadata) {\n    const result = { ...port } as PortManager.Port\n    const group = this.getGroup(port.group) || ({} as PortManager.Group)\n\n    result.markup = result.markup || group.markup\n    result.attrs = ObjectExt.merge({}, group.attrs, result.attrs)\n    result.position = this.createPosition(group, result)\n    result.label = ObjectExt.merge({}, group.label, this.getLabel(result))\n    result.zIndex = this.getZIndex(group, result)\n    result.size = { ...group.size, ...result.size } as Size\n\n    return result\n  }\n\n  protected getZIndex(\n    group: PortManager.Group,\n    port: PortManager.PortMetadata,\n  ) {\n    if (typeof port.zIndex === 'number') {\n      return port.zIndex\n    }\n\n    if (typeof group.zIndex === 'number' || group.zIndex === 'auto') {\n      return group.zIndex\n    }\n\n    return 'auto'\n  }\n\n  protected createPosition(\n    group: PortManager.Group,\n    port: PortManager.PortMetadata,\n  ) {\n    return ObjectExt.merge(\n      {\n        name: 'left',\n        args: {},\n      },\n      group.position,\n      { args: port.args },\n    ) as PortManager.PortPosition\n  }\n\n  protected getPortPosition(\n    position?: PortManager.PortPositionMetadata,\n    setDefault = false,\n  ): PortManager.PortPosition {\n    if (position == null) {\n      if (setDefault) {\n        return { name: 'left', args: {} }\n      }\n    } else {\n      if (typeof position === 'string') {\n        return {\n          name: position,\n          args: {},\n        }\n      }\n\n      if (Array.isArray(position)) {\n        return {\n          name: 'absolute',\n          args: { x: position[0], y: position[1] },\n        }\n      }\n\n      if (typeof position === 'object') {\n        return position\n      }\n    }\n\n    return { args: {} }\n  }\n\n  protected getPortLabelPosition(\n    position?: PortManager.PortLabelPositionMetadata,\n    setDefault = false,\n  ): PortManager.PortLabelPosition {\n    if (position == null) {\n      if (setDefault) {\n        return { name: 'left', args: {} }\n      }\n    } else {\n      if (typeof position === 'string') {\n        return {\n          name: position,\n          args: {},\n        }\n      }\n\n      if (typeof position === 'object') {\n        return position\n      }\n    }\n\n    return { args: {} }\n  }\n\n  protected getLabel(item: PortManager.GroupMetadata, setDefaults = false) {\n    const label = item.label || {}\n    label.position = this.getPortLabelPosition(label.position, setDefaults)\n    return label as PortManager.Label\n  }\n\n  protected getPortLabelLayout(\n    port: PortManager.Port,\n    portPosition: Point,\n    elemBBox: Rectangle,\n  ) {\n    const name = port.label.position.name || 'left'\n    const args = port.label.position.args || {}\n    const layoutFn =\n      PortLabelLayout.registry.get(name) || PortLabelLayout.presets.left\n    if (layoutFn) {\n      return layoutFn(portPosition, elemBBox, args)\n    }\n\n    return null\n  }\n}\n\nexport namespace PortManager {\n  export interface Metadata {\n    groups?: { [name: string]: GroupMetadata }\n    items: PortMetadata[]\n  }\n\n  export type PortPosition =\n    | Partial<PortLayout.NativeItem>\n    | Partial<PortLayout.ManaualItem>\n\n  export type PortPositionMetadata =\n    | PortLayout.NativeNames\n    | Exclude<string, PortLayout.NativeNames>\n    | Point.PointData // absolute layout\n    | PortPosition\n\n  export type PortLabelPosition =\n    | Partial<PortLabelLayout.NativeItem>\n    | Partial<PortLabelLayout.ManaualItem>\n\n  export type PortLabelPositionMetadata =\n    | PortLabelLayout.NativeNames\n    | Exclude<string, PortLabelLayout.NativeNames>\n    | PortLabelPosition\n\n  export interface LabelMetadata {\n    markup?: Markup\n    size?: Size\n    position?: PortLabelPositionMetadata\n  }\n\n  export interface Label {\n    markup: string\n    size?: Size\n    position: PortLabelPosition\n  }\n\n  interface Common {\n    markup: Markup\n    attrs: Attr.CellAttrs\n    zIndex: number | 'auto'\n    size?: Size\n  }\n\n  export interface GroupMetadata extends Partial<Common>, KeyValue {\n    label?: LabelMetadata\n    position?: PortPositionMetadata\n  }\n\n  export interface Group extends Partial<Common> {\n    label: Label\n    position: PortPosition\n  }\n\n  interface PortBase {\n    group?: string\n    /**\n     * Arguments for the port layout function.\n     */\n    args?: JSONObject\n  }\n\n  export interface PortMetadata extends Partial<Common>, PortBase, KeyValue {\n    id?: string\n    label?: LabelMetadata\n  }\n\n  export interface Port extends Group, PortBase {\n    id: string\n  }\n\n  export interface LayoutResult {\n    portId: string\n    portAttrs?: Attr.CellAttrs\n    portSize?: Size\n    portLayout: PortLayout.Result\n    labelSize?: Size\n    labelLayout: PortLabelLayout.Result | null\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}