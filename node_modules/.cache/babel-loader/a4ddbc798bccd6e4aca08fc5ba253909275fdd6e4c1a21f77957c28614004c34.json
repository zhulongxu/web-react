{"ast":null,"code":"import { Point } from '@antv/x6-geometry';\nimport { Dom, NumberExt, FunctionExt } from '@antv/x6-common';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport class Button extends ToolsView.ToolItem {\n  onRender() {\n    Dom.addClass(this.container, this.prefixClassName('cell-tool-button'));\n    this.update();\n  }\n  update() {\n    this.updatePosition();\n    return this;\n  }\n  updatePosition() {\n    const view = this.cellView;\n    const matrix = view.cell.isEdge() ? this.getEdgeMatrix() : this.getNodeMatrix();\n    Dom.transform(this.container, matrix, {\n      absolute: true\n    });\n  }\n  getNodeMatrix() {\n    const view = this.cellView;\n    const options = this.options;\n    let {\n      x = 0,\n      y = 0\n    } = options;\n    const {\n      offset,\n      useCellGeometry,\n      rotate\n    } = options;\n    let bbox = Util.getViewBBox(view, useCellGeometry);\n    const angle = view.cell.getAngle();\n    if (!rotate) {\n      bbox = bbox.bbox(angle);\n    }\n    let offsetX = 0;\n    let offsetY = 0;\n    if (typeof offset === 'number') {\n      offsetX = offset;\n      offsetY = offset;\n    } else if (typeof offset === 'object') {\n      offsetX = offset.x;\n      offsetY = offset.y;\n    }\n    x = NumberExt.normalizePercentage(x, bbox.width);\n    y = NumberExt.normalizePercentage(y, bbox.height);\n    let matrix = Dom.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n    if (rotate) {\n      matrix = matrix.rotate(angle);\n    }\n    matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);\n    return matrix;\n  }\n  getEdgeMatrix() {\n    const view = this.cellView;\n    const options = this.options;\n    const {\n      offset = 0,\n      distance = 0,\n      rotate\n    } = options;\n    let tangent;\n    let position;\n    let angle;\n    const d = NumberExt.normalizePercentage(distance, 1);\n    if (d >= 0 && d <= 1) {\n      tangent = view.getTangentAtRatio(d);\n    } else {\n      tangent = view.getTangentAtLength(d);\n    }\n    if (tangent) {\n      position = tangent.start;\n      angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n    } else {\n      position = view.getConnection().start;\n      angle = 0;\n    }\n    let matrix = Dom.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n    if (typeof offset === 'object') {\n      matrix = matrix.translate(offset.x || 0, offset.y || 0);\n    } else {\n      matrix = matrix.translate(0, offset);\n    }\n    if (!rotate) {\n      matrix = matrix.rotate(-angle);\n    }\n    return matrix;\n  }\n  onMouseDown(e) {\n    if (this.guard(e)) {\n      return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    const onClick = this.options.onClick;\n    if (typeof onClick === 'function') {\n      FunctionExt.call(onClick, this.cellView, {\n        e,\n        view: this.cellView,\n        cell: this.cellView.cell,\n        btn: this\n      });\n    }\n  }\n}\n(function (Button) {\n  Button.config({\n    name: 'button',\n    useCellGeometry: true,\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    }\n  });\n})(Button || (Button = {}));\n(function (Button) {\n  Button.Remove = Button.define({\n    name: 'button-remove',\n    markup: [{\n      tagName: 'circle',\n      selector: 'button',\n      attrs: {\n        r: 7,\n        fill: '#FF1D00',\n        cursor: 'pointer'\n      }\n    }, {\n      tagName: 'path',\n      selector: 'icon',\n      attrs: {\n        d: 'M -3 -3 3 3 M -3 3 3 -3',\n        fill: 'none',\n        stroke: '#FFFFFF',\n        'stroke-width': 2,\n        'pointer-events': 'none'\n      }\n    }],\n    distance: 60,\n    offset: 0,\n    useCellGeometry: true,\n    onClick({\n      view,\n      btn\n    }) {\n      btn.parent.remove();\n      view.cell.remove({\n        ui: true,\n        toolId: btn.cid\n      });\n    }\n  });\n})(Button || (Button = {}));","map":{"version":3,"names":["Point","Dom","NumberExt","FunctionExt","ToolsView","Util","Button","ToolItem","onRender","addClass","container","prefixClassName","update","updatePosition","view","cellView","matrix","cell","isEdge","getEdgeMatrix","getNodeMatrix","transform","absolute","options","x","y","offset","useCellGeometry","rotate","bbox","getViewBBox","angle","getAngle","offsetX","offsetY","normalizePercentage","width","height","createSVGMatrix","translate","distance","tangent","position","d","getTangentAtRatio","getTangentAtLength","start","vector","vectorAngle","getConnection","onMouseDown","e","guard","stopPropagation","preventDefault","onClick","call","btn","config","name","events","mousedown","touchstart","Remove","define","markup","tagName","selector","attrs","r","fill","cursor","stroke","parent","remove","ui","toolId","cid"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/tool/button.ts"],"sourcesContent":["import { Point } from '@antv/x6-geometry'\nimport { Dom, NumberExt, FunctionExt } from '@antv/x6-common'\nimport { CellView } from '../../view/cell'\nimport { NodeView } from '../../view/node'\nimport { EdgeView } from '../../view/edge'\nimport { ToolsView } from '../../view/tool'\nimport * as Util from './util'\nimport { Cell } from '../../model'\n\nexport class Button extends ToolsView.ToolItem<\n  EdgeView | NodeView,\n  Button.Options\n> {\n  protected onRender() {\n    Dom.addClass(this.container, this.prefixClassName('cell-tool-button'))\n    this.update()\n  }\n\n  update() {\n    this.updatePosition()\n    return this\n  }\n\n  protected updatePosition() {\n    const view = this.cellView\n    const matrix = view.cell.isEdge()\n      ? this.getEdgeMatrix()\n      : this.getNodeMatrix()\n    Dom.transform(this.container as SVGElement, matrix, { absolute: true })\n  }\n\n  protected getNodeMatrix() {\n    const view = this.cellView as NodeView\n    const options = this.options\n\n    let { x = 0, y = 0 } = options\n    const { offset, useCellGeometry, rotate } = options\n\n    let bbox = Util.getViewBBox(view, useCellGeometry)\n    const angle = view.cell.getAngle()\n    if (!rotate) {\n      bbox = bbox.bbox(angle)\n    }\n\n    let offsetX = 0\n    let offsetY = 0\n    if (typeof offset === 'number') {\n      offsetX = offset\n      offsetY = offset\n    } else if (typeof offset === 'object') {\n      offsetX = offset.x\n      offsetY = offset.y\n    }\n\n    x = NumberExt.normalizePercentage(x, bbox.width)\n    y = NumberExt.normalizePercentage(y, bbox.height)\n\n    let matrix = Dom.createSVGMatrix().translate(\n      bbox.x + bbox.width / 2,\n      bbox.y + bbox.height / 2,\n    )\n\n    if (rotate) {\n      matrix = matrix.rotate(angle)\n    }\n\n    matrix = matrix.translate(\n      x + offsetX - bbox.width / 2,\n      y + offsetY - bbox.height / 2,\n    )\n\n    return matrix\n  }\n\n  protected getEdgeMatrix() {\n    const view = this.cellView as EdgeView\n    const options = this.options\n    const { offset = 0, distance = 0, rotate } = options\n\n    let tangent\n    let position\n    let angle\n\n    const d = NumberExt.normalizePercentage(distance, 1)\n    if (d >= 0 && d <= 1) {\n      tangent = view.getTangentAtRatio(d)\n    } else {\n      tangent = view.getTangentAtLength(d)\n    }\n\n    if (tangent) {\n      position = tangent.start\n      angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0\n    } else {\n      position = view.getConnection()!.start!\n      angle = 0\n    }\n\n    let matrix = Dom.createSVGMatrix()\n      .translate(position.x, position.y)\n      .rotate(angle)\n\n    if (typeof offset === 'object') {\n      matrix = matrix.translate(offset.x || 0, offset.y || 0)\n    } else {\n      matrix = matrix.translate(0, offset)\n    }\n\n    if (!rotate) {\n      matrix = matrix.rotate(-angle)\n    }\n\n    return matrix\n  }\n\n  protected onMouseDown(e: Dom.MouseDownEvent) {\n    if (this.guard(e)) {\n      return\n    }\n\n    e.stopPropagation()\n    e.preventDefault()\n\n    const onClick = this.options.onClick\n    if (typeof onClick === 'function') {\n      FunctionExt.call(onClick, this.cellView, {\n        e,\n        view: this.cellView,\n        cell: this.cellView.cell,\n        btn: this,\n      })\n    }\n  }\n}\n\nexport namespace Button {\n  export interface Options extends ToolsView.ToolItem.Options {\n    x?: number | string\n    y?: number | string\n    distance?: number | string\n    offset?: number | Point.PointLike\n    rotate?: boolean\n    useCellGeometry?: boolean\n    onClick?: (\n      this: CellView,\n      args: {\n        e: Dom.MouseDownEvent\n        cell: Cell\n        view: CellView\n        btn: Button\n      },\n    ) => any\n  }\n}\n\nexport namespace Button {\n  Button.config<Button.Options>({\n    name: 'button',\n    useCellGeometry: true,\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown',\n    },\n  })\n}\n\nexport namespace Button {\n  export const Remove = Button.define<Button.Options>({\n    name: 'button-remove',\n    markup: [\n      {\n        tagName: 'circle',\n        selector: 'button',\n        attrs: {\n          r: 7,\n          fill: '#FF1D00',\n          cursor: 'pointer',\n        },\n      },\n      {\n        tagName: 'path',\n        selector: 'icon',\n        attrs: {\n          d: 'M -3 -3 3 3 M -3 3 3 -3',\n          fill: 'none',\n          stroke: '#FFFFFF',\n          'stroke-width': 2,\n          'pointer-events': 'none',\n        },\n      },\n    ],\n    distance: 60,\n    offset: 0,\n    useCellGeometry: true,\n    onClick({ view, btn }) {\n      btn.parent.remove()\n      view.cell.remove({ ui: true, toolId: btn.cid })\n    },\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}