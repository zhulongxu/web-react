{"ast":null,"code":"const rclass = /[\\t\\r\\n\\f]/g;\nconst rnotwhite = /\\S+/g;\nconst fillSpaces = str => ` ${str} `;\nexport function getClass(elem) {\n  return elem && elem.getAttribute && elem.getAttribute('class') || '';\n}\nexport function hasClass(elem, selector) {\n  if (elem == null || selector == null) {\n    return false;\n  }\n  const classNames = fillSpaces(getClass(elem));\n  const className = fillSpaces(selector);\n  return elem.nodeType === 1 ? classNames.replace(rclass, ' ').includes(className) : false;\n}\nexport function addClass(elem, selector) {\n  if (elem == null || selector == null) {\n    return;\n  }\n  if (typeof selector === 'function') {\n    return addClass(elem, selector(getClass(elem)));\n  }\n  if (typeof selector === 'string' && elem.nodeType === 1) {\n    const classes = selector.match(rnotwhite) || [];\n    const oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ');\n    let newValue = classes.reduce((memo, cls) => {\n      if (memo.indexOf(fillSpaces(cls)) < 0) {\n        return `${memo}${cls} `;\n      }\n      return memo;\n    }, oldValue);\n    newValue = newValue.trim();\n    if (oldValue !== newValue) {\n      elem.setAttribute('class', newValue);\n    }\n  }\n}\nexport function removeClass(elem, selector) {\n  if (elem == null) {\n    return;\n  }\n  if (typeof selector === 'function') {\n    return removeClass(elem, selector(getClass(elem)));\n  }\n  if ((!selector || typeof selector === 'string') && elem.nodeType === 1) {\n    const classes = (selector || '').match(rnotwhite) || [];\n    const oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ');\n    let newValue = classes.reduce((memo, cls) => {\n      const className = fillSpaces(cls);\n      if (memo.indexOf(className) > -1) {\n        return memo.replace(className, ' ');\n      }\n      return memo;\n    }, oldValue);\n    newValue = selector ? newValue.trim() : '';\n    if (oldValue !== newValue) {\n      elem.setAttribute('class', newValue);\n    }\n  }\n}\nexport function toggleClass(elem, selector, stateVal) {\n  if (elem == null || selector == null) {\n    return;\n  }\n  if (stateVal != null && typeof selector === 'string') {\n    stateVal ? addClass(elem, selector) : removeClass(elem, selector);\n    return;\n  }\n  if (typeof selector === 'function') {\n    return toggleClass(elem, selector(getClass(elem), stateVal), stateVal);\n  }\n  if (typeof selector === 'string') {\n    const metches = selector.match(rnotwhite) || [];\n    metches.forEach(cls => {\n      hasClass(elem, cls) ? removeClass(elem, cls) : addClass(elem, cls);\n    });\n  }\n}","map":{"version":3,"names":["rclass","rnotwhite","fillSpaces","str","getClass","elem","getAttribute","hasClass","selector","classNames","className","nodeType","replace","includes","addClass","classes","match","oldValue","newValue","reduce","memo","cls","indexOf","trim","setAttribute","removeClass","toggleClass","stateVal","metches","forEach"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-common@2.0.17/node_modules/@antv/x6-common/src/dom/class.ts"],"sourcesContent":["const rclass = /[\\t\\r\\n\\f]/g\nconst rnotwhite = /\\S+/g\n\nconst fillSpaces = (str: string) => ` ${str} `\n\nexport function getClass(elem: Element) {\n  return (elem && elem.getAttribute && elem.getAttribute('class')) || ''\n}\n\nexport function hasClass(elem: Element | null, selector: string | null) {\n  if (elem == null || selector == null) {\n    return false\n  }\n\n  const classNames = fillSpaces(getClass(elem))\n  const className = fillSpaces(selector)\n\n  return elem.nodeType === 1\n    ? classNames.replace(rclass, ' ').includes(className)\n    : false\n}\n\nexport function addClass(\n  elem: Element | null,\n  selector: ((cls: string) => string) | string | null,\n): void {\n  if (elem == null || selector == null) {\n    return\n  }\n\n  if (typeof selector === 'function') {\n    return addClass(elem, selector(getClass(elem)))\n  }\n\n  if (typeof selector === 'string' && elem.nodeType === 1) {\n    const classes: string[] = selector.match(rnotwhite) || []\n    const oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ')\n    let newValue = classes.reduce((memo, cls) => {\n      if (memo.indexOf(fillSpaces(cls)) < 0) {\n        return `${memo}${cls} `\n      }\n      return memo\n    }, oldValue)\n\n    newValue = newValue.trim()\n\n    if (oldValue !== newValue) {\n      elem.setAttribute('class', newValue)\n    }\n  }\n}\n\nexport function removeClass(\n  elem: Element | null,\n  selector?: ((cls: string) => string) | string | null,\n): void {\n  if (elem == null) {\n    return\n  }\n\n  if (typeof selector === 'function') {\n    return removeClass(elem, selector(getClass(elem)))\n  }\n\n  if ((!selector || typeof selector === 'string') && elem.nodeType === 1) {\n    const classes: string[] = (selector || '').match(rnotwhite) || []\n    const oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ')\n    let newValue = classes.reduce((memo, cls) => {\n      const className = fillSpaces(cls)\n      if (memo.indexOf(className) > -1) {\n        return memo.replace(className, ' ')\n      }\n\n      return memo\n    }, oldValue)\n\n    newValue = selector ? newValue.trim() : ''\n\n    if (oldValue !== newValue) {\n      elem.setAttribute('class', newValue)\n    }\n  }\n}\n\nexport function toggleClass(\n  elem: Element | null,\n  selector: ((cls: string, state?: boolean) => string) | string | null,\n  stateVal?: boolean,\n): void {\n  if (elem == null || selector == null) {\n    return\n  }\n\n  if (stateVal != null && typeof selector === 'string') {\n    stateVal ? addClass(elem, selector) : removeClass(elem, selector)\n\n    return\n  }\n\n  if (typeof selector === 'function') {\n    return toggleClass(elem, selector(getClass(elem), stateVal), stateVal)\n  }\n\n  if (typeof selector === 'string') {\n    const metches = selector.match(rnotwhite) || []\n    metches.forEach((cls) => {\n      hasClass(elem, cls) ? removeClass(elem, cls) : addClass(elem, cls)\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}