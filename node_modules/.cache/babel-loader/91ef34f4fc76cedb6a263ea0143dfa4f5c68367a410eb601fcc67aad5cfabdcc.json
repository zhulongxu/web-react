{"ast":null,"code":"/* eslint-disable no-constructor-return */\nimport { NumberExt } from '../number';\nexport class Color {\n  constructor(color, g, b, a) {\n    if (color == null) {\n      return this.set(255, 255, 255, 1);\n    }\n    if (typeof color === 'number') {\n      return this.set(color, g, b, a);\n    }\n    if (typeof color === 'string') {\n      return Color.fromString(color) || this;\n    }\n    if (Array.isArray(color)) {\n      return this.set(color);\n    }\n    this.set(color.r, color.g, color.b, color.a == null ? 1 : color.a);\n  }\n  blend(start, end, weight) {\n    this.set(start.r + (end.r - start.r) * weight, start.g + (end.g - start.g) * weight, start.b + (end.b - start.b) * weight, start.a + (end.a - start.a) * weight);\n  }\n  lighten(amount) {\n    const rgba = Color.lighten(this.toArray(), amount);\n    this.r = rgba[0];\n    this.g = rgba[1];\n    this.b = rgba[2];\n    this.a = rgba[3];\n  }\n  darken(amount) {\n    this.lighten(-amount);\n  }\n  set(arg0, arg1, arg2, arg3) {\n    const r = Array.isArray(arg0) ? arg0[0] : arg0;\n    const g = Array.isArray(arg0) ? arg0[1] : arg1;\n    const b = Array.isArray(arg0) ? arg0[2] : arg2;\n    const a = Array.isArray(arg0) ? arg0[3] : arg3;\n    this.r = Math.round(NumberExt.clamp(r, 0, 255));\n    this.g = Math.round(NumberExt.clamp(g, 0, 255));\n    this.b = Math.round(NumberExt.clamp(b, 0, 255));\n    this.a = a == null ? 1 : NumberExt.clamp(a, 0, 1);\n    return this;\n  }\n  toHex() {\n    const hex = ['r', 'g', 'b'].map(key => {\n      const str = this[key].toString(16);\n      return str.length < 2 ? `0${str}` : str;\n    });\n    return `#${hex.join('')}`;\n  }\n  toRGBA() {\n    return this.toArray();\n  }\n  toHSLA() {\n    return Color.rgba2hsla(this.r, this.g, this.b, this.a);\n  }\n  toCSS(ignoreAlpha) {\n    const rgb = `${this.r},${this.g},${this.b},`;\n    return ignoreAlpha ? `rgb(${rgb})` : `rgba(${rgb},${this.a})`;\n  }\n  toGrey() {\n    return Color.makeGrey(Math.round((this.r + this.g + this.b) / 3), this.a);\n  }\n  toArray() {\n    return [this.r, this.g, this.b, this.a];\n  }\n  toString() {\n    return this.toCSS();\n  }\n}\n(function (Color) {\n  function fromArray(arr) {\n    return new Color(arr);\n  }\n  Color.fromArray = fromArray;\n  function fromHex(color) {\n    return new Color([...hex2rgb(color), 1]);\n  }\n  Color.fromHex = fromHex;\n  function fromRGBA(color) {\n    const matches = color.toLowerCase().match(/^rgba?\\(([\\s.,0-9]+)\\)/);\n    if (matches) {\n      const arr = matches[1].split(/\\s*,\\s*/).map(v => parseInt(v, 10));\n      return new Color(arr);\n    }\n    return null;\n  }\n  Color.fromRGBA = fromRGBA;\n  function hue2rgb(m1, m2, h) {\n    if (h < 0) {\n      ++h; // eslint-disable-line\n    }\n    if (h > 1) {\n      --h; // eslint-disable-line\n    }\n    const h6 = 6 * h;\n    if (h6 < 1) {\n      return m1 + (m2 - m1) * h6;\n    }\n    if (2 * h < 1) {\n      return m2;\n    }\n    if (3 * h < 2) {\n      return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n    }\n    return m1;\n  }\n  function fromHSLA(color) {\n    const matches = color.toLowerCase().match(/^hsla?\\(([\\s.,0-9]+)\\)/);\n    if (matches) {\n      const arr = matches[2].split(/\\s*,\\s*/);\n      const h = (parseFloat(arr[0]) % 360 + 360) % 360 / 360;\n      const s = parseFloat(arr[1]) / 100;\n      const l = parseFloat(arr[2]) / 100;\n      const a = arr[3] == null ? 1 : parseInt(arr[3], 10);\n      return new Color(hsla2rgba(h, s, l, a));\n    }\n    return null;\n  }\n  Color.fromHSLA = fromHSLA;\n  function fromString(color) {\n    if (color.startsWith('#')) {\n      return fromHex(color);\n    }\n    if (color.startsWith('rgb')) {\n      return fromRGBA(color);\n    }\n    const preset = Color.named[color];\n    if (preset) {\n      return fromHex(preset);\n    }\n    return fromHSLA(color);\n  }\n  Color.fromString = fromString;\n  function makeGrey(g, a) {\n    return Color.fromArray([g, g, g, a]);\n  }\n  Color.makeGrey = makeGrey;\n  function rgba2hsla(arg0, arg1, arg2, arg3) {\n    const r = Array.isArray(arg0) ? arg0[0] : arg0;\n    const g = Array.isArray(arg0) ? arg0[1] : arg1;\n    const b = Array.isArray(arg0) ? arg0[2] : arg2;\n    const a = Array.isArray(arg0) ? arg0[3] : arg3;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n    let h = 0;\n    let s = 0;\n    if (min !== max) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n        default:\n          break;\n      }\n      h /= 6;\n    }\n    return [h, s, l, a == null ? 1 : a];\n  }\n  Color.rgba2hsla = rgba2hsla;\n  function hsla2rgba(arg0, arg1, arg2, arg3) {\n    const h = Array.isArray(arg0) ? arg0[0] : arg0;\n    const s = Array.isArray(arg0) ? arg0[1] : arg1;\n    const l = Array.isArray(arg0) ? arg0[2] : arg2;\n    const a = Array.isArray(arg0) ? arg0[3] : arg3;\n    const m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n    const m1 = 2 * l - m2;\n    return [hue2rgb(m1, m2, h + 1 / 3) * 256, hue2rgb(m1, m2, h) * 256, hue2rgb(m1, m2, h - 1 / 3) * 256, a == null ? 1 : a];\n  }\n  Color.hsla2rgba = hsla2rgba;\n  function random(ignoreAlpha) {\n    return new Color(Math.round(Math.random() * 256), Math.round(Math.random() * 256), Math.round(Math.random() * 256), ignoreAlpha ? undefined : parseFloat(Math.random().toFixed(2)));\n  }\n  Color.random = random;\n  function randomHex() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i += 1) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  Color.randomHex = randomHex;\n  function randomRGBA(ignoreAlpha) {\n    return random(ignoreAlpha).toString();\n  }\n  Color.randomRGBA = randomRGBA;\n  function invert(color, bw) {\n    if (typeof color === 'string') {\n      const pound = color[0] === '#';\n      const [r, g, b] = hex2rgb(color);\n      if (bw) {\n        // http://stackoverflow.com/a/3943023/112731\n        return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#ffffff';\n      }\n      return `${pound ? '#' : ''}${rgb2hex(255 - r, 255 - g, 255 - b)}`;\n    }\n    const r = color[0];\n    const g = color[1];\n    const b = color[2];\n    const a = color[3];\n    if (bw) {\n      return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? [0, 0, 0, a] : [255, 255, 255, a];\n    }\n    return [255 - r, 255 - g, 255 - b, a];\n  }\n  Color.invert = invert;\n  function hex2rgb(hex) {\n    const color = hex.indexOf('#') === 0 ? hex : `#${hex}`;\n    let val = Number(`0x${color.substr(1)}`);\n    if (!(color.length === 4 || color.length === 7) || Number.isNaN(val)) {\n      throw new Error('Invalid hex color.');\n    }\n    const bits = color.length === 4 ? 4 : 8;\n    const mask = (1 << bits) - 1;\n    const bgr = ['b', 'g', 'r'].map(() => {\n      const c = val & mask;\n      val >>= bits;\n      return bits === 4 ? 17 * c : c;\n    });\n    return [bgr[2], bgr[1], bgr[0]];\n  }\n  function rgb2hex(r, g, b) {\n    const pad = hex => hex.length < 2 ? `0${hex}` : hex;\n    return `${pad(r.toString(16))}${pad(g.toString(16))}${pad(b.toString(16))}`;\n  }\n  function lighten(color, amt) {\n    return lum(color, amt);\n  }\n  Color.lighten = lighten;\n  function darken(color, amt) {\n    return lum(color, -amt);\n  }\n  Color.darken = darken;\n  function lum(color, amt) {\n    if (typeof color === 'string') {\n      const pound = color[0] === '#';\n      const num = parseInt(pound ? color.substr(1) : color, 16);\n      const r = NumberExt.clamp((num >> 16) + amt, 0, 255);\n      const g = NumberExt.clamp((num >> 8 & 0x00ff) + amt, 0, 255);\n      const b = NumberExt.clamp((num & 0x0000ff) + amt, 0, 255);\n      return `${pound ? '#' : ''}${(b | g << 8 | r << 16).toString(16)}`;\n    }\n    const hex = rgb2hex(color[0], color[1], color[2]);\n    const arr = hex2rgb(lum(hex, amt));\n    return [arr[0], arr[1], arr[2], color[3]];\n  }\n})(Color || (Color = {}));\n(function (Color) {\n  Color.named = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    burntsienna: '#ea7e5d',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n  };\n})(Color || (Color = {}));","map":{"version":3,"names":["NumberExt","Color","constructor","color","g","b","a","set","fromString","Array","isArray","r","blend","start","end","weight","lighten","amount","rgba","toArray","darken","arg0","arg1","arg2","arg3","Math","round","clamp","toHex","hex","map","key","str","toString","length","join","toRGBA","toHSLA","rgba2hsla","toCSS","ignoreAlpha","rgb","toGrey","makeGrey","fromArray","arr","fromHex","hex2rgb","fromRGBA","matches","toLowerCase","match","split","v","parseInt","hue2rgb","m1","m2","h","h6","fromHSLA","parseFloat","s","l","hsla2rgba","startsWith","preset","named","max","min","d","random","undefined","toFixed","randomHex","letters","i","floor","randomRGBA","invert","bw","pound","rgb2hex","indexOf","val","Number","substr","isNaN","Error","bits","mask","bgr","c","pad","amt","lum","num","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-common@2.0.17/node_modules/@antv/x6-common/src/color/index.ts"],"sourcesContent":["/* eslint-disable no-constructor-return */\n\nimport { NumberExt } from '../number'\n\nexport class Color {\n  public r: number\n  public g: number\n  public b: number\n  public a: number\n\n  constructor()\n  constructor(color: string)\n  constructor(color: Color.RGBA)\n  constructor(r: number, g: number, b: number, a?: number)\n  constructor(\n    color?:\n      | number\n      | string\n      | Color.RGBA\n      | {\n          r: number\n          g: number\n          b: number\n          a?: number\n        },\n    g?: number,\n    b?: number,\n    a?: number,\n  ) {\n    if (color == null) {\n      return this.set(255, 255, 255, 1)\n    }\n\n    if (typeof color === 'number') {\n      return this.set(color, g as number, b as number, a)\n    }\n\n    if (typeof color === 'string') {\n      return Color.fromString(color) || this\n    }\n\n    if (Array.isArray(color)) {\n      return this.set(color)\n    }\n\n    this.set(color.r, color.g, color.b, color.a == null ? 1 : color.a)\n  }\n\n  blend(start: Color, end: Color, weight: number) {\n    this.set(\n      start.r + (end.r - start.r) * weight,\n      start.g + (end.g - start.g) * weight,\n      start.b + (end.b - start.b) * weight,\n      start.a + (end.a - start.a) * weight,\n    )\n  }\n\n  lighten(amount: number) {\n    const rgba = Color.lighten(this.toArray(), amount)\n    this.r = rgba[0]\n    this.g = rgba[1]\n    this.b = rgba[2]\n    this.a = rgba[3]\n  }\n\n  darken(amount: number) {\n    this.lighten(-amount)\n  }\n\n  set(rgba: Color.RGBA): this\n  set(r: number, g: number, b: number, a?: number): this\n  set(arg0: number | Color.RGBA, arg1?: number, arg2?: number, arg3?: number) {\n    const r = Array.isArray(arg0) ? arg0[0] : (arg0 as number)\n    const g = Array.isArray(arg0) ? arg0[1] : (arg1 as number)\n    const b = Array.isArray(arg0) ? arg0[2] : (arg2 as number)\n    const a = Array.isArray(arg0) ? arg0[3] : (arg3 as number)\n    this.r = Math.round(NumberExt.clamp(r, 0, 255))\n    this.g = Math.round(NumberExt.clamp(g, 0, 255))\n    this.b = Math.round(NumberExt.clamp(b, 0, 255))\n    this.a = a == null ? 1 : NumberExt.clamp(a, 0, 1)\n    return this\n  }\n\n  toHex() {\n    const hex = ['r', 'g', 'b'].map((key: 'r' | 'g' | 'b') => {\n      const str = this[key].toString(16)\n      return str.length < 2 ? `0${str}` : str\n    })\n    return `#${hex.join('')}`\n  }\n\n  toRGBA(): Color.RGBA {\n    return this.toArray()\n  }\n\n  toHSLA(): Color.HSLA {\n    return Color.rgba2hsla(this.r, this.g, this.b, this.a)\n  }\n\n  toCSS(ignoreAlpha?: boolean) {\n    const rgb = `${this.r},${this.g},${this.b},`\n    return ignoreAlpha ? `rgb(${rgb})` : `rgba(${rgb},${this.a})`\n  }\n\n  toGrey() {\n    return Color.makeGrey(Math.round((this.r + this.g + this.b) / 3), this.a)\n  }\n\n  toArray(): Color.RGBA {\n    return [this.r, this.g, this.b, this.a]\n  }\n\n  toString() {\n    return this.toCSS()\n  }\n}\n\nexport namespace Color {\n  export type RGBA = [number, number, number, number]\n  export type HSLA = [number, number, number, number]\n\n  export function fromArray(arr: RGBA) {\n    return new Color(arr)\n  }\n\n  export function fromHex(color: string) {\n    return new Color([...hex2rgb(color), 1])\n  }\n\n  export function fromRGBA(color: string) {\n    const matches = color.toLowerCase().match(/^rgba?\\(([\\s.,0-9]+)\\)/)\n    if (matches) {\n      const arr = matches[1].split(/\\s*,\\s*/).map((v) => parseInt(v, 10))\n      return new Color(arr as Color.RGBA)\n    }\n\n    return null\n  }\n\n  function hue2rgb(m1: number, m2: number, h: number) {\n    if (h < 0) {\n      ++h // eslint-disable-line\n    }\n    if (h > 1) {\n      --h // eslint-disable-line\n    }\n\n    const h6 = 6 * h\n    if (h6 < 1) {\n      return m1 + (m2 - m1) * h6\n    }\n    if (2 * h < 1) {\n      return m2\n    }\n    if (3 * h < 2) {\n      return m1 + (m2 - m1) * (2 / 3 - h) * 6\n    }\n    return m1\n  }\n\n  export function fromHSLA(color: string) {\n    const matches = color.toLowerCase().match(/^hsla?\\(([\\s.,0-9]+)\\)/)\n    if (matches) {\n      const arr = matches[2].split(/\\s*,\\s*/)\n      const h = (((parseFloat(arr[0]) % 360) + 360) % 360) / 360\n      const s = parseFloat(arr[1]) / 100\n      const l = parseFloat(arr[2]) / 100\n      const a = arr[3] == null ? 1 : parseInt(arr[3], 10)\n      return new Color(hsla2rgba(h, s, l, a))\n    }\n\n    return null\n  }\n\n  export function fromString(color: string) {\n    if (color.startsWith('#')) {\n      return fromHex(color)\n    }\n\n    if (color.startsWith('rgb')) {\n      return fromRGBA(color)\n    }\n\n    const preset = (Color.named as any)[color]\n    if (preset) {\n      return fromHex(preset)\n    }\n\n    return fromHSLA(color)\n  }\n\n  export function makeGrey(g: number, a: number) {\n    return Color.fromArray([g, g, g, a])\n  }\n\n  export function rgba2hsla(rgba: RGBA): HSLA\n  export function rgba2hsla(r: number, g: number, b: number, a?: number): HSLA\n  export function rgba2hsla(\n    arg0: number | RGBA,\n    arg1?: number,\n    arg2?: number,\n    arg3?: number,\n  ): HSLA {\n    const r = Array.isArray(arg0) ? arg0[0] : (arg0 as number)\n    const g = Array.isArray(arg0) ? arg0[1] : (arg1 as number)\n    const b = Array.isArray(arg0) ? arg0[2] : (arg2 as number)\n    const a = Array.isArray(arg0) ? arg0[3] : (arg3 as number)\n\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    const l = (max + min) / 2\n\n    let h = 0\n    let s = 0\n\n    if (min !== max) {\n      const d = max - min\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0)\n          break\n        case g:\n          h = (b - r) / d + 2\n          break\n        case b:\n          h = (r - g) / d + 4\n          break\n        default:\n          break\n      }\n      h /= 6\n    }\n\n    return [h, s, l, a == null ? 1 : a]\n  }\n\n  export function hsla2rgba(hsla: HSLA): RGBA\n  export function hsla2rgba(h: number, s: number, l: number, a?: number): RGBA\n  export function hsla2rgba(\n    arg0: number | HSLA,\n    arg1?: number,\n    arg2?: number,\n    arg3?: number,\n  ): RGBA {\n    const h = Array.isArray(arg0) ? arg0[0] : (arg0 as number)\n    const s = Array.isArray(arg0) ? arg0[1] : (arg1 as number)\n    const l = Array.isArray(arg0) ? arg0[2] : (arg2 as number)\n    const a = Array.isArray(arg0) ? arg0[3] : (arg3 as number)\n\n    const m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s\n    const m1 = 2 * l - m2\n    return [\n      hue2rgb(m1, m2, h + 1 / 3) * 256,\n      hue2rgb(m1, m2, h) * 256,\n      hue2rgb(m1, m2, h - 1 / 3) * 256,\n      a == null ? 1 : a,\n    ]\n  }\n\n  export function random(ignoreAlpha?: boolean) {\n    return new Color(\n      Math.round(Math.random() * 256),\n      Math.round(Math.random() * 256),\n      Math.round(Math.random() * 256),\n      ignoreAlpha ? undefined : parseFloat(Math.random().toFixed(2)),\n    )\n  }\n\n  export function randomHex() {\n    const letters = '0123456789ABCDEF'\n    let color = '#'\n    for (let i = 0; i < 6; i += 1) {\n      color += letters[Math.floor(Math.random() * 16)]\n    }\n    return color\n  }\n\n  export function randomRGBA(ignoreAlpha?: boolean) {\n    return random(ignoreAlpha).toString()\n  }\n\n  export function invert(rgba: RGBA, bw: boolean): RGBA\n  export function invert(hex: string, bw: boolean): string\n  export function invert(color: string | RGBA, bw: boolean) {\n    if (typeof color === 'string') {\n      const pound = color[0] === '#'\n      const [r, g, b] = hex2rgb(color)\n      if (bw) {\n        // http://stackoverflow.com/a/3943023/112731\n        return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#ffffff'\n      }\n\n      return `${pound ? '#' : ''}${rgb2hex(255 - r, 255 - g, 255 - b)}`\n    }\n\n    const r = color[0]\n    const g = color[1]\n    const b = color[2]\n    const a = color[3]\n\n    if (bw) {\n      return r * 0.299 + g * 0.587 + b * 0.114 > 186\n        ? [0, 0, 0, a]\n        : [255, 255, 255, a]\n    }\n\n    return [255 - r, 255 - g, 255 - b, a]\n  }\n\n  function hex2rgb(hex: string): [number, number, number] {\n    const color = hex.indexOf('#') === 0 ? hex : `#${hex}`\n    let val = Number(`0x${color.substr(1)}`)\n    if (!(color.length === 4 || color.length === 7) || Number.isNaN(val)) {\n      throw new Error('Invalid hex color.')\n    }\n\n    const bits = color.length === 4 ? 4 : 8\n    const mask = (1 << bits) - 1\n    const bgr = ['b', 'g', 'r'].map(() => {\n      const c = val & mask\n      val >>= bits\n      return bits === 4 ? 17 * c : c\n    })\n\n    return [bgr[2], bgr[1], bgr[0]]\n  }\n\n  function rgb2hex(r: number, g: number, b: number) {\n    const pad = (hex: string) => (hex.length < 2 ? `0${hex}` : hex)\n    return `${pad(r.toString(16))}${pad(g.toString(16))}${pad(b.toString(16))}`\n  }\n\n  export function lighten(rgba: RGBA, amt: number): RGBA\n  export function lighten(hex: string, amt: number): string\n  export function lighten(color: RGBA | string, amt: number) {\n    return lum(color, amt)\n  }\n\n  export function darken(rgba: RGBA, amt: number): RGBA\n  export function darken(hex: string, amt: number): string\n  export function darken(color: RGBA | string, amt: number) {\n    return lum(color, -amt)\n  }\n\n  function lum(color: RGBA | string, amt: number): RGBA | string {\n    if (typeof color === 'string') {\n      const pound = color[0] === '#'\n      const num = parseInt(pound ? color.substr(1) : color, 16)\n      const r = NumberExt.clamp((num >> 16) + amt, 0, 255)\n      const g = NumberExt.clamp(((num >> 8) & 0x00ff) + amt, 0, 255)\n      const b = NumberExt.clamp((num & 0x0000ff) + amt, 0, 255)\n\n      return `${pound ? '#' : ''}${(b | (g << 8) | (r << 16)).toString(16)}`\n    }\n\n    const hex = rgb2hex(color[0], color[1], color[2])\n    const arr = hex2rgb(lum(hex, amt) as string)\n\n    return [arr[0], arr[1], arr[2], color[3]]\n  }\n}\n\nexport namespace Color {\n  export const named = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    burntsienna: '#ea7e5d',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32',\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}