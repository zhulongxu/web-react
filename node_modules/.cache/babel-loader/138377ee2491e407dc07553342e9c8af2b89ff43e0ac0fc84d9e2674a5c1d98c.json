{"ast":null,"code":"import { Line } from '@antv/x6-geometry';\nimport { FunctionExt } from '@antv/x6-common';\nimport { resolve, getPointAtEdge } from '../node-anchor/util';\nimport { getClosestPoint } from './closest';\nconst orthogonal = function (view, magnet, refPoint, options) {\n  const OFFSET = 1e6;\n  const path = view.getConnection();\n  const segmentSubdivisions = view.getConnectionSubdivisions();\n  const vLine = new Line(refPoint.clone().translate(0, OFFSET), refPoint.clone().translate(0, -OFFSET));\n  const hLine = new Line(refPoint.clone().translate(OFFSET, 0), refPoint.clone().translate(-OFFSET, 0));\n  const vIntersections = vLine.intersect(path, {\n    segmentSubdivisions\n  });\n  const hIntersections = hLine.intersect(path, {\n    segmentSubdivisions\n  });\n  const intersections = [];\n  if (vIntersections) {\n    intersections.push(...vIntersections);\n  }\n  if (hIntersections) {\n    intersections.push(...hIntersections);\n  }\n  if (intersections.length > 0) {\n    return refPoint.closest(intersections);\n  }\n  if (options.fallbackAt != null) {\n    return getPointAtEdge(view, options.fallbackAt);\n  }\n  return FunctionExt.call(getClosestPoint, this, view, magnet, refPoint, options);\n};\nexport const orth = resolve(orthogonal);","map":{"version":3,"names":["Line","FunctionExt","resolve","getPointAtEdge","getClosestPoint","orthogonal","view","magnet","refPoint","options","OFFSET","path","getConnection","segmentSubdivisions","getConnectionSubdivisions","vLine","clone","translate","hLine","vIntersections","intersect","hIntersections","intersections","push","length","closest","fallbackAt","call","orth"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/edge-anchor/orth.ts"],"sourcesContent":["import { Line, Point } from '@antv/x6-geometry'\nimport { FunctionExt } from '@antv/x6-common'\nimport { ResolveOptions, resolve, getPointAtEdge } from '../node-anchor/util'\nimport { getClosestPoint } from './closest'\nimport { EdgeAnchor } from './index'\n\nexport interface OrthEndpointOptions extends ResolveOptions {\n  fallbackAt?: number | string\n}\n\nconst orthogonal: EdgeAnchor.ResolvedDefinition<OrthEndpointOptions> =\n  function (view, magnet, refPoint, options): Point {\n    const OFFSET = 1e6\n    const path = view.getConnection()!\n    const segmentSubdivisions = view.getConnectionSubdivisions()\n    const vLine = new Line(\n      refPoint.clone().translate(0, OFFSET),\n      refPoint.clone().translate(0, -OFFSET),\n    )\n    const hLine = new Line(\n      refPoint.clone().translate(OFFSET, 0),\n      refPoint.clone().translate(-OFFSET, 0),\n    )\n\n    const vIntersections = vLine.intersect(path, {\n      segmentSubdivisions,\n    })\n\n    const hIntersections = hLine.intersect(path, {\n      segmentSubdivisions,\n    })\n\n    const intersections = []\n    if (vIntersections) {\n      intersections.push(...vIntersections)\n    }\n    if (hIntersections) {\n      intersections.push(...hIntersections)\n    }\n\n    if (intersections.length > 0) {\n      return refPoint.closest(intersections)!\n    }\n\n    if (options.fallbackAt != null) {\n      return getPointAtEdge(view, options.fallbackAt)!\n    }\n\n    return FunctionExt.call(\n      getClosestPoint,\n      this,\n      view,\n      magnet,\n      refPoint,\n      options,\n    )\n  }\n\nexport const orth = resolve<\n  EdgeAnchor.ResolvedDefinition<OrthEndpointOptions>,\n  EdgeAnchor.Definition<OrthEndpointOptions>\n>(orthogonal)\n"],"mappings":"AAAA,SAASA,IAAI,QAAe,mBAAmB;AAC/C,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAAyBC,OAAO,EAAEC,cAAc,QAAQ,qBAAqB;AAC7E,SAASC,eAAe,QAAQ,WAAW;AAO3C,MAAMC,UAAU,GACd,SAAAA,CAAUC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO;EACvC,MAAMC,MAAM,GAAG,GAAG;EAClB,MAAMC,IAAI,GAAGL,IAAI,CAACM,aAAa,EAAG;EAClC,MAAMC,mBAAmB,GAAGP,IAAI,CAACQ,yBAAyB,EAAE;EAC5D,MAAMC,KAAK,GAAG,IAAIf,IAAI,CACpBQ,QAAQ,CAACQ,KAAK,EAAE,CAACC,SAAS,CAAC,CAAC,EAAEP,MAAM,CAAC,EACrCF,QAAQ,CAACQ,KAAK,EAAE,CAACC,SAAS,CAAC,CAAC,EAAE,CAACP,MAAM,CAAC,CACvC;EACD,MAAMQ,KAAK,GAAG,IAAIlB,IAAI,CACpBQ,QAAQ,CAACQ,KAAK,EAAE,CAACC,SAAS,CAACP,MAAM,EAAE,CAAC,CAAC,EACrCF,QAAQ,CAACQ,KAAK,EAAE,CAACC,SAAS,CAAC,CAACP,MAAM,EAAE,CAAC,CAAC,CACvC;EAED,MAAMS,cAAc,GAAGJ,KAAK,CAACK,SAAS,CAACT,IAAI,EAAE;IAC3CE;GACD,CAAC;EAEF,MAAMQ,cAAc,GAAGH,KAAK,CAACE,SAAS,CAACT,IAAI,EAAE;IAC3CE;GACD,CAAC;EAEF,MAAMS,aAAa,GAAG,EAAE;EACxB,IAAIH,cAAc,EAAE;IAClBG,aAAa,CAACC,IAAI,CAAC,GAAGJ,cAAc,CAAC;;EAEvC,IAAIE,cAAc,EAAE;IAClBC,aAAa,CAACC,IAAI,CAAC,GAAGF,cAAc,CAAC;;EAGvC,IAAIC,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;IAC5B,OAAOhB,QAAQ,CAACiB,OAAO,CAACH,aAAa,CAAE;;EAGzC,IAAIb,OAAO,CAACiB,UAAU,IAAI,IAAI,EAAE;IAC9B,OAAOvB,cAAc,CAACG,IAAI,EAAEG,OAAO,CAACiB,UAAU,CAAE;;EAGlD,OAAOzB,WAAW,CAAC0B,IAAI,CACrBvB,eAAe,EACf,IAAI,EACJE,IAAI,EACJC,MAAM,EACNC,QAAQ,EACRC,OAAO,CACR;AACH,CAAC;AAEH,OAAO,MAAMmB,IAAI,GAAG1B,OAAO,CAGzBG,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}