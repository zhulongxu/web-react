{"ast":null,"code":"export class JobQueue {\n  constructor() {\n    this.isFlushing = false;\n    this.isFlushPending = false;\n    this.scheduleId = 0;\n    this.queue = [];\n    this.frameInterval = 33;\n    this.initialTime = Date.now();\n  }\n  queueJob(job) {\n    if (job.priority & JOB_PRIORITY.PRIOR) {\n      job.cb();\n    } else {\n      const index = this.findInsertionIndex(job);\n      if (index >= 0) {\n        this.queue.splice(index, 0, job);\n      }\n    }\n  }\n  queueFlush() {\n    if (!this.isFlushing && !this.isFlushPending) {\n      this.isFlushPending = true;\n      this.scheduleJob();\n    }\n  }\n  queueFlushSync() {\n    if (!this.isFlushing && !this.isFlushPending) {\n      this.isFlushPending = true;\n      this.flushJobsSync();\n    }\n  }\n  clearJobs() {\n    this.queue.length = 0;\n    this.isFlushing = false;\n    this.isFlushPending = false;\n    this.cancelScheduleJob();\n  }\n  flushJobs() {\n    this.isFlushPending = false;\n    this.isFlushing = true;\n    const startTime = this.getCurrentTime();\n    let job;\n    while (job = this.queue.shift()) {\n      job.cb();\n      if (this.getCurrentTime() - startTime >= this.frameInterval) {\n        break;\n      }\n    }\n    this.isFlushing = false;\n    if (this.queue.length) {\n      this.queueFlush();\n    }\n  }\n  flushJobsSync() {\n    this.isFlushPending = false;\n    this.isFlushing = true;\n    let job;\n    while (job = this.queue.shift()) {\n      try {\n        job.cb();\n      } catch (error) {\n        // eslint-disable-next-line\n        console.log(error);\n      }\n    }\n    this.isFlushing = false;\n  }\n  findInsertionIndex(job) {\n    let left = 0;\n    let ins = this.queue.length;\n    let right = ins - 1;\n    const priority = job.priority;\n    while (left <= right) {\n      const mid = (right - left >> 1) + left;\n      if (priority <= this.queue[mid].priority) {\n        left = mid + 1;\n      } else {\n        ins = mid;\n        right = mid - 1;\n      }\n    }\n    return ins;\n  }\n  scheduleJob() {\n    if ('requestIdleCallback' in window) {\n      if (this.scheduleId) {\n        this.cancelScheduleJob();\n      }\n      this.scheduleId = window.requestIdleCallback(this.flushJobs.bind(this), {\n        timeout: 100\n      });\n    } else {\n      if (this.scheduleId) {\n        this.cancelScheduleJob();\n      }\n      this.scheduleId = window.setTimeout(this.flushJobs.bind(this));\n    }\n  }\n  cancelScheduleJob() {\n    if ('cancelIdleCallback' in window) {\n      if (this.scheduleId) {\n        window.cancelIdleCallback(this.scheduleId);\n      }\n      this.scheduleId = 0;\n    } else {\n      if (this.scheduleId) {\n        clearTimeout(this.scheduleId);\n      }\n      this.scheduleId = 0;\n    }\n  }\n  getCurrentTime() {\n    const hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n    if (hasPerformanceNow) {\n      return performance.now();\n    }\n    return Date.now() - this.initialTime;\n  }\n}\nexport var JOB_PRIORITY;\n(function (JOB_PRIORITY) {\n  JOB_PRIORITY[JOB_PRIORITY[\"Update\"] = 2] = \"Update\";\n  JOB_PRIORITY[JOB_PRIORITY[\"RenderEdge\"] = 4] = \"RenderEdge\";\n  JOB_PRIORITY[JOB_PRIORITY[\"RenderNode\"] = 8] = \"RenderNode\";\n  JOB_PRIORITY[JOB_PRIORITY[\"PRIOR\"] = 1048576] = \"PRIOR\";\n})(JOB_PRIORITY || (JOB_PRIORITY = {}));\n// function findInsertionIndex(job: Job) {\n//   let start = 0\n//   for (let i = 0, len = queue.length; i < len; i += 1) {\n//     const j = queue[i]\n//     if (j.id === job.id) {\n//       console.log('xx', j.bit, job.bit)\n//     }\n//     if (j.id === job.id && (job.bit ^ (job.bit & j.bit)) === 0) {\n//       return -1\n//     }\n//     if (j.priority <= job.priority) {\n//       start += 1\n//     }\n//   }\n//   return start\n// }","map":{"version":3,"names":["JobQueue","constructor","isFlushing","isFlushPending","scheduleId","queue","frameInterval","initialTime","Date","now","queueJob","job","priority","JOB_PRIORITY","PRIOR","cb","index","findInsertionIndex","splice","queueFlush","scheduleJob","queueFlushSync","flushJobsSync","clearJobs","length","cancelScheduleJob","flushJobs","startTime","getCurrentTime","shift","error","console","log","left","ins","right","mid","window","requestIdleCallback","bind","timeout","setTimeout","cancelIdleCallback","clearTimeout","hasPerformanceNow","performance"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/renderer/queueJob.ts"],"sourcesContent":["export class JobQueue {\n  private isFlushing = false\n  private isFlushPending = false\n  private scheduleId = 0\n  private queue: Job[] = []\n  private frameInterval = 33\n  private initialTime = Date.now()\n\n  queueJob(job: Job) {\n    if (job.priority & JOB_PRIORITY.PRIOR) {\n      job.cb()\n    } else {\n      const index = this.findInsertionIndex(job)\n      if (index >= 0) {\n        this.queue.splice(index, 0, job)\n      }\n    }\n  }\n\n  queueFlush() {\n    if (!this.isFlushing && !this.isFlushPending) {\n      this.isFlushPending = true\n      this.scheduleJob()\n    }\n  }\n\n  queueFlushSync() {\n    if (!this.isFlushing && !this.isFlushPending) {\n      this.isFlushPending = true\n      this.flushJobsSync()\n    }\n  }\n\n  clearJobs() {\n    this.queue.length = 0\n    this.isFlushing = false\n    this.isFlushPending = false\n    this.cancelScheduleJob()\n  }\n\n  flushJobs() {\n    this.isFlushPending = false\n    this.isFlushing = true\n\n    const startTime = this.getCurrentTime()\n\n    let job\n    while ((job = this.queue.shift())) {\n      job.cb()\n      if (this.getCurrentTime() - startTime >= this.frameInterval) {\n        break\n      }\n    }\n\n    this.isFlushing = false\n\n    if (this.queue.length) {\n      this.queueFlush()\n    }\n  }\n\n  flushJobsSync() {\n    this.isFlushPending = false\n    this.isFlushing = true\n\n    let job\n    while ((job = this.queue.shift())) {\n      try {\n        job.cb()\n      } catch (error) {\n        // eslint-disable-next-line\n        console.log(error)\n      }\n    }\n\n    this.isFlushing = false\n  }\n\n  private findInsertionIndex(job: Job) {\n    let left = 0\n    let ins = this.queue.length\n    let right = ins - 1\n    const priority = job.priority\n    while (left <= right) {\n      const mid = ((right - left) >> 1) + left\n      if (priority <= this.queue[mid].priority) {\n        left = mid + 1\n      } else {\n        ins = mid\n        right = mid - 1\n      }\n    }\n    return ins\n  }\n\n  private scheduleJob() {\n    if ('requestIdleCallback' in window) {\n      if (this.scheduleId) {\n        this.cancelScheduleJob()\n      }\n      this.scheduleId = window.requestIdleCallback(this.flushJobs.bind(this), {\n        timeout: 100,\n      })\n    } else {\n      if (this.scheduleId) {\n        this.cancelScheduleJob()\n      }\n      this.scheduleId = (window as Window).setTimeout(this.flushJobs.bind(this))\n    }\n  }\n\n  private cancelScheduleJob() {\n    if ('cancelIdleCallback' in window) {\n      if (this.scheduleId) {\n        window.cancelIdleCallback(this.scheduleId)\n      }\n      this.scheduleId = 0\n    } else {\n      if (this.scheduleId) {\n        clearTimeout(this.scheduleId)\n      }\n      this.scheduleId = 0\n    }\n  }\n\n  private getCurrentTime() {\n    const hasPerformanceNow =\n      typeof performance === 'object' && typeof performance.now === 'function'\n    if (hasPerformanceNow) {\n      return performance.now()\n    }\n    return Date.now() - this.initialTime\n  }\n}\n\nexport interface Job {\n  id: string\n  priority: JOB_PRIORITY\n  cb: () => void\n}\n\nexport enum JOB_PRIORITY {\n  Update = /*    */ 1 << 1,\n  RenderEdge = /**/ 1 << 2,\n  RenderNode = /**/ 1 << 3,\n  PRIOR = /*     */ 1 << 20,\n}\n\n// function findInsertionIndex(job: Job) {\n//   let start = 0\n//   for (let i = 0, len = queue.length; i < len; i += 1) {\n//     const j = queue[i]\n//     if (j.id === job.id) {\n//       console.log('xx', j.bit, job.bit)\n//     }\n//     if (j.id === job.id && (job.bit ^ (job.bit & j.bit)) === 0) {\n//       return -1\n//     }\n//     if (j.priority <= job.priority) {\n//       start += 1\n//     }\n//   }\n//   return start\n// }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}