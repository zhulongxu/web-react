{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Dom } from '@antv/x6-common';\nimport { Markup } from '../view';\nimport { Node } from '../model/node';\nimport { NodeView } from '../view/node';\nimport { Graph } from '../graph/graph';\nexport class HTML extends Node {}\n(function (HTML) {\n  class View extends NodeView {\n    init() {\n      super.init();\n      this.cell.on('change:*', this.onCellChangeAny, this);\n    }\n    onCellChangeAny({\n      key\n    }) {\n      const content = HTML.shapeMaps[this.cell.shape];\n      if (content) {\n        const {\n          effect\n        } = content;\n        if (!effect || effect.includes(key)) {\n          this.renderHTMLComponent();\n        }\n      }\n    }\n    confirmUpdate(flag) {\n      const ret = super.confirmUpdate(flag);\n      return this.handleAction(ret, View.action, () => this.renderHTMLComponent());\n    }\n    renderHTMLComponent() {\n      const container = this.selectors && this.selectors.foContent;\n      if (container) {\n        Dom.empty(container);\n        const content = HTML.shapeMaps[this.cell.shape];\n        if (!content) {\n          return;\n        }\n        let {\n          html\n        } = content;\n        if (typeof html === 'function') {\n          html = html(this.cell);\n        }\n        if (html) {\n          if (typeof html === 'string') {\n            container.innerHTML = html;\n          } else {\n            Dom.append(container, html);\n          }\n        }\n      }\n    }\n    dispose() {\n      this.cell.off('change:*', this.onCellChangeAny, this);\n    }\n  }\n  __decorate([View.dispose()], View.prototype, \"dispose\", null);\n  HTML.View = View;\n  (function (View) {\n    View.action = 'html';\n    View.config({\n      bootstrap: [View.action],\n      actions: {\n        html: View.action\n      }\n    });\n    NodeView.registry.register('html-view', View, true);\n  })(View = HTML.View || (HTML.View = {}));\n})(HTML || (HTML = {}));\n(function (HTML) {\n  HTML.config({\n    view: 'html-view',\n    markup: [{\n      tagName: 'rect',\n      selector: 'body'\n    }, Object.assign({}, Markup.getForeignObjectMarkup()), {\n      tagName: 'text',\n      selector: 'label'\n    }],\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%'\n      }\n    }\n  });\n  Node.registry.register('html', HTML, true);\n})(HTML || (HTML = {}));\n(function (HTML) {\n  HTML.shapeMaps = {};\n  function register(config) {\n    const {\n        shape,\n        html,\n        effect,\n        inherit\n      } = config,\n      others = __rest(config, [\"shape\", \"html\", \"effect\", \"inherit\"]);\n    if (!shape) {\n      throw new Error('should specify shape in config');\n    }\n    HTML.shapeMaps[shape] = {\n      html,\n      effect\n    };\n    Graph.registerNode(shape, Object.assign({\n      inherit: inherit || 'html'\n    }, others), true);\n  }\n  HTML.register = register;\n})(HTML || (HTML = {}));","map":{"version":3,"names":["Dom","Markup","Node","NodeView","Graph","HTML","View","init","cell","on","onCellChangeAny","key","content","shapeMaps","shape","effect","includes","renderHTMLComponent","confirmUpdate","flag","ret","handleAction","action","container","selectors","foContent","empty","html","innerHTML","append","dispose","off","__decorate","config","bootstrap","actions","registry","register","view","markup","tagName","selector","getForeignObjectMarkup","attrs","body","fill","stroke","refWidth","refHeight","fo","inherit","others","__rest","Error","registerNode","Object","assign"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/shape/html.ts"],"sourcesContent":["import { Dom } from '@antv/x6-common'\nimport { Markup } from '../view'\nimport { Cell } from '../model/cell'\nimport { Node } from '../model/node'\nimport { NodeView } from '../view/node'\nimport { Graph } from '../graph/graph'\n\nexport class HTML<\n  Properties extends HTML.Properties = HTML.Properties,\n> extends Node<Properties> {}\n\nexport namespace HTML {\n  export interface Properties extends Node.Properties {}\n}\n\nexport namespace HTML {\n  export class View extends NodeView<HTML> {\n    protected init() {\n      super.init()\n      this.cell.on('change:*', this.onCellChangeAny, this)\n    }\n\n    protected onCellChangeAny({ key }: Cell.EventArgs['change:*']) {\n      const content = shapeMaps[this.cell.shape]\n      if (content) {\n        const { effect } = content\n        if (!effect || effect.includes(key)) {\n          this.renderHTMLComponent()\n        }\n      }\n    }\n\n    confirmUpdate(flag: number) {\n      const ret = super.confirmUpdate(flag)\n      return this.handleAction(ret, View.action, () =>\n        this.renderHTMLComponent(),\n      )\n    }\n\n    protected renderHTMLComponent() {\n      const container =\n        this.selectors && (this.selectors.foContent as HTMLDivElement)\n      if (container) {\n        Dom.empty(container)\n        const content = shapeMaps[this.cell.shape]\n        if (!content) {\n          return\n        }\n\n        let { html } = content\n        if (typeof html === 'function') {\n          html = html(this.cell)\n        }\n        if (html) {\n          if (typeof html === 'string') {\n            container.innerHTML = html\n          } else {\n            Dom.append(container, html)\n          }\n        }\n      }\n    }\n\n    @View.dispose()\n    dispose() {\n      this.cell.off('change:*', this.onCellChangeAny, this)\n    }\n  }\n\n  export namespace View {\n    export const action = 'html' as any\n\n    View.config({\n      bootstrap: [action],\n      actions: {\n        html: action,\n      },\n    })\n\n    NodeView.registry.register('html-view', View, true)\n  }\n}\n\nexport namespace HTML {\n  HTML.config({\n    view: 'html-view',\n    markup: [\n      {\n        tagName: 'rect',\n        selector: 'body',\n      },\n      {\n        ...Markup.getForeignObjectMarkup(),\n      },\n      {\n        tagName: 'text',\n        selector: 'label',\n      },\n    ],\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%',\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%',\n      },\n    },\n  })\n\n  Node.registry.register('html', HTML, true)\n}\n\nexport namespace HTML {\n  type HTMLComponent =\n    | string\n    | HTMLElement\n    | ((cell: Cell) => HTMLElement | string)\n\n  export type HTMLShapeConfig = Node.Properties & {\n    shape: string\n    html: HTMLComponent\n    effect?: (keyof Node.Properties)[]\n    inherit?: string\n  }\n\n  export const shapeMaps: Record<\n    string,\n    {\n      html: string | HTMLElement | ((cell: Cell) => HTMLElement | string)\n      effect?: (keyof Node.Properties)[]\n    }\n  > = {}\n\n  export function register(config: HTMLShapeConfig) {\n    const { shape, html, effect, inherit, ...others } = config\n    if (!shape) {\n      throw new Error('should specify shape in config')\n    }\n    shapeMaps[shape] = {\n      html,\n      effect,\n    }\n\n    Graph.registerNode(\n      shape,\n      {\n        inherit: inherit || 'html',\n        ...others,\n      },\n      true,\n    )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}