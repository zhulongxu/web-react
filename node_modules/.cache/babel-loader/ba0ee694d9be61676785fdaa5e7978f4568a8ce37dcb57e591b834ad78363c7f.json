{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Dom, FunctionExt, CssLoader, Node, Model, View, Graph } from '@antv/x6';\nimport { Dnd } from '@antv/x6-plugin-dnd';\nimport { grid } from './grid';\nimport { content } from './style/raw';\nexport class Stencil extends View {\n  get targetScroller() {\n    const target = this.options.target;\n    const scroller = target.getPlugin('scroller');\n    return scroller;\n  }\n  get targetGraph() {\n    return this.options.target;\n  }\n  get targetModel() {\n    return this.targetGraph.model;\n  }\n  constructor(options = {}) {\n    super();\n    this.name = 'stencil';\n    CssLoader.ensure(this.name, content);\n    this.graphs = {};\n    this.groups = {};\n    this.options = Object.assign(Object.assign({}, Stencil.defaultOptions), options);\n    this.init();\n  }\n  init() {\n    this.dnd = new Dnd(this.options);\n    this.onSearch = FunctionExt.debounce(this.onSearch, 200);\n    this.initContainer();\n    this.initSearch();\n    this.initContent();\n    this.initGroups();\n    this.setTitle();\n    this.startListening();\n  }\n  load(data, groupName) {\n    if (Array.isArray(data)) {\n      this.loadGroup(data, groupName);\n    } else if (this.options.groups) {\n      Object.keys(this.options.groups).forEach(groupName => {\n        if (data[groupName]) {\n          this.loadGroup(data[groupName], groupName);\n        }\n      });\n    }\n    return this;\n  }\n  unload(data, groupName) {\n    if (Array.isArray(data)) {\n      this.loadGroup(data, groupName, true);\n    } else if (this.options.groups) {\n      Object.keys(this.options.groups).forEach(groupName => {\n        if (data[groupName]) {\n          this.loadGroup(data[groupName], groupName, true);\n        }\n      });\n    }\n    return this;\n  }\n  toggleGroup(groupName) {\n    if (this.isGroupCollapsed(groupName)) {\n      this.expandGroup(groupName);\n    } else {\n      this.collapseGroup(groupName);\n    }\n    return this;\n  }\n  collapseGroup(groupName) {\n    if (this.isGroupCollapsable(groupName)) {\n      const group = this.groups[groupName];\n      if (group && !this.isGroupCollapsed(groupName)) {\n        this.trigger('group:collapse', {\n          name: groupName\n        });\n        Dom.addClass(group, 'collapsed');\n      }\n    }\n    return this;\n  }\n  expandGroup(groupName) {\n    if (this.isGroupCollapsable(groupName)) {\n      const group = this.groups[groupName];\n      if (group && this.isGroupCollapsed(groupName)) {\n        this.trigger('group:expand', {\n          name: groupName\n        });\n        Dom.removeClass(group, 'collapsed');\n      }\n    }\n    return this;\n  }\n  isGroupCollapsable(groupName) {\n    const group = this.groups[groupName];\n    return Dom.hasClass(group, 'collapsable');\n  }\n  isGroupCollapsed(groupName) {\n    const group = this.groups[groupName];\n    return group && Dom.hasClass(group, 'collapsed');\n  }\n  collapseGroups() {\n    Object.keys(this.groups).forEach(groupName => this.collapseGroup(groupName));\n    return this;\n  }\n  expandGroups() {\n    Object.keys(this.groups).forEach(groupName => this.expandGroup(groupName));\n    return this;\n  }\n  resizeGroup(groupName, size) {\n    const graph = this.graphs[groupName];\n    if (graph) {\n      graph.resize(size.width, size.height);\n    }\n    return this;\n  }\n  addGroup(group) {\n    const groups = Array.isArray(group) ? group : [group];\n    if (this.options.groups) {\n      this.options.groups.push(...groups);\n    } else {\n      this.options.groups = groups;\n    }\n    groups.forEach(group => this.initGroup(group));\n  }\n  removeGroup(groupName) {\n    const groupNames = Array.isArray(groupName) ? groupName : [groupName];\n    if (this.options.groups) {\n      this.options.groups = this.options.groups.filter(group => !groupNames.includes(group.name));\n      groupNames.forEach(groupName => {\n        const graph = this.graphs[groupName];\n        this.unregisterGraphEvents(graph);\n        graph.dispose();\n        delete this.graphs[groupName];\n        const elem = this.groups[groupName];\n        Dom.remove(elem);\n        delete this.groups[groupName];\n      });\n    }\n  }\n  // #endregion\n  initContainer() {\n    this.container = document.createElement('div');\n    Dom.addClass(this.container, this.prefixClassName(ClassNames.base));\n    Dom.attr(this.container, 'data-not-found-text', this.options.notFoundText || 'No matches found');\n  }\n  initContent() {\n    this.content = document.createElement('div');\n    Dom.addClass(this.content, this.prefixClassName(ClassNames.content));\n    Dom.appendTo(this.content, this.container);\n  }\n  initSearch() {\n    if (this.options.search) {\n      Dom.addClass(this.container, 'searchable');\n      Dom.append(this.container, this.renderSearch());\n    }\n  }\n  initGroup(group) {\n    const globalGraphOptions = this.options.stencilGraphOptions || {};\n    const groupElem = document.createElement('div');\n    Dom.addClass(groupElem, this.prefixClassName(ClassNames.group));\n    Dom.attr(groupElem, 'data-name', group.name);\n    if (group.collapsable == null && this.options.collapsable || group.collapsable !== false) {\n      Dom.addClass(groupElem, 'collapsable');\n    }\n    Dom.toggleClass(groupElem, 'collapsed', group.collapsed === true);\n    const title = document.createElement('h3');\n    Dom.addClass(title, this.prefixClassName(ClassNames.groupTitle));\n    title.innerHTML = group.title || group.name;\n    const content = document.createElement('div');\n    Dom.addClass(content, this.prefixClassName(ClassNames.groupContent));\n    const graphOptionsInGroup = group.graphOptions;\n    const graph = new Graph(Object.assign(Object.assign(Object.assign({}, globalGraphOptions), graphOptionsInGroup), {\n      container: document.createElement('div'),\n      model: globalGraphOptions.model || new Model(),\n      width: group.graphWidth || this.options.stencilGraphWidth,\n      height: group.graphHeight || this.options.stencilGraphHeight,\n      interacting: false,\n      preventDefaultBlankAction: false\n    }));\n    this.registerGraphEvents(graph);\n    Dom.append(content, graph.container);\n    Dom.append(groupElem, [title, content]);\n    Dom.appendTo(groupElem, this.content);\n    this.groups[group.name] = groupElem;\n    this.graphs[group.name] = graph;\n  }\n  initGroups() {\n    this.clearGroups();\n    this.setCollapsableState();\n    if (this.options.groups && this.options.groups.length) {\n      this.options.groups.forEach(group => {\n        this.initGroup(group);\n      });\n    } else {\n      const globalGraphOptions = this.options.stencilGraphOptions || {};\n      const graph = new Graph(Object.assign(Object.assign({}, globalGraphOptions), {\n        container: document.createElement('div'),\n        model: globalGraphOptions.model || new Model(),\n        width: this.options.stencilGraphWidth,\n        height: this.options.stencilGraphHeight,\n        interacting: false,\n        preventDefaultBlankAction: false\n      }));\n      Dom.append(this.content, graph.container);\n      this.graphs[Private.defaultGroupName] = graph;\n    }\n  }\n  setCollapsableState() {\n    this.options.collapsable = this.options.collapsable && this.options.groups && this.options.groups.some(group => group.collapsable !== false);\n    if (this.options.collapsable) {\n      Dom.addClass(this.container, 'collapsable');\n      const collapsed = this.options.groups && this.options.groups.every(group => group.collapsed || group.collapsable === false);\n      if (collapsed) {\n        Dom.addClass(this.container, 'collapsed');\n      } else {\n        Dom.removeClass(this.container, 'collapsed');\n      }\n    } else {\n      Dom.removeClass(this.container, 'collapsable');\n    }\n  }\n  setTitle() {\n    const title = document.createElement('div');\n    Dom.addClass(title, this.prefixClassName(ClassNames.title));\n    title.innerHTML = this.options.title;\n    Dom.appendTo(title, this.container);\n  }\n  renderSearch() {\n    const elem = document.createElement('div');\n    Dom.addClass(elem, this.prefixClassName(ClassNames.search));\n    const input = document.createElement('input');\n    Dom.attr(input, {\n      type: 'search',\n      placeholder: this.options.placeholder || 'Search'\n    });\n    Dom.addClass(input, this.prefixClassName(ClassNames.searchText));\n    Dom.append(elem, input);\n    return elem;\n  }\n  startListening() {\n    const title = this.prefixClassName(ClassNames.title);\n    const searchText = this.prefixClassName(ClassNames.searchText);\n    const groupTitle = this.prefixClassName(ClassNames.groupTitle);\n    this.delegateEvents({\n      [`click .${title}`]: 'onTitleClick',\n      [`touchstart .${title}`]: 'onTitleClick',\n      [`click .${groupTitle}`]: 'onGroupTitleClick',\n      [`touchstart .${groupTitle}`]: 'onGroupTitleClick',\n      [`input .${searchText}`]: 'onSearch',\n      [`focusin .${searchText}`]: 'onSearchFocusIn',\n      [`focusout .${searchText}`]: 'onSearchFocusOut'\n    });\n  }\n  stopListening() {\n    this.undelegateEvents();\n  }\n  registerGraphEvents(graph) {\n    graph.on('cell:mousedown', this.onDragStart, this);\n  }\n  unregisterGraphEvents(graph) {\n    graph.off('cell:mousedown', this.onDragStart, this);\n  }\n  loadGroup(cells, groupName, reverse) {\n    const model = this.getModel(groupName);\n    if (model) {\n      const nodes = cells.map(cell => Node.isNode(cell) ? cell : Node.create(cell));\n      if (reverse === true) {\n        model.removeCells(nodes);\n      } else {\n        model.resetCells(nodes);\n      }\n    }\n    const group = this.getGroup(groupName);\n    let height = this.options.stencilGraphHeight;\n    if (group && group.graphHeight != null) {\n      height = group.graphHeight;\n    }\n    const layout = group && group.layout || this.options.layout;\n    if (layout && model) {\n      FunctionExt.call(layout, this, model, group);\n    }\n    if (!height) {\n      const graph = this.getGraph(groupName);\n      graph.fitToContent({\n        minWidth: graph.options.width,\n        gridHeight: 1,\n        padding: group && group.graphPadding || this.options.stencilGraphPadding || 10\n      });\n    }\n    return this;\n  }\n  onDragStart(args) {\n    const {\n      e,\n      node\n    } = args;\n    const group = this.getGroupByNode(node);\n    if (group && group.nodeMovable === false) {\n      return;\n    }\n    this.dnd.start(node, e);\n  }\n  filter(keyword, filter) {\n    const found = Object.keys(this.graphs).reduce((memo, groupName) => {\n      const graph = this.graphs[groupName];\n      const name = groupName === Private.defaultGroupName ? null : groupName;\n      const items = graph.model.getNodes().filter(cell => {\n        let matched = false;\n        if (typeof filter === 'function') {\n          matched = FunctionExt.call(filter, this, cell, keyword, name, this);\n        } else if (typeof filter === 'boolean') {\n          matched = filter;\n        } else {\n          matched = this.isCellMatched(cell, keyword, filter, keyword.toLowerCase() !== keyword);\n        }\n        const view = graph.renderer.findViewByCell(cell);\n        if (view) {\n          Dom.toggleClass(view.container, 'unmatched', !matched);\n        }\n        return matched;\n      });\n      const found = items.length > 0;\n      const options = this.options;\n      const model = new Model();\n      model.resetCells(items);\n      if (options.layout) {\n        FunctionExt.call(options.layout, this, model, this.getGroup(groupName));\n      }\n      if (this.groups[groupName]) {\n        Dom.toggleClass(this.groups[groupName], 'unmatched', !found);\n      }\n      graph.fitToContent({\n        gridWidth: 1,\n        gridHeight: 1,\n        padding: options.stencilGraphPadding || 10\n      });\n      return memo || found;\n    }, false);\n    Dom.toggleClass(this.container, 'not-found', !found);\n  }\n  isCellMatched(cell, keyword, filters, ignoreCase) {\n    if (keyword && filters) {\n      return Object.keys(filters).some(shape => {\n        if (shape === '*' || cell.shape === shape) {\n          const filter = filters[shape];\n          if (typeof filter === 'boolean') {\n            return filter;\n          }\n          const paths = Array.isArray(filter) ? filter : [filter];\n          return paths.some(path => {\n            let val = cell.getPropByPath(path);\n            if (val != null) {\n              val = `${val}`;\n              if (!ignoreCase) {\n                val = val.toLowerCase();\n              }\n              return val.indexOf(keyword) >= 0;\n            }\n            return false;\n          });\n        }\n        return false;\n      });\n    }\n    return true;\n  }\n  onSearch(evt) {\n    this.filter(evt.target.value, this.options.search);\n  }\n  onSearchFocusIn() {\n    Dom.addClass(this.container, 'is-focused');\n  }\n  onSearchFocusOut() {\n    Dom.removeClass(this.container, 'is-focused');\n  }\n  onTitleClick() {\n    if (this.options.collapsable) {\n      Dom.toggleClass(this.container, 'collapsed');\n      if (Dom.hasClass(this.container, 'collapsed')) {\n        this.collapseGroups();\n      } else {\n        this.expandGroups();\n      }\n    }\n  }\n  onGroupTitleClick(evt) {\n    const group = evt.target.closest(`.${this.prefixClassName(ClassNames.group)}`);\n    if (group) {\n      this.toggleGroup(Dom.attr(group, 'data-name') || '');\n    }\n    const allCollapsed = Object.keys(this.groups).every(name => {\n      const group = this.getGroup(name);\n      const groupElem = this.groups[name];\n      return group && group.collapsable === false || Dom.hasClass(groupElem, 'collapsed');\n    });\n    Dom.toggleClass(this.container, 'collapsed', allCollapsed);\n  }\n  getModel(groupName) {\n    const graph = this.getGraph(groupName);\n    return graph ? graph.model : null;\n  }\n  getGraph(groupName) {\n    return this.graphs[groupName || Private.defaultGroupName];\n  }\n  getGroup(groupName) {\n    const groups = this.options.groups;\n    if (groupName != null && groups && groups.length) {\n      return groups.find(group => group.name === groupName);\n    }\n    return null;\n  }\n  getGroupByNode(node) {\n    const groups = this.options.groups;\n    if (groups) {\n      return groups.find(group => {\n        const model = this.getModel(group.name);\n        if (model) {\n          return model.has(node.id);\n        }\n        return false;\n      });\n    }\n    return null;\n  }\n  clearGroups() {\n    Object.keys(this.graphs).forEach(groupName => {\n      const graph = this.graphs[groupName];\n      this.unregisterGraphEvents(graph);\n      graph.dispose();\n    });\n    Object.keys(this.groups).forEach(groupName => {\n      const elem = this.groups[groupName];\n      Dom.remove(elem);\n    });\n    this.graphs = {};\n    this.groups = {};\n  }\n  onRemove() {\n    this.clearGroups();\n    this.dnd.remove();\n    this.stopListening();\n    this.undelegateDocumentEvents();\n  }\n  dispose() {\n    this.remove();\n    CssLoader.clean(this.name);\n  }\n}\n__decorate([View.dispose()], Stencil.prototype, \"dispose\", null);\n(function (Stencil) {\n  Stencil.defaultOptions = Object.assign({\n    stencilGraphWidth: 200,\n    stencilGraphHeight: 800,\n    title: 'Stencil',\n    collapsable: false,\n    placeholder: 'Search',\n    notFoundText: 'No matches found',\n    layout(model, group) {\n      const options = {\n        columnWidth: this.options.stencilGraphWidth / 2 - 10,\n        columns: 2,\n        rowHeight: 80,\n        resizeToFit: false,\n        dx: 10,\n        dy: 10\n      };\n      grid(model, Object.assign(Object.assign(Object.assign({}, options), this.options.layoutOptions), group ? group.layoutOptions : {}));\n    }\n  }, Dnd.defaults);\n})(Stencil || (Stencil = {}));\nvar ClassNames;\n(function (ClassNames) {\n  ClassNames.base = 'widget-stencil';\n  ClassNames.title = `${ClassNames.base}-title`;\n  ClassNames.search = `${ClassNames.base}-search`;\n  ClassNames.searchText = `${ClassNames.search}-text`;\n  ClassNames.content = `${ClassNames.base}-content`;\n  ClassNames.group = `${ClassNames.base}-group`;\n  ClassNames.groupTitle = `${ClassNames.group}-title`;\n  ClassNames.groupContent = `${ClassNames.group}-content`;\n})(ClassNames || (ClassNames = {}));\nvar Private;\n(function (Private) {\n  Private.defaultGroupName = '__default__';\n})(Private || (Private = {}));","map":{"version":3,"names":["Dom","FunctionExt","CssLoader","Node","Model","View","Graph","Dnd","grid","content","Stencil","targetScroller","target","options","scroller","getPlugin","targetGraph","targetModel","model","constructor","name","ensure","graphs","groups","Object","assign","defaultOptions","init","dnd","onSearch","debounce","initContainer","initSearch","initContent","initGroups","setTitle","startListening","load","data","groupName","Array","isArray","loadGroup","keys","forEach","unload","toggleGroup","isGroupCollapsed","expandGroup","collapseGroup","isGroupCollapsable","group","trigger","addClass","removeClass","hasClass","collapseGroups","expandGroups","resizeGroup","size","graph","resize","width","height","addGroup","push","initGroup","removeGroup","groupNames","filter","includes","unregisterGraphEvents","dispose","elem","remove","container","document","createElement","prefixClassName","ClassNames","base","attr","notFoundText","appendTo","search","append","renderSearch","globalGraphOptions","stencilGraphOptions","groupElem","collapsable","toggleClass","collapsed","title","groupTitle","innerHTML","groupContent","graphOptionsInGroup","graphOptions","graphWidth","stencilGraphWidth","graphHeight","stencilGraphHeight","interacting","preventDefaultBlankAction","registerGraphEvents","clearGroups","setCollapsableState","length","Private","defaultGroupName","some","every","input","type","placeholder","searchText","delegateEvents","stopListening","undelegateEvents","on","onDragStart","off","cells","reverse","getModel","nodes","map","cell","isNode","create","removeCells","resetCells","getGroup","layout","call","getGraph","fitToContent","minWidth","gridHeight","padding","graphPadding","stencilGraphPadding","args","e","node","getGroupByNode","nodeMovable","start","keyword","found","reduce","memo","items","getNodes","matched","isCellMatched","toLowerCase","view","renderer","findViewByCell","gridWidth","filters","ignoreCase","shape","paths","path","val","getPropByPath","indexOf","evt","value","onSearchFocusIn","onSearchFocusOut","onTitleClick","onGroupTitleClick","closest","allCollapsed","find","has","id","onRemove","undelegateDocumentEvents","clean","__decorate","columnWidth","columns","rowHeight","resizeToFit","dx","dy","layoutOptions","defaults"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-plugin-stencil@2.1.5_@antv+x6@2.18.1/node_modules/@antv/x6-plugin-stencil/src/index.ts"],"sourcesContent":["import {\n  Dom,\n  FunctionExt,\n  CssLoader,\n  Cell,\n  Node,\n  Model,\n  View,\n  Graph,\n  EventArgs,\n} from '@antv/x6'\nimport { Dnd } from '@antv/x6-plugin-dnd'\nimport { grid } from './grid'\nimport { content } from './style/raw'\n\nexport class Stencil extends View implements Graph.Plugin {\n  public name = 'stencil'\n  public options: Stencil.Options\n  public dnd: Dnd\n  protected graphs: { [groupName: string]: Graph }\n  protected groups: { [groupName: string]: HTMLElement }\n  protected content: HTMLDivElement\n\n  protected get targetScroller() {\n    const target = this.options.target\n    const scroller = target.getPlugin<any>('scroller')\n    return scroller\n  }\n\n  protected get targetGraph() {\n    return this.options.target\n  }\n\n  protected get targetModel() {\n    return this.targetGraph.model\n  }\n\n  constructor(options: Partial<Stencil.Options> = {}) {\n    super()\n    CssLoader.ensure(this.name, content)\n    this.graphs = {}\n    this.groups = {}\n    this.options = {\n      ...Stencil.defaultOptions,\n      ...options,\n    } as Stencil.Options\n    this.init()\n  }\n\n  init() {\n    this.dnd = new Dnd(this.options)\n    this.onSearch = FunctionExt.debounce(this.onSearch, 200)\n\n    this.initContainer()\n    this.initSearch()\n    this.initContent()\n    this.initGroups()\n    this.setTitle()\n    this.startListening()\n  }\n\n  // #region api\n\n  load(groups: { [groupName: string]: (Node | Node.Metadata)[] }): this\n  load(nodes: (Node | Node.Metadata)[], groupName?: string): this\n  load(\n    data:\n      | { [groupName: string]: (Node | Node.Metadata)[] }\n      | (Node | Node.Metadata)[],\n    groupName?: string,\n  ) {\n    if (Array.isArray(data)) {\n      this.loadGroup(data, groupName)\n    } else if (this.options.groups) {\n      Object.keys(this.options.groups).forEach((groupName) => {\n        if (data[groupName]) {\n          this.loadGroup(data[groupName], groupName)\n        }\n      })\n    }\n    return this\n  }\n\n  unload(groups: { [groupName: string]: (Node | Node.Metadata)[] }): this\n  unload(nodes: (Node | Node.Metadata)[], groupName?: string): this\n  unload(\n    data:\n      | { [groupName: string]: (Node | Node.Metadata)[] }\n      | (Node | Node.Metadata)[],\n    groupName?: string,\n  ) {\n    if (Array.isArray(data)) {\n      this.loadGroup(data, groupName, true)\n    } else if (this.options.groups) {\n      Object.keys(this.options.groups).forEach((groupName) => {\n        if (data[groupName]) {\n          this.loadGroup(data[groupName], groupName, true)\n        }\n      })\n    }\n    return this\n  }\n\n  toggleGroup(groupName: string) {\n    if (this.isGroupCollapsed(groupName)) {\n      this.expandGroup(groupName)\n    } else {\n      this.collapseGroup(groupName)\n    }\n    return this\n  }\n\n  collapseGroup(groupName: string) {\n    if (this.isGroupCollapsable(groupName)) {\n      const group = this.groups[groupName]\n      if (group && !this.isGroupCollapsed(groupName)) {\n        this.trigger('group:collapse', { name: groupName })\n        Dom.addClass(group, 'collapsed')\n      }\n    }\n    return this\n  }\n\n  expandGroup(groupName: string) {\n    if (this.isGroupCollapsable(groupName)) {\n      const group = this.groups[groupName]\n      if (group && this.isGroupCollapsed(groupName)) {\n        this.trigger('group:expand', { name: groupName })\n        Dom.removeClass(group, 'collapsed')\n      }\n    }\n    return this\n  }\n\n  isGroupCollapsable(groupName: string) {\n    const group = this.groups[groupName]\n    return Dom.hasClass(group, 'collapsable')\n  }\n\n  isGroupCollapsed(groupName: string) {\n    const group = this.groups[groupName]\n    return group && Dom.hasClass(group, 'collapsed')\n  }\n\n  collapseGroups() {\n    Object.keys(this.groups).forEach((groupName) =>\n      this.collapseGroup(groupName),\n    )\n    return this\n  }\n\n  expandGroups() {\n    Object.keys(this.groups).forEach((groupName) => this.expandGroup(groupName))\n    return this\n  }\n\n  resizeGroup(groupName: string, size: { width: number; height: number }) {\n    const graph = this.graphs[groupName]\n    if (graph) {\n      graph.resize(size.width, size.height)\n    }\n    return this\n  }\n\n  addGroup(group: Stencil.Group | Stencil.Group[]) {\n    const groups = Array.isArray(group) ? group : [group]\n    if (this.options.groups) {\n      this.options.groups.push(...groups)\n    } else {\n      this.options.groups = groups\n    }\n    groups.forEach((group) => this.initGroup(group))\n  }\n\n  removeGroup(groupName: string | string[]) {\n    const groupNames = Array.isArray(groupName) ? groupName : [groupName]\n    if (this.options.groups) {\n      this.options.groups = this.options.groups.filter(\n        (group) => !groupNames.includes(group.name),\n      )\n      groupNames.forEach((groupName) => {\n        const graph = this.graphs[groupName]\n        this.unregisterGraphEvents(graph)\n        graph.dispose()\n        delete this.graphs[groupName]\n\n        const elem = this.groups[groupName]\n        Dom.remove(elem)\n        delete this.groups[groupName]\n      })\n    }\n  }\n\n  // #endregion\n\n  protected initContainer() {\n    this.container = document.createElement('div')\n    Dom.addClass(this.container, this.prefixClassName(ClassNames.base))\n    Dom.attr(\n      this.container,\n      'data-not-found-text',\n      this.options.notFoundText || 'No matches found',\n    )\n  }\n\n  protected initContent() {\n    this.content = document.createElement('div')\n    Dom.addClass(this.content, this.prefixClassName(ClassNames.content))\n    Dom.appendTo(this.content, this.container)\n  }\n\n  protected initSearch() {\n    if (this.options.search) {\n      Dom.addClass(this.container, 'searchable')\n      Dom.append(this.container, this.renderSearch())\n    }\n  }\n\n  protected initGroup(group: Stencil.Group) {\n    const globalGraphOptions = this.options.stencilGraphOptions || {}\n    const groupElem = document.createElement('div')\n    Dom.addClass(groupElem, this.prefixClassName(ClassNames.group))\n    Dom.attr(groupElem, 'data-name', group.name)\n\n    if (\n      (group.collapsable == null && this.options.collapsable) ||\n      group.collapsable !== false\n    ) {\n      Dom.addClass(groupElem, 'collapsable')\n    }\n\n    Dom.toggleClass(groupElem, 'collapsed', group.collapsed === true)\n\n    const title = document.createElement('h3')\n    Dom.addClass(title, this.prefixClassName(ClassNames.groupTitle))\n    title.innerHTML = group.title || group.name\n\n    const content = document.createElement('div')\n    Dom.addClass(content, this.prefixClassName(ClassNames.groupContent))\n\n    const graphOptionsInGroup = group.graphOptions\n    const graph = new Graph({\n      ...globalGraphOptions,\n      ...graphOptionsInGroup,\n      container: document.createElement('div'),\n      model: globalGraphOptions.model || new Model(),\n      width: group.graphWidth || this.options.stencilGraphWidth,\n      height: group.graphHeight || this.options.stencilGraphHeight,\n      interacting: false,\n      preventDefaultBlankAction: false,\n    })\n\n    this.registerGraphEvents(graph)\n\n    Dom.append(content, graph.container)\n    Dom.append(groupElem, [title, content])\n    Dom.appendTo(groupElem, this.content)\n\n    this.groups[group.name] = groupElem\n    this.graphs[group.name] = graph\n  }\n\n  protected initGroups() {\n    this.clearGroups()\n    this.setCollapsableState()\n\n    if (this.options.groups && this.options.groups.length) {\n      this.options.groups.forEach((group) => {\n        this.initGroup(group)\n      })\n    } else {\n      const globalGraphOptions = this.options.stencilGraphOptions || {}\n      const graph = new Graph({\n        ...globalGraphOptions,\n        container: document.createElement('div'),\n        model: globalGraphOptions.model || new Model(),\n        width: this.options.stencilGraphWidth,\n        height: this.options.stencilGraphHeight,\n        interacting: false,\n        preventDefaultBlankAction: false,\n      })\n      Dom.append(this.content, graph.container)\n      this.graphs[Private.defaultGroupName] = graph\n    }\n  }\n\n  protected setCollapsableState() {\n    this.options.collapsable =\n      this.options.collapsable &&\n      this.options.groups &&\n      this.options.groups.some((group) => group.collapsable !== false)\n\n    if (this.options.collapsable) {\n      Dom.addClass(this.container, 'collapsable')\n      const collapsed =\n        this.options.groups &&\n        this.options.groups.every(\n          (group) => group.collapsed || group.collapsable === false,\n        )\n      if (collapsed) {\n        Dom.addClass(this.container, 'collapsed')\n      } else {\n        Dom.removeClass(this.container, 'collapsed')\n      }\n    } else {\n      Dom.removeClass(this.container, 'collapsable')\n    }\n  }\n\n  protected setTitle() {\n    const title = document.createElement('div')\n    Dom.addClass(title, this.prefixClassName(ClassNames.title))\n    title.innerHTML = this.options.title\n    Dom.appendTo(title, this.container)\n  }\n\n  protected renderSearch() {\n    const elem = document.createElement('div')\n    Dom.addClass(elem, this.prefixClassName(ClassNames.search))\n    const input = document.createElement('input')\n    Dom.attr(input, {\n      type: 'search',\n      placeholder: this.options.placeholder || 'Search',\n    })\n    Dom.addClass(input, this.prefixClassName(ClassNames.searchText))\n    Dom.append(elem, input)\n\n    return elem\n  }\n\n  protected startListening() {\n    const title = this.prefixClassName(ClassNames.title)\n    const searchText = this.prefixClassName(ClassNames.searchText)\n    const groupTitle = this.prefixClassName(ClassNames.groupTitle)\n\n    this.delegateEvents({\n      [`click .${title}`]: 'onTitleClick',\n      [`touchstart .${title}`]: 'onTitleClick',\n      [`click .${groupTitle}`]: 'onGroupTitleClick',\n      [`touchstart .${groupTitle}`]: 'onGroupTitleClick',\n      [`input .${searchText}`]: 'onSearch',\n      [`focusin .${searchText}`]: 'onSearchFocusIn',\n      [`focusout .${searchText}`]: 'onSearchFocusOut',\n    })\n  }\n\n  protected stopListening() {\n    this.undelegateEvents()\n  }\n\n  protected registerGraphEvents(graph: Graph) {\n    graph.on('cell:mousedown', this.onDragStart, this)\n  }\n\n  protected unregisterGraphEvents(graph: Graph) {\n    graph.off('cell:mousedown', this.onDragStart, this)\n  }\n\n  protected loadGroup(\n    cells: (Node | Node.Metadata)[],\n    groupName?: string,\n    reverse?: boolean,\n  ) {\n    const model = this.getModel(groupName)\n    if (model) {\n      const nodes = cells.map((cell) =>\n        Node.isNode(cell) ? cell : Node.create(cell),\n      )\n      if (reverse === true) {\n        model.removeCells(nodes)\n      } else {\n        model.resetCells(nodes)\n      }\n    }\n\n    const group = this.getGroup(groupName)\n    let height = this.options.stencilGraphHeight\n    if (group && group.graphHeight != null) {\n      height = group.graphHeight\n    }\n\n    const layout = (group && group.layout) || this.options.layout\n    if (layout && model) {\n      FunctionExt.call(layout, this, model, group)\n    }\n\n    if (!height) {\n      const graph = this.getGraph(groupName)\n      graph.fitToContent({\n        minWidth: graph.options.width,\n        gridHeight: 1,\n        padding:\n          (group && group.graphPadding) ||\n          this.options.stencilGraphPadding ||\n          10,\n      })\n    }\n\n    return this\n  }\n\n  protected onDragStart(args: EventArgs['node:mousedown']) {\n    const { e, node } = args\n    const group = this.getGroupByNode(node)\n    if (group && group.nodeMovable === false) {\n      return\n    }\n    this.dnd.start(node, e)\n  }\n\n  protected filter(keyword: string, filter?: Stencil.Filter) {\n    const found = Object.keys(this.graphs).reduce((memo, groupName) => {\n      const graph = this.graphs[groupName]\n      const name = groupName === Private.defaultGroupName ? null : groupName\n      const items = graph.model.getNodes().filter((cell) => {\n        let matched = false\n        if (typeof filter === 'function') {\n          matched = FunctionExt.call(filter, this, cell, keyword, name, this)\n        } else if (typeof filter === 'boolean') {\n          matched = filter\n        } else {\n          matched = this.isCellMatched(\n            cell,\n            keyword,\n            filter,\n            keyword.toLowerCase() !== keyword,\n          )\n        }\n\n        const view = graph.renderer.findViewByCell(cell)\n        if (view) {\n          Dom.toggleClass(view.container, 'unmatched', !matched)\n        }\n\n        return matched\n      })\n\n      const found = items.length > 0\n      const options = this.options\n\n      const model = new Model()\n      model.resetCells(items)\n\n      if (options.layout) {\n        FunctionExt.call(options.layout, this, model, this.getGroup(groupName))\n      }\n\n      if (this.groups[groupName]) {\n        Dom.toggleClass(this.groups[groupName], 'unmatched', !found)\n      }\n\n      graph.fitToContent({\n        gridWidth: 1,\n        gridHeight: 1,\n        padding: options.stencilGraphPadding || 10,\n      })\n\n      return memo || found\n    }, false)\n\n    Dom.toggleClass(this.container, 'not-found', !found)\n  }\n\n  protected isCellMatched(\n    cell: Cell,\n    keyword: string,\n    filters: Stencil.Filters | undefined,\n    ignoreCase: boolean,\n  ) {\n    if (keyword && filters) {\n      return Object.keys(filters).some((shape) => {\n        if (shape === '*' || cell.shape === shape) {\n          const filter = filters[shape]\n          if (typeof filter === 'boolean') {\n            return filter\n          }\n\n          const paths = Array.isArray(filter) ? filter : [filter]\n          return paths.some((path) => {\n            let val = cell.getPropByPath<string>(path)\n            if (val != null) {\n              val = `${val}`\n              if (!ignoreCase) {\n                val = val.toLowerCase()\n              }\n              return val.indexOf(keyword) >= 0\n            }\n            return false\n          })\n        }\n\n        return false\n      })\n    }\n\n    return true\n  }\n\n  protected onSearch(evt: Dom.EventObject) {\n    this.filter(evt.target.value as string, this.options.search)\n  }\n\n  protected onSearchFocusIn() {\n    Dom.addClass(this.container, 'is-focused')\n  }\n\n  protected onSearchFocusOut() {\n    Dom.removeClass(this.container, 'is-focused')\n  }\n\n  protected onTitleClick() {\n    if (this.options.collapsable) {\n      Dom.toggleClass(this.container, 'collapsed')\n      if (Dom.hasClass(this.container, 'collapsed')) {\n        this.collapseGroups()\n      } else {\n        this.expandGroups()\n      }\n    }\n  }\n\n  protected onGroupTitleClick(evt: Dom.EventObject) {\n    const group = evt.target.closest(\n      `.${this.prefixClassName(ClassNames.group)}`,\n    )\n    if (group) {\n      this.toggleGroup(Dom.attr(group, 'data-name') || '')\n    }\n\n    const allCollapsed = Object.keys(this.groups).every((name) => {\n      const group = this.getGroup(name)\n      const groupElem = this.groups[name]\n      return (\n        (group && group.collapsable === false) ||\n        Dom.hasClass(groupElem, 'collapsed')\n      )\n    })\n\n    Dom.toggleClass(this.container, 'collapsed', allCollapsed)\n  }\n\n  protected getModel(groupName?: string) {\n    const graph = this.getGraph(groupName)\n    return graph ? graph.model : null\n  }\n\n  protected getGraph(groupName?: string) {\n    return this.graphs[groupName || Private.defaultGroupName]\n  }\n\n  protected getGroup(groupName?: string) {\n    const groups = this.options.groups\n    if (groupName != null && groups && groups.length) {\n      return groups.find((group) => group.name === groupName)\n    }\n    return null\n  }\n\n  protected getGroupByNode(node: Node) {\n    const groups = this.options.groups\n    if (groups) {\n      return groups.find((group) => {\n        const model = this.getModel(group.name)\n        if (model) {\n          return model.has(node.id)\n        }\n        return false\n      })\n    }\n    return null\n  }\n\n  protected clearGroups() {\n    Object.keys(this.graphs).forEach((groupName) => {\n      const graph = this.graphs[groupName]\n      this.unregisterGraphEvents(graph)\n      graph.dispose()\n    })\n    Object.keys(this.groups).forEach((groupName) => {\n      const elem = this.groups[groupName]\n      Dom.remove(elem)\n    })\n    this.graphs = {}\n    this.groups = {}\n  }\n\n  protected onRemove() {\n    this.clearGroups()\n    this.dnd.remove()\n    this.stopListening()\n    this.undelegateDocumentEvents()\n  }\n\n  @View.dispose()\n  dispose() {\n    this.remove()\n    CssLoader.clean(this.name)\n  }\n}\n\nexport namespace Stencil {\n  export interface Options extends Dnd.Options {\n    title: string\n    groups?: Group[]\n    search?: Filter\n    placeholder?: string\n    notFoundText?: string\n    collapsable?: boolean\n    stencilGraphWidth: number\n    stencilGraphHeight: number\n    stencilGraphOptions?: Graph.Options\n    stencilGraphPadding?: number\n    layout?: (this: Stencil, model: Model, group?: Group | null) => any\n    layoutOptions?: any\n  }\n\n  export type Filter = Filters | FilterFn | boolean\n  export type Filters = { [shape: string]: string | string[] | boolean }\n  export type FilterFn = (\n    this: Stencil,\n    cell: Node,\n    keyword: string,\n    groupName: string | null,\n    stencil: Stencil,\n  ) => boolean\n\n  export interface Group {\n    name: string\n    title?: string\n    collapsed?: boolean\n    collapsable?: boolean\n    nodeMovable?: boolean\n\n    graphWidth?: number\n    graphHeight?: number\n    graphPadding?: number\n    graphOptions?: Graph.Options\n    layout?: (this: Stencil, model: Model, group?: Group | null) => any\n    layoutOptions?: any\n  }\n\n  export const defaultOptions: Partial<Options> = {\n    stencilGraphWidth: 200,\n    stencilGraphHeight: 800,\n    title: 'Stencil',\n    collapsable: false,\n    placeholder: 'Search',\n    notFoundText: 'No matches found',\n\n    layout(model, group) {\n      const options = {\n        columnWidth: (this.options.stencilGraphWidth as number) / 2 - 10,\n        columns: 2,\n        rowHeight: 80,\n        resizeToFit: false,\n        dx: 10,\n        dy: 10,\n      }\n\n      grid(model, {\n        ...options,\n        ...this.options.layoutOptions,\n        ...(group ? group.layoutOptions : {}),\n      })\n    },\n    ...Dnd.defaults,\n  }\n}\n\nnamespace ClassNames {\n  export const base = 'widget-stencil'\n  export const title = `${base}-title`\n  export const search = `${base}-search`\n  export const searchText = `${search}-text`\n  export const content = `${base}-content`\n  export const group = `${base}-group`\n  export const groupTitle = `${group}-title`\n  export const groupContent = `${group}-content`\n}\n\nnamespace Private {\n  export const defaultGroupName = '__default__'\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}