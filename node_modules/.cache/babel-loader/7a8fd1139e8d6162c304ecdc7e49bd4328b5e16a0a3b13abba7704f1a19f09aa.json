{"ast":null,"code":"import { Point } from './point';\nimport { Geometry } from './geometry';\nimport { Rectangle } from './rectangle';\nexport class Line extends Geometry {\n  get center() {\n    return new Point((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);\n  }\n  constructor(x1, y1, x2, y2) {\n    super();\n    if (typeof x1 === 'number' && typeof y1 === 'number') {\n      this.start = new Point(x1, y1);\n      this.end = new Point(x2, y2);\n    } else {\n      this.start = Point.create(x1);\n      this.end = Point.create(y1);\n    }\n  }\n  getCenter() {\n    return this.center;\n  }\n  /**\n   * Rounds the line to the given `precision`.\n   */\n  round(precision = 0) {\n    this.start.round(precision);\n    this.end.round(precision);\n    return this;\n  }\n  translate(tx, ty) {\n    if (typeof tx === 'number') {\n      this.start.translate(tx, ty);\n      this.end.translate(tx, ty);\n    } else {\n      this.start.translate(tx);\n      this.end.translate(tx);\n    }\n    return this;\n  }\n  /**\n   * Rotate the line by `angle` around `origin`.\n   */\n  rotate(angle, origin) {\n    this.start.rotate(angle, origin);\n    this.end.rotate(angle, origin);\n    return this;\n  }\n  /**\n   * Scale the line by `sx` and `sy` about the given `origin`. If origin is not\n   * specified, the line is scaled around `0,0`.\n   */\n  scale(sx, sy, origin) {\n    this.start.scale(sx, sy, origin);\n    this.end.scale(sx, sy, origin);\n    return this;\n  }\n  /**\n   * Returns the length of the line.\n   */\n  length() {\n    return Math.sqrt(this.squaredLength());\n  }\n  /**\n   * Useful for distance comparisons in which real length is not necessary\n   * (saves one `Math.sqrt()` operation).\n   */\n  squaredLength() {\n    const dx = this.start.x - this.end.x;\n    const dy = this.start.y - this.end.y;\n    return dx * dx + dy * dy;\n  }\n  /**\n   * Scale the line so that it has the requested length. The start point of\n   * the line is preserved.\n   */\n  setLength(length) {\n    const total = this.length();\n    if (!total) {\n      return this;\n    }\n    const scale = length / total;\n    return this.scale(scale, scale, this.start);\n  }\n  parallel(distance) {\n    const line = this.clone();\n    if (!line.isDifferentiable()) {\n      return line;\n    }\n    const {\n      start,\n      end\n    } = line;\n    const eRef = start.clone().rotate(270, end);\n    const sRef = end.clone().rotate(90, start);\n    start.move(sRef, distance);\n    end.move(eRef, distance);\n    return line;\n  }\n  /**\n   * Returns the vector of the line with length equal to length of the line.\n   */\n  vector() {\n    return new Point(this.end.x - this.start.x, this.end.y - this.start.y);\n  }\n  /**\n   * Returns the angle of incline of the line.\n   *\n   * The function returns `NaN` if the start and end endpoints of the line\n   * both lie at the same coordinates(it is impossible to determine the angle\n   * of incline of a line that appears to be a point). The\n   * `line.isDifferentiable()` function may be used in advance to determine\n   * whether the angle of incline can be computed for a given line.\n   */\n  angle() {\n    const ref = new Point(this.start.x + 1, this.start.y);\n    return this.start.angleBetween(this.end, ref);\n  }\n  /**\n   * Returns a rectangle that is the bounding box of the line.\n   */\n  bbox() {\n    const left = Math.min(this.start.x, this.end.x);\n    const top = Math.min(this.start.y, this.end.y);\n    const right = Math.max(this.start.x, this.end.x);\n    const bottom = Math.max(this.start.y, this.end.y);\n    return new Rectangle(left, top, right - left, bottom - top);\n  }\n  /**\n   * Returns the bearing (cardinal direction) of the line.\n   *\n   * The return value is one of the following strings:\n   * 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW' and 'N'.\n   *\n   * The function returns 'N' if the two endpoints of the line are coincident.\n   */\n  bearing() {\n    return this.start.bearing(this.end);\n  }\n  /**\n   * Returns the point on the line that lies closest to point `p`.\n   */\n  closestPoint(p) {\n    return this.pointAt(this.closestPointNormalizedLength(p));\n  }\n  /**\n   * Returns the length of the line up to the point that lies closest to point `p`.\n   */\n  closestPointLength(p) {\n    return this.closestPointNormalizedLength(p) * this.length();\n  }\n  /**\n   * Returns a line that is tangent to the line at the point that lies closest\n   * to point `p`.\n   */\n  closestPointTangent(p) {\n    return this.tangentAt(this.closestPointNormalizedLength(p));\n  }\n  /**\n   * Returns the normalized length (distance from the start of the line / total\n   * line length) of the line up to the point that lies closest to point.\n   */\n  closestPointNormalizedLength(p) {\n    const product = this.vector().dot(new Line(this.start, p).vector());\n    const normalized = Math.min(1, Math.max(0, product / this.squaredLength()));\n    // normalized returns `NaN` if this line has zero length\n    if (Number.isNaN(normalized)) {\n      return 0;\n    }\n    return normalized;\n  }\n  /**\n   * Returns a point on the line that lies `rate` (normalized length) away from\n   * the beginning of the line.\n   */\n  pointAt(ratio) {\n    const start = this.start;\n    const end = this.end;\n    if (ratio <= 0) {\n      return start.clone();\n    }\n    if (ratio >= 1) {\n      return end.clone();\n    }\n    return start.lerp(end, ratio);\n  }\n  /**\n   * Returns a point on the line that lies length away from the beginning of\n   * the line.\n   */\n  pointAtLength(length) {\n    const start = this.start;\n    const end = this.end;\n    let fromStart = true;\n    if (length < 0) {\n      fromStart = false; // start calculation from end point\n      length = -length; // eslint-disable-line\n    }\n    const total = this.length();\n    if (length >= total) {\n      return fromStart ? end.clone() : start.clone();\n    }\n    const rate = (fromStart ? length : total - length) / total;\n    return this.pointAt(rate);\n  }\n  /**\n   * Divides the line into two lines at the point that lies `rate` (normalized\n   * length) away from the beginning of the line.\n   */\n  divideAt(ratio) {\n    const dividerPoint = this.pointAt(ratio);\n    return [new Line(this.start, dividerPoint), new Line(dividerPoint, this.end)];\n  }\n  /**\n   * Divides the line into two lines at the point that lies length away from\n   * the beginning of the line.\n   */\n  divideAtLength(length) {\n    const dividerPoint = this.pointAtLength(length);\n    return [new Line(this.start, dividerPoint), new Line(dividerPoint, this.end)];\n  }\n  /**\n   * Returns `true` if the point `p` lies on the line. Return `false` otherwise.\n   */\n  containsPoint(p) {\n    const start = this.start;\n    const end = this.end;\n    // cross product of 0 indicates that this line and\n    // the vector to `p` are collinear.\n    if (start.cross(p, end) !== 0) {\n      return false;\n    }\n    const length = this.length();\n    if (new Line(start, p).length() > length) {\n      return false;\n    }\n    if (new Line(p, end).length() > length) {\n      return false;\n    }\n    return true;\n  }\n  intersect(shape, options) {\n    const ret = shape.intersectsWithLine(this, options);\n    if (ret) {\n      return Array.isArray(ret) ? ret : [ret];\n    }\n    return null;\n  }\n  /**\n   * Returns the intersection point of the line with another line. Returns\n   * `null` if no intersection exists.\n   */\n  intersectsWithLine(line) {\n    const pt1Dir = new Point(this.end.x - this.start.x, this.end.y - this.start.y);\n    const pt2Dir = new Point(line.end.x - line.start.x, line.end.y - line.start.y);\n    const det = pt1Dir.x * pt2Dir.y - pt1Dir.y * pt2Dir.x;\n    const deltaPt = new Point(line.start.x - this.start.x, line.start.y - this.start.y);\n    const alpha = deltaPt.x * pt2Dir.y - deltaPt.y * pt2Dir.x;\n    const beta = deltaPt.x * pt1Dir.y - deltaPt.y * pt1Dir.x;\n    if (det === 0 || alpha * det < 0 || beta * det < 0) {\n      return null;\n    }\n    if (det > 0) {\n      if (alpha > det || beta > det) {\n        return null;\n      }\n    } else if (alpha < det || beta < det) {\n      return null;\n    }\n    return new Point(this.start.x + alpha * pt1Dir.x / det, this.start.y + alpha * pt1Dir.y / det);\n  }\n  /**\n   * Returns `true` if a tangent line can be found for the line.\n   *\n   * Tangents cannot be found if both of the line endpoints are coincident\n   * (the line appears to be a point).\n   */\n  isDifferentiable() {\n    return !this.start.equals(this.end);\n  }\n  /**\n   * Returns the perpendicular distance between the line and point. The\n   * distance is positive if the point lies to the right of the line, negative\n   * if the point lies to the left of the line, and `0` if the point lies on\n   * the line.\n   */\n  pointOffset(p) {\n    const ref = Point.clone(p);\n    const start = this.start;\n    const end = this.end;\n    const determinant = (end.x - start.x) * (ref.y - start.y) - (end.y - start.y) * (ref.x - start.x);\n    return determinant / this.length();\n  }\n  pointSquaredDistance(x, y) {\n    const p = Point.create(x, y);\n    return this.closestPoint(p).squaredDistance(p);\n  }\n  pointDistance(x, y) {\n    const p = Point.create(x, y);\n    return this.closestPoint(p).distance(p);\n  }\n  /**\n   * Returns a line tangent to the line at point that lies `rate` (normalized\n   * length) away from the beginning of the line.\n   */\n  tangentAt(ratio) {\n    if (!this.isDifferentiable()) {\n      return null;\n    }\n    const start = this.start;\n    const end = this.end;\n    const tangentStart = this.pointAt(ratio);\n    const tangentLine = new Line(start, end);\n    tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y);\n    return tangentLine;\n  }\n  /**\n   * Returns a line tangent to the line at point that lies `length` away from\n   * the beginning of the line.\n   */\n  tangentAtLength(length) {\n    if (!this.isDifferentiable()) {\n      return null;\n    }\n    const start = this.start;\n    const end = this.end;\n    const tangentStart = this.pointAtLength(length);\n    const tangentLine = new Line(start, end);\n    tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y);\n    return tangentLine;\n  }\n  relativeCcw(x, y) {\n    const ref = Point.create(x, y);\n    let dx1 = ref.x - this.start.x;\n    let dy1 = ref.y - this.start.y;\n    const dx2 = this.end.x - this.start.x;\n    const dy2 = this.end.y - this.start.y;\n    let ccw = dx1 * dy2 - dy1 * dx2;\n    if (ccw === 0) {\n      ccw = dx1 * dx2 + dy1 * dy2;\n      if (ccw > 0.0) {\n        dx1 -= dx2;\n        dy1 -= dy2;\n        ccw = dx1 * dx2 + dy1 * dy2;\n        if (ccw < 0.0) {\n          ccw = 0.0;\n        }\n      }\n    }\n    return ccw < 0.0 ? -1 : ccw > 0.0 ? 1 : 0;\n  }\n  /**\n   * Return `true` if the line equals the other line.\n   */\n  equals(l) {\n    return l != null && this.start.x === l.start.x && this.start.y === l.start.y && this.end.x === l.end.x && this.end.y === l.end.y;\n  }\n  /**\n   * Returns another line which is a clone of the line.\n   */\n  clone() {\n    return new Line(this.start, this.end);\n  }\n  toJSON() {\n    return {\n      start: this.start.toJSON(),\n      end: this.end.toJSON()\n    };\n  }\n  serialize() {\n    return [this.start.serialize(), this.end.serialize()].join(' ');\n  }\n}\n(function (Line) {\n  function isLine(instance) {\n    return instance != null && instance instanceof Line;\n  }\n  Line.isLine = isLine;\n})(Line || (Line = {}));","map":{"version":3,"names":["Point","Geometry","Rectangle","Line","center","start","x","end","y","constructor","x1","y1","x2","y2","create","getCenter","round","precision","translate","tx","ty","rotate","angle","origin","scale","sx","sy","length","Math","sqrt","squaredLength","dx","dy","setLength","total","parallel","distance","line","clone","isDifferentiable","eRef","sRef","move","vector","ref","angleBetween","bbox","left","min","top","right","max","bottom","bearing","closestPoint","p","pointAt","closestPointNormalizedLength","closestPointLength","closestPointTangent","tangentAt","product","dot","normalized","Number","isNaN","ratio","lerp","pointAtLength","fromStart","rate","divideAt","dividerPoint","divideAtLength","containsPoint","cross","intersect","shape","options","ret","intersectsWithLine","Array","isArray","pt1Dir","pt2Dir","det","deltaPt","alpha","beta","equals","pointOffset","determinant","pointSquaredDistance","squaredDistance","pointDistance","tangentStart","tangentLine","tangentAtLength","relativeCcw","dx1","dy1","dx2","dy2","ccw","l","toJSON","serialize","join","isLine","instance"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-geometry@2.0.5/node_modules/@antv/x6-geometry/src/line.ts"],"sourcesContent":["import { Point } from './point'\nimport { Geometry } from './geometry'\nimport { Rectangle } from './rectangle'\nimport { Ellipse } from './ellipse'\nimport { Path } from './path'\nimport { Polyline } from './polyline'\n\nexport class Line extends Geometry {\n  public start: Point\n  public end: Point\n\n  public get center() {\n    return new Point(\n      (this.start.x + this.end.x) / 2,\n      (this.start.y + this.end.y) / 2,\n    )\n  }\n\n  constructor()\n  constructor(x1: number, y1: number, x2: number, y2: number)\n  constructor(\n    p1: Point.PointLike | Point.PointData,\n    p2: Point.PointLike | Point.PointData,\n  )\n  constructor(\n    x1?: number | Point.PointLike | Point.PointData,\n    y1?: number | Point.PointLike | Point.PointData,\n    x2?: number,\n    y2?: number,\n  ) {\n    super()\n    if (typeof x1 === 'number' && typeof y1 === 'number') {\n      this.start = new Point(x1, y1)\n      this.end = new Point(x2, y2)\n    } else {\n      this.start = Point.create(x1)\n      this.end = Point.create(y1)\n    }\n  }\n\n  getCenter() {\n    return this.center\n  }\n\n  /**\n   * Rounds the line to the given `precision`.\n   */\n  round(precision = 0) {\n    this.start.round(precision)\n    this.end.round(precision)\n    return this\n  }\n\n  translate(tx: number, ty: number): this\n  translate(p: Point.PointLike | Point.PointData): this\n  translate(tx: number | Point.PointLike | Point.PointData, ty?: number) {\n    if (typeof tx === 'number') {\n      this.start.translate(tx, ty as number)\n      this.end.translate(tx, ty as number)\n    } else {\n      this.start.translate(tx)\n      this.end.translate(tx)\n    }\n\n    return this\n  }\n\n  /**\n   * Rotate the line by `angle` around `origin`.\n   */\n  rotate(angle: number, origin?: Point.PointLike | Point.PointData) {\n    this.start.rotate(angle, origin)\n    this.end.rotate(angle, origin)\n    return this\n  }\n\n  /**\n   * Scale the line by `sx` and `sy` about the given `origin`. If origin is not\n   * specified, the line is scaled around `0,0`.\n   */\n  scale(sx: number, sy: number, origin?: Point.PointLike | Point.PointData) {\n    this.start.scale(sx, sy, origin)\n    this.end.scale(sx, sy, origin)\n    return this\n  }\n\n  /**\n   * Returns the length of the line.\n   */\n  length() {\n    return Math.sqrt(this.squaredLength())\n  }\n\n  /**\n   * Useful for distance comparisons in which real length is not necessary\n   * (saves one `Math.sqrt()` operation).\n   */\n  squaredLength() {\n    const dx = this.start.x - this.end.x\n    const dy = this.start.y - this.end.y\n    return dx * dx + dy * dy\n  }\n\n  /**\n   * Scale the line so that it has the requested length. The start point of\n   * the line is preserved.\n   */\n  setLength(length: number) {\n    const total = this.length()\n    if (!total) {\n      return this\n    }\n\n    const scale = length / total\n    return this.scale(scale, scale, this.start)\n  }\n\n  parallel(distance: number) {\n    const line = this.clone()\n    if (!line.isDifferentiable()) {\n      return line\n    }\n\n    const { start, end } = line\n    const eRef = start.clone().rotate(270, end)\n    const sRef = end.clone().rotate(90, start)\n    start.move(sRef, distance)\n    end.move(eRef, distance)\n    return line\n  }\n\n  /**\n   * Returns the vector of the line with length equal to length of the line.\n   */\n  vector() {\n    return new Point(this.end.x - this.start.x, this.end.y - this.start.y)\n  }\n\n  /**\n   * Returns the angle of incline of the line.\n   *\n   * The function returns `NaN` if the start and end endpoints of the line\n   * both lie at the same coordinates(it is impossible to determine the angle\n   * of incline of a line that appears to be a point). The\n   * `line.isDifferentiable()` function may be used in advance to determine\n   * whether the angle of incline can be computed for a given line.\n   */\n  angle() {\n    const ref = new Point(this.start.x + 1, this.start.y)\n    return this.start.angleBetween(this.end, ref)\n  }\n\n  /**\n   * Returns a rectangle that is the bounding box of the line.\n   */\n  bbox() {\n    const left = Math.min(this.start.x, this.end.x)\n    const top = Math.min(this.start.y, this.end.y)\n    const right = Math.max(this.start.x, this.end.x)\n    const bottom = Math.max(this.start.y, this.end.y)\n\n    return new Rectangle(left, top, right - left, bottom - top)\n  }\n\n  /**\n   * Returns the bearing (cardinal direction) of the line.\n   *\n   * The return value is one of the following strings:\n   * 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW' and 'N'.\n   *\n   * The function returns 'N' if the two endpoints of the line are coincident.\n   */\n  bearing() {\n    return this.start.bearing(this.end)\n  }\n\n  /**\n   * Returns the point on the line that lies closest to point `p`.\n   */\n  closestPoint(p: Point.PointLike | Point.PointData) {\n    return this.pointAt(this.closestPointNormalizedLength(p))\n  }\n\n  /**\n   * Returns the length of the line up to the point that lies closest to point `p`.\n   */\n  closestPointLength(p: Point.PointLike | Point.PointData) {\n    return this.closestPointNormalizedLength(p) * this.length()\n  }\n\n  /**\n   * Returns a line that is tangent to the line at the point that lies closest\n   * to point `p`.\n   */\n  closestPointTangent(p: Point.PointLike | Point.PointData) {\n    return this.tangentAt(this.closestPointNormalizedLength(p))\n  }\n\n  /**\n   * Returns the normalized length (distance from the start of the line / total\n   * line length) of the line up to the point that lies closest to point.\n   */\n  closestPointNormalizedLength(p: Point.PointLike | Point.PointData) {\n    const product = this.vector().dot(new Line(this.start, p).vector())\n    const normalized = Math.min(1, Math.max(0, product / this.squaredLength()))\n\n    // normalized returns `NaN` if this line has zero length\n    if (Number.isNaN(normalized)) {\n      return 0\n    }\n\n    return normalized\n  }\n\n  /**\n   * Returns a point on the line that lies `rate` (normalized length) away from\n   * the beginning of the line.\n   */\n  pointAt(ratio: number) {\n    const start = this.start\n    const end = this.end\n\n    if (ratio <= 0) {\n      return start.clone()\n    }\n\n    if (ratio >= 1) {\n      return end.clone()\n    }\n\n    return start.lerp(end, ratio)\n  }\n\n  /**\n   * Returns a point on the line that lies length away from the beginning of\n   * the line.\n   */\n  pointAtLength(length: number) {\n    const start = this.start\n    const end = this.end\n\n    let fromStart = true\n\n    if (length < 0) {\n      fromStart = false // start calculation from end point\n      length = -length // eslint-disable-line\n    }\n\n    const total = this.length()\n    if (length >= total) {\n      return fromStart ? end.clone() : start.clone()\n    }\n\n    const rate = (fromStart ? length : total - length) / total\n    return this.pointAt(rate)\n  }\n\n  /**\n   * Divides the line into two lines at the point that lies `rate` (normalized\n   * length) away from the beginning of the line.\n   */\n  divideAt(ratio: number) {\n    const dividerPoint = this.pointAt(ratio)\n    return [\n      new Line(this.start, dividerPoint),\n      new Line(dividerPoint, this.end),\n    ]\n  }\n\n  /**\n   * Divides the line into two lines at the point that lies length away from\n   * the beginning of the line.\n   */\n  divideAtLength(length: number) {\n    const dividerPoint = this.pointAtLength(length)\n    return [\n      new Line(this.start, dividerPoint),\n      new Line(dividerPoint, this.end),\n    ]\n  }\n\n  /**\n   * Returns `true` if the point `p` lies on the line. Return `false` otherwise.\n   */\n  containsPoint(p: Point.PointLike | Point.PointData) {\n    const start = this.start\n    const end = this.end\n\n    // cross product of 0 indicates that this line and\n    // the vector to `p` are collinear.\n    if (start.cross(p, end) !== 0) {\n      return false\n    }\n\n    const length = this.length()\n    if (new Line(start, p).length() > length) {\n      return false\n    }\n\n    if (new Line(p, end).length() > length) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Returns an array of the intersection points of the line with another\n   * geometry shape.\n   */\n  intersect(shape: Line | Rectangle | Polyline | Ellipse): Point[] | null\n  intersect(shape: Path, options?: Path.Options): Point[] | null\n  intersect(\n    shape: Line | Rectangle | Polyline | Ellipse | Path,\n    options?: Path.Options,\n  ): Point[] | null {\n    const ret = shape.intersectsWithLine(this, options)\n    if (ret) {\n      return Array.isArray(ret) ? ret : [ret]\n    }\n\n    return null\n  }\n\n  /**\n   * Returns the intersection point of the line with another line. Returns\n   * `null` if no intersection exists.\n   */\n  intersectsWithLine(line: Line) {\n    const pt1Dir = new Point(\n      this.end.x - this.start.x,\n      this.end.y - this.start.y,\n    )\n    const pt2Dir = new Point(\n      line.end.x - line.start.x,\n      line.end.y - line.start.y,\n    )\n    const det = pt1Dir.x * pt2Dir.y - pt1Dir.y * pt2Dir.x\n    const deltaPt = new Point(\n      line.start.x - this.start.x,\n      line.start.y - this.start.y,\n    )\n    const alpha = deltaPt.x * pt2Dir.y - deltaPt.y * pt2Dir.x\n    const beta = deltaPt.x * pt1Dir.y - deltaPt.y * pt1Dir.x\n\n    if (det === 0 || alpha * det < 0 || beta * det < 0) {\n      return null\n    }\n\n    if (det > 0) {\n      if (alpha > det || beta > det) {\n        return null\n      }\n    } else if (alpha < det || beta < det) {\n      return null\n    }\n\n    return new Point(\n      this.start.x + (alpha * pt1Dir.x) / det,\n      this.start.y + (alpha * pt1Dir.y) / det,\n    )\n  }\n\n  /**\n   * Returns `true` if a tangent line can be found for the line.\n   *\n   * Tangents cannot be found if both of the line endpoints are coincident\n   * (the line appears to be a point).\n   */\n  isDifferentiable() {\n    return !this.start.equals(this.end)\n  }\n\n  /**\n   * Returns the perpendicular distance between the line and point. The\n   * distance is positive if the point lies to the right of the line, negative\n   * if the point lies to the left of the line, and `0` if the point lies on\n   * the line.\n   */\n  pointOffset(p: Point.PointLike | Point.PointData) {\n    const ref = Point.clone(p)\n    const start = this.start\n    const end = this.end\n    const determinant =\n      (end.x - start.x) * (ref.y - start.y) -\n      (end.y - start.y) * (ref.x - start.x)\n\n    return determinant / this.length()\n  }\n\n  /**\n   * Returns the squared distance between the line and the point.\n   */\n  pointSquaredDistance(x: number, y: number): number\n  pointSquaredDistance(p: Point.PointLike | Point.PointData): number\n  pointSquaredDistance(\n    x: number | Point.PointLike | Point.PointData,\n    y?: number,\n  ) {\n    const p = Point.create(x, y)\n    return this.closestPoint(p).squaredDistance(p)\n  }\n\n  /**\n   * Returns the distance between the line and the point.\n   */\n  pointDistance(x: number, y: number): number\n  pointDistance(p: Point.PointLike | Point.PointData): number\n  pointDistance(x: number | Point.PointLike | Point.PointData, y?: number) {\n    const p = Point.create(x, y)\n    return this.closestPoint(p).distance(p)\n  }\n\n  /**\n   * Returns a line tangent to the line at point that lies `rate` (normalized\n   * length) away from the beginning of the line.\n   */\n  tangentAt(ratio: number) {\n    if (!this.isDifferentiable()) {\n      return null\n    }\n\n    const start = this.start\n    const end = this.end\n\n    const tangentStart = this.pointAt(ratio)\n    const tangentLine = new Line(start, end)\n    tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y)\n\n    return tangentLine\n  }\n\n  /**\n   * Returns a line tangent to the line at point that lies `length` away from\n   * the beginning of the line.\n   */\n  tangentAtLength(length: number) {\n    if (!this.isDifferentiable()) {\n      return null\n    }\n\n    const start = this.start\n    const end = this.end\n\n    const tangentStart = this.pointAtLength(length)\n    const tangentLine = new Line(start, end)\n    tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y)\n\n    return tangentLine\n  }\n\n  /**\n   * Returns which direction the line would have to rotate in order to direct\n   * itself at a point.\n   *\n   * Returns 1 if the given point on the right side of the segment, 0 if its\n   * on the segment, and -1 if the point is on the left side of the segment.\n   *\n   * @see https://softwareengineering.stackexchange.com/questions/165776/what-do-ptlinedist-and-relativeccw-do\n   */\n  relativeCcw(x: number, y: number): -1 | 0 | 1\n  relativeCcw(p: Point.PointLike | Point.PointData): -1 | 0 | 1\n  relativeCcw(x: number | Point.PointLike | Point.PointData, y?: number) {\n    const ref = Point.create(x, y)\n\n    let dx1 = ref.x - this.start.x\n    let dy1 = ref.y - this.start.y\n    const dx2 = this.end.x - this.start.x\n    const dy2 = this.end.y - this.start.y\n\n    let ccw = dx1 * dy2 - dy1 * dx2\n    if (ccw === 0) {\n      ccw = dx1 * dx2 + dy1 * dy2\n      if (ccw > 0.0) {\n        dx1 -= dx2\n        dy1 -= dy2\n        ccw = dx1 * dx2 + dy1 * dy2\n        if (ccw < 0.0) {\n          ccw = 0.0\n        }\n      }\n    }\n\n    return ccw < 0.0 ? -1 : ccw > 0.0 ? 1 : 0\n  }\n\n  /**\n   * Return `true` if the line equals the other line.\n   */\n  equals(l: Line) {\n    return (\n      l != null &&\n      this.start.x === l.start.x &&\n      this.start.y === l.start.y &&\n      this.end.x === l.end.x &&\n      this.end.y === l.end.y\n    )\n  }\n\n  /**\n   * Returns another line which is a clone of the line.\n   */\n  clone() {\n    return new Line(this.start, this.end)\n  }\n\n  toJSON() {\n    return { start: this.start.toJSON(), end: this.end.toJSON() }\n  }\n\n  serialize() {\n    return [this.start.serialize(), this.end.serialize()].join(' ')\n  }\n}\n\nexport namespace Line {\n  export function isLine(instance: any): instance is Line {\n    return instance != null && instance instanceof Line\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}