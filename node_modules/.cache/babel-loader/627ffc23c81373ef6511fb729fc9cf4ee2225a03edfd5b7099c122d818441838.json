{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Basecoat } from '@antv/x6-common';\nimport { Point, Rectangle } from '@antv/x6-geometry';\nimport { Model, Cell, Node, Edge } from '../model';\nimport { CellView } from '../view';\nimport * as Registry from '../registry';\nimport { GraphView } from './view';\nimport { CSSManager as Css } from './css';\nimport { Options as GraphOptions } from './options';\nimport { GridManager as Grid } from './grid';\nimport { TransformManager as Transform } from './transform';\nimport { BackgroundManager as Background } from './background';\nimport { PanningManager as Panning } from './panning';\nimport { MouseWheel as Wheel } from './mousewheel';\nimport { VirtualRenderManager as VirtualRender } from './virtual-render';\nimport { Renderer as ViewRenderer } from '../renderer';\nimport { DefsManager as Defs } from './defs';\nimport { CoordManager as Coord } from './coord';\nimport { HighlightManager as Highlight } from './highlight';\nimport { SizeManager as Size } from './size';\nexport class Graph extends Basecoat {\n  get container() {\n    return this.options.container;\n  }\n  get [Symbol.toStringTag]() {\n    return Graph.toStringTag;\n  }\n  constructor(options) {\n    super();\n    this.installedPlugins = new Set();\n    this.options = GraphOptions.get(options);\n    this.css = new Css(this);\n    this.view = new GraphView(this);\n    this.defs = new Defs(this);\n    this.coord = new Coord(this);\n    this.transform = new Transform(this);\n    this.highlight = new Highlight(this);\n    this.grid = new Grid(this);\n    this.background = new Background(this);\n    if (this.options.model) {\n      this.model = this.options.model;\n    } else {\n      this.model = new Model();\n      this.model.graph = this;\n    }\n    this.renderer = new ViewRenderer(this);\n    this.panning = new Panning(this);\n    this.mousewheel = new Wheel(this);\n    this.virtualRender = new VirtualRender(this);\n    this.size = new Size(this);\n  }\n  // #region model\n  isNode(cell) {\n    return cell.isNode();\n  }\n  isEdge(cell) {\n    return cell.isEdge();\n  }\n  resetCells(cells, options = {}) {\n    this.model.resetCells(cells, options);\n    return this;\n  }\n  clearCells(options = {}) {\n    this.model.clear(options);\n    return this;\n  }\n  toJSON(options = {}) {\n    return this.model.toJSON(options);\n  }\n  parseJSON(data) {\n    return this.model.parseJSON(data);\n  }\n  fromJSON(data, options = {}) {\n    this.model.fromJSON(data, options);\n    return this;\n  }\n  getCellById(id) {\n    return this.model.getCell(id);\n  }\n  addNode(node, options = {}) {\n    return this.model.addNode(node, options);\n  }\n  addNodes(nodes, options = {}) {\n    return this.addCell(nodes.map(node => Node.isNode(node) ? node : this.createNode(node)), options);\n  }\n  createNode(metadata) {\n    return this.model.createNode(metadata);\n  }\n  removeNode(node, options = {}) {\n    return this.model.removeCell(node, options);\n  }\n  addEdge(edge, options = {}) {\n    return this.model.addEdge(edge, options);\n  }\n  addEdges(edges, options = {}) {\n    return this.addCell(edges.map(edge => Edge.isEdge(edge) ? edge : this.createEdge(edge)), options);\n  }\n  removeEdge(edge, options = {}) {\n    return this.model.removeCell(edge, options);\n  }\n  createEdge(metadata) {\n    return this.model.createEdge(metadata);\n  }\n  addCell(cell, options = {}) {\n    this.model.addCell(cell, options);\n    return this;\n  }\n  removeCell(cell, options = {}) {\n    return this.model.removeCell(cell, options);\n  }\n  removeCells(cells, options = {}) {\n    return this.model.removeCells(cells, options);\n  }\n  removeConnectedEdges(cell, options = {}) {\n    return this.model.removeConnectedEdges(cell, options);\n  }\n  disconnectConnectedEdges(cell, options = {}) {\n    this.model.disconnectConnectedEdges(cell, options);\n    return this;\n  }\n  hasCell(cell) {\n    return this.model.has(cell);\n  }\n  getCells() {\n    return this.model.getCells();\n  }\n  getCellCount() {\n    return this.model.total();\n  }\n  /**\n   * Returns all the nodes in the graph.\n   */\n  getNodes() {\n    return this.model.getNodes();\n  }\n  /**\n   * Returns all the edges in the graph.\n   */\n  getEdges() {\n    return this.model.getEdges();\n  }\n  /**\n   * Returns all outgoing edges for the node.\n   */\n  getOutgoingEdges(cell) {\n    return this.model.getOutgoingEdges(cell);\n  }\n  /**\n   * Returns all incoming edges for the node.\n   */\n  getIncomingEdges(cell) {\n    return this.model.getIncomingEdges(cell);\n  }\n  /**\n   * Returns edges connected with cell.\n   */\n  getConnectedEdges(cell, options = {}) {\n    return this.model.getConnectedEdges(cell, options);\n  }\n  /**\n   * Returns an array of all the roots of the graph.\n   */\n  getRootNodes() {\n    return this.model.getRoots();\n  }\n  /**\n   * Returns an array of all the leafs of the graph.\n   */\n  getLeafNodes() {\n    return this.model.getLeafs();\n  }\n  /**\n   * Returns `true` if the node is a root node, i.e.\n   * there is no  edges coming to the node.\n   */\n  isRootNode(cell) {\n    return this.model.isRoot(cell);\n  }\n  /**\n   * Returns `true` if the node is a leaf node, i.e.\n   * there is no edges going out from the node.\n   */\n  isLeafNode(cell) {\n    return this.model.isLeaf(cell);\n  }\n  /**\n   * Returns all the neighbors of node in the graph. Neighbors are all\n   * the nodes connected to node via either incoming or outgoing edge.\n   */\n  getNeighbors(cell, options = {}) {\n    return this.model.getNeighbors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a neighbor of `cell1`.\n   */\n  isNeighbor(cell1, cell2, options = {}) {\n    return this.model.isNeighbor(cell1, cell2, options);\n  }\n  getSuccessors(cell, options = {}) {\n    return this.model.getSuccessors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a successor of `cell1`.\n   */\n  isSuccessor(cell1, cell2, options = {}) {\n    return this.model.isSuccessor(cell1, cell2, options);\n  }\n  getPredecessors(cell, options = {}) {\n    return this.model.getPredecessors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a predecessor of `cell1`.\n   */\n  isPredecessor(cell1, cell2, options = {}) {\n    return this.model.isPredecessor(cell1, cell2, options);\n  }\n  getCommonAncestor(...cells) {\n    return this.model.getCommonAncestor(...cells);\n  }\n  /**\n   * Returns an array of cells that result from finding nodes/edges that\n   * are connected to any of the cells in the cells array. This function\n   * loops over cells and if the current cell is a edge, it collects its\n   * source/target nodes; if it is an node, it collects its incoming and\n   * outgoing edges if both the edge terminal (source/target) are in the\n   * cells array.\n   */\n  getSubGraph(cells, options = {}) {\n    return this.model.getSubGraph(cells, options);\n  }\n  /**\n   * Clones the whole subgraph (including all the connected links whose\n   * source/target is in the subgraph). If `options.deep` is `true`, also\n   * take into account all the embedded cells of all the subgraph cells.\n   *\n   * Returns a map of the form: { [original cell ID]: [clone] }.\n   */\n  cloneSubGraph(cells, options = {}) {\n    return this.model.cloneSubGraph(cells, options);\n  }\n  cloneCells(cells) {\n    return this.model.cloneCells(cells);\n  }\n  getNodesFromPoint(x, y) {\n    return this.model.getNodesFromPoint(x, y);\n  }\n  getNodesInArea(x, y, w, h, options) {\n    return this.model.getNodesInArea(x, y, w, h, options);\n  }\n  getNodesUnderNode(node, options = {}) {\n    return this.model.getNodesUnderNode(node, options);\n  }\n  searchCell(cell, iterator, options = {}) {\n    this.model.search(cell, iterator, options);\n    return this;\n  }\n  /** *\n   * Returns an array of IDs of nodes on the shortest\n   * path between source and target.\n   */\n  getShortestPath(source, target, options = {}) {\n    return this.model.getShortestPath(source, target, options);\n  }\n  /**\n   * Returns the bounding box that surrounds all cells in the graph.\n   */\n  getAllCellsBBox() {\n    return this.model.getAllCellsBBox();\n  }\n  /**\n   * Returns the bounding box that surrounds all the given cells.\n   */\n  getCellsBBox(cells, options = {}) {\n    return this.model.getCellsBBox(cells, options);\n  }\n  startBatch(name, data = {}) {\n    this.model.startBatch(name, data);\n  }\n  stopBatch(name, data = {}) {\n    this.model.stopBatch(name, data);\n  }\n  batchUpdate(arg1, arg2, arg3) {\n    const name = typeof arg1 === 'string' ? arg1 : 'update';\n    const execute = typeof arg1 === 'string' ? arg2 : arg1;\n    const data = typeof arg2 === 'function' ? arg3 : arg2;\n    this.startBatch(name, data);\n    const result = execute();\n    this.stopBatch(name, data);\n    return result;\n  }\n  updateCellId(cell, newId) {\n    return this.model.updateCellId(cell, newId);\n  }\n  // #endregion\n  // #region view\n  findView(ref) {\n    if (Cell.isCell(ref)) {\n      return this.findViewByCell(ref);\n    }\n    return this.findViewByElem(ref);\n  }\n  findViews(ref) {\n    if (Rectangle.isRectangleLike(ref)) {\n      return this.findViewsInArea(ref);\n    }\n    if (Point.isPointLike(ref)) {\n      return this.findViewsFromPoint(ref);\n    }\n    return [];\n  }\n  findViewByCell(cell) {\n    return this.renderer.findViewByCell(cell);\n  }\n  findViewByElem(elem) {\n    return this.renderer.findViewByElem(elem);\n  }\n  findViewsFromPoint(x, y) {\n    const p = typeof x === 'number' ? {\n      x,\n      y: y\n    } : x;\n    return this.renderer.findViewsFromPoint(p);\n  }\n  findViewsInArea(x, y, width, height, options) {\n    const rect = typeof x === 'number' ? {\n      x,\n      y: y,\n      width: width,\n      height: height\n    } : x;\n    const localOptions = typeof x === 'number' ? options : y;\n    return this.renderer.findViewsInArea(rect, localOptions);\n  }\n  matrix(mat) {\n    if (typeof mat === 'undefined') {\n      return this.transform.getMatrix();\n    }\n    this.transform.setMatrix(mat);\n    return this;\n  }\n  resize(width, height) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.resize(width, height);\n    } else {\n      this.transform.resize(width, height);\n    }\n    return this;\n  }\n  scale(sx, sy = sx, cx = 0, cy = 0) {\n    if (typeof sx === 'undefined') {\n      return this.transform.getScale();\n    }\n    this.transform.scale(sx, sy, cx, cy);\n    return this;\n  }\n  zoom(factor, options) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      if (typeof factor === 'undefined') {\n        return scroller.zoom();\n      }\n      scroller.zoom(factor, options);\n    } else {\n      if (typeof factor === 'undefined') {\n        return this.transform.getZoom();\n      }\n      this.transform.zoom(factor, options);\n    }\n    return this;\n  }\n  zoomTo(factor, options = {}) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.zoom(factor, Object.assign(Object.assign({}, options), {\n        absolute: true\n      }));\n    } else {\n      this.transform.zoom(factor, Object.assign(Object.assign({}, options), {\n        absolute: true\n      }));\n    }\n    return this;\n  }\n  zoomToRect(rect, options = {}) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.zoomToRect(rect, options);\n    } else {\n      this.transform.zoomToRect(rect, options);\n    }\n    return this;\n  }\n  zoomToFit(options = {}) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.zoomToFit(options);\n    } else {\n      this.transform.zoomToFit(options);\n    }\n    return this;\n  }\n  rotate(angle, cx, cy) {\n    if (typeof angle === 'undefined') {\n      return this.transform.getRotation();\n    }\n    this.transform.rotate(angle, cx, cy);\n    return this;\n  }\n  translate(tx, ty) {\n    if (typeof tx === 'undefined') {\n      return this.transform.getTranslation();\n    }\n    this.transform.translate(tx, ty);\n    return this;\n  }\n  translateBy(dx, dy) {\n    const ts = this.translate();\n    const tx = ts.tx + dx;\n    const ty = ts.ty + dy;\n    return this.translate(tx, ty);\n  }\n  getGraphArea() {\n    return this.transform.getGraphArea();\n  }\n  getContentArea(options = {}) {\n    return this.transform.getContentArea(options);\n  }\n  getContentBBox(options = {}) {\n    return this.transform.getContentBBox(options);\n  }\n  fitToContent(gridWidth, gridHeight, padding, options) {\n    return this.transform.fitToContent(gridWidth, gridHeight, padding, options);\n  }\n  scaleContentToFit(options = {}) {\n    this.transform.scaleContentToFit(options);\n    return this;\n  }\n  /**\n   * Position the center of graph to the center of the viewport.\n   */\n  center(options) {\n    return this.centerPoint(options);\n  }\n  centerPoint(x, y, options) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.centerPoint(x, y, options);\n    } else {\n      this.transform.centerPoint(x, y);\n    }\n    return this;\n  }\n  centerContent(options) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.centerContent(options);\n    } else {\n      this.transform.centerContent(options);\n    }\n    return this;\n  }\n  centerCell(cell, options) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.centerCell(cell, options);\n    } else {\n      this.transform.centerCell(cell);\n    }\n    return this;\n  }\n  positionPoint(point, x, y, options = {}) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.positionPoint(point, x, y, options);\n    } else {\n      this.transform.positionPoint(point, x, y);\n    }\n    return this;\n  }\n  positionRect(rect, direction, options) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.positionRect(rect, direction, options);\n    } else {\n      this.transform.positionRect(rect, direction);\n    }\n    return this;\n  }\n  positionCell(cell, direction, options) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.positionCell(cell, direction, options);\n    } else {\n      this.transform.positionCell(cell, direction);\n    }\n    return this;\n  }\n  positionContent(pos, options) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.positionContent(pos, options);\n    } else {\n      this.transform.positionContent(pos, options);\n    }\n    return this;\n  }\n  snapToGrid(x, y) {\n    return this.coord.snapToGrid(x, y);\n  }\n  pageToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.pageToLocalRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.pageToLocalRect(x, y, width, height);\n    }\n    return this.coord.pageToLocalPoint(x, y);\n  }\n  localToPage(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToPageRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToPageRect(x, y, width, height);\n    }\n    return this.coord.localToPagePoint(x, y);\n  }\n  clientToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToLocalRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.clientToLocalRect(x, y, width, height);\n    }\n    return this.coord.clientToLocalPoint(x, y);\n  }\n  localToClient(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToClientRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToClientRect(x, y, width, height);\n    }\n    return this.coord.localToClientPoint(x, y);\n  }\n  localToGraph(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToGraphRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToGraphRect(x, y, width, height);\n    }\n    return this.coord.localToGraphPoint(x, y);\n  }\n  graphToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.graphToLocalRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.graphToLocalRect(x, y, width, height);\n    }\n    return this.coord.graphToLocalPoint(x, y);\n  }\n  clientToGraph(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToGraphRect(x);\n    }\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.clientToGraphRect(x, y, width, height);\n    }\n    return this.coord.clientToGraphPoint(x, y);\n  }\n  // #endregion\n  // #region defs\n  defineFilter(options) {\n    return this.defs.filter(options);\n  }\n  defineGradient(options) {\n    return this.defs.gradient(options);\n  }\n  defineMarker(options) {\n    return this.defs.marker(options);\n  }\n  // #endregion\n  // #region grid\n  getGridSize() {\n    return this.grid.getGridSize();\n  }\n  setGridSize(gridSize) {\n    this.grid.setGridSize(gridSize);\n    return this;\n  }\n  showGrid() {\n    this.grid.show();\n    return this;\n  }\n  hideGrid() {\n    this.grid.hide();\n    return this;\n  }\n  clearGrid() {\n    this.grid.clear();\n    return this;\n  }\n  drawGrid(options) {\n    this.grid.draw(options);\n    return this;\n  }\n  // #endregion\n  // #region background\n  updateBackground() {\n    this.background.update();\n    return this;\n  }\n  drawBackground(options, onGraph) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.drawBackground(options, onGraph);\n    } else {\n      this.background.draw(options);\n    }\n    return this;\n  }\n  clearBackground(onGraph) {\n    const scroller = this.getPlugin('scroller');\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.clearBackground(onGraph);\n    } else {\n      this.background.clear();\n    }\n    return this;\n  }\n  // #endregion\n  // #region virtual-render\n  enableVirtualRender() {\n    this.virtualRender.enableVirtualRender();\n    return this;\n  }\n  disableVirtualRender() {\n    this.virtualRender.disableVirtualRender();\n    return this;\n  }\n  // #endregion\n  // #region mousewheel\n  isMouseWheelEnabled() {\n    return !this.mousewheel.disabled;\n  }\n  enableMouseWheel() {\n    this.mousewheel.enable();\n    return this;\n  }\n  disableMouseWheel() {\n    this.mousewheel.disable();\n    return this;\n  }\n  toggleMouseWheel(enabled) {\n    if (enabled == null) {\n      if (this.isMouseWheelEnabled()) {\n        this.disableMouseWheel();\n      } else {\n        this.enableMouseWheel();\n      }\n    } else if (enabled) {\n      this.enableMouseWheel();\n    } else {\n      this.disableMouseWheel();\n    }\n    return this;\n  }\n  // #endregion\n  // #region panning\n  isPannable() {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      return scroller.isPannable();\n    }\n    return this.panning.pannable;\n  }\n  enablePanning() {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.enablePanning();\n    } else {\n      this.panning.enablePanning();\n    }\n    return this;\n  }\n  disablePanning() {\n    const scroller = this.getPlugin('scroller');\n    if (scroller) {\n      scroller.disablePanning();\n    } else {\n      this.panning.disablePanning();\n    }\n    return this;\n  }\n  togglePanning(pannable) {\n    if (pannable == null) {\n      if (this.isPannable()) {\n        this.disablePanning();\n      } else {\n        this.enablePanning();\n      }\n    } else if (pannable !== this.isPannable()) {\n      if (pannable) {\n        this.enablePanning();\n      } else {\n        this.disablePanning();\n      }\n    }\n    return this;\n  }\n  // #endregion\n  // #region plugin\n  use(plugin, ...options) {\n    if (!this.installedPlugins.has(plugin)) {\n      this.installedPlugins.add(plugin);\n      plugin.init(this, ...options);\n    }\n    return this;\n  }\n  getPlugin(pluginName) {\n    return Array.from(this.installedPlugins).find(plugin => plugin.name === pluginName);\n  }\n  getPlugins(pluginName) {\n    return Array.from(this.installedPlugins).filter(plugin => pluginName.includes(plugin.name));\n  }\n  enablePlugins(plugins) {\n    let postPlugins = plugins;\n    if (!Array.isArray(postPlugins)) {\n      postPlugins = [postPlugins];\n    }\n    const aboutToChangePlugins = this.getPlugins(postPlugins);\n    aboutToChangePlugins === null || aboutToChangePlugins === void 0 ? void 0 : aboutToChangePlugins.forEach(plugin => {\n      var _a;\n      (_a = plugin === null || plugin === void 0 ? void 0 : plugin.enable) === null || _a === void 0 ? void 0 : _a.call(plugin);\n    });\n    return this;\n  }\n  disablePlugins(plugins) {\n    let postPlugins = plugins;\n    if (!Array.isArray(postPlugins)) {\n      postPlugins = [postPlugins];\n    }\n    const aboutToChangePlugins = this.getPlugins(postPlugins);\n    aboutToChangePlugins === null || aboutToChangePlugins === void 0 ? void 0 : aboutToChangePlugins.forEach(plugin => {\n      var _a;\n      (_a = plugin === null || plugin === void 0 ? void 0 : plugin.disable) === null || _a === void 0 ? void 0 : _a.call(plugin);\n    });\n    return this;\n  }\n  isPluginEnabled(pluginName) {\n    var _a;\n    const pluginIns = this.getPlugin(pluginName);\n    return (_a = pluginIns === null || pluginIns === void 0 ? void 0 : pluginIns.isEnabled) === null || _a === void 0 ? void 0 : _a.call(pluginIns);\n  }\n  disposePlugins(plugins) {\n    let postPlugins = plugins;\n    if (!Array.isArray(postPlugins)) {\n      postPlugins = [postPlugins];\n    }\n    const aboutToChangePlugins = this.getPlugins(postPlugins);\n    aboutToChangePlugins === null || aboutToChangePlugins === void 0 ? void 0 : aboutToChangePlugins.forEach(plugin => {\n      plugin.dispose();\n      this.installedPlugins.delete(plugin);\n    });\n    return this;\n  }\n  // #endregion\n  // #region dispose\n  dispose(clean = true) {\n    if (clean) {\n      this.model.dispose();\n    }\n    this.css.dispose();\n    this.defs.dispose();\n    this.grid.dispose();\n    this.coord.dispose();\n    this.transform.dispose();\n    this.highlight.dispose();\n    this.background.dispose();\n    this.mousewheel.dispose();\n    this.panning.dispose();\n    this.view.dispose();\n    this.renderer.dispose();\n    this.installedPlugins.forEach(plugin => {\n      plugin.dispose();\n    });\n  }\n}\n__decorate([Basecoat.dispose()], Graph.prototype, \"dispose\", null);\n(function (Graph) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  Graph.View = GraphView;\n  Graph.Renderer = ViewRenderer;\n  Graph.MouseWheel = Wheel;\n  Graph.DefsManager = Defs;\n  Graph.GridManager = Grid;\n  Graph.CoordManager = Coord;\n  Graph.TransformManager = Transform;\n  Graph.HighlightManager = Highlight;\n  Graph.BackgroundManager = Background;\n  Graph.PanningManager = Panning;\n})(Graph || (Graph = {}));\n(function (Graph) {\n  Graph.toStringTag = `X6.${Graph.name}`;\n  function isGraph(instance) {\n    if (instance == null) {\n      return false;\n    }\n    if (instance instanceof Graph) {\n      return true;\n    }\n    const tag = instance[Symbol.toStringTag];\n    if (tag == null || tag === Graph.toStringTag) {\n      return true;\n    }\n    return false;\n  }\n  Graph.isGraph = isGraph;\n})(Graph || (Graph = {}));\n(function (Graph) {\n  function render(options, data) {\n    const graph = options instanceof HTMLElement ? new Graph({\n      container: options\n    }) : new Graph(options);\n    if (data != null) {\n      graph.fromJSON(data);\n    }\n    return graph;\n  }\n  Graph.render = render;\n})(Graph || (Graph = {}));\n(function (Graph) {\n  Graph.registerNode = Node.registry.register;\n  Graph.registerEdge = Edge.registry.register;\n  Graph.registerView = CellView.registry.register;\n  Graph.registerAttr = Registry.Attr.registry.register;\n  Graph.registerGrid = Registry.Grid.registry.register;\n  Graph.registerFilter = Registry.Filter.registry.register;\n  Graph.registerNodeTool = Registry.NodeTool.registry.register;\n  Graph.registerEdgeTool = Registry.EdgeTool.registry.register;\n  Graph.registerBackground = Registry.Background.registry.register;\n  Graph.registerHighlighter = Registry.Highlighter.registry.register;\n  Graph.registerPortLayout = Registry.PortLayout.registry.register;\n  Graph.registerPortLabelLayout = Registry.PortLabelLayout.registry.register;\n  Graph.registerMarker = Registry.Marker.registry.register;\n  Graph.registerRouter = Registry.Router.registry.register;\n  Graph.registerConnector = Registry.Connector.registry.register;\n  Graph.registerAnchor = Registry.NodeAnchor.registry.register;\n  Graph.registerEdgeAnchor = Registry.EdgeAnchor.registry.register;\n  Graph.registerConnectionPoint = Registry.ConnectionPoint.registry.register;\n})(Graph || (Graph = {}));\n(function (Graph) {\n  Graph.unregisterNode = Node.registry.unregister;\n  Graph.unregisterEdge = Edge.registry.unregister;\n  Graph.unregisterView = CellView.registry.unregister;\n  Graph.unregisterAttr = Registry.Attr.registry.unregister;\n  Graph.unregisterGrid = Registry.Grid.registry.unregister;\n  Graph.unregisterFilter = Registry.Filter.registry.unregister;\n  Graph.unregisterNodeTool = Registry.NodeTool.registry.unregister;\n  Graph.unregisterEdgeTool = Registry.EdgeTool.registry.unregister;\n  Graph.unregisterBackground = Registry.Background.registry.unregister;\n  Graph.unregisterHighlighter = Registry.Highlighter.registry.unregister;\n  Graph.unregisterPortLayout = Registry.PortLayout.registry.unregister;\n  Graph.unregisterPortLabelLayout = Registry.PortLabelLayout.registry.unregister;\n  Graph.unregisterMarker = Registry.Marker.registry.unregister;\n  Graph.unregisterRouter = Registry.Router.registry.unregister;\n  Graph.unregisterConnector = Registry.Connector.registry.unregister;\n  Graph.unregisterAnchor = Registry.NodeAnchor.registry.unregister;\n  Graph.unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister;\n  Graph.unregisterConnectionPoint = Registry.ConnectionPoint.registry.unregister;\n})(Graph || (Graph = {}));","map":{"version":3,"names":["Basecoat","Point","Rectangle","Model","Cell","Node","Edge","CellView","Registry","GraphView","CSSManager","Css","Options","GraphOptions","GridManager","Grid","TransformManager","Transform","BackgroundManager","Background","PanningManager","Panning","MouseWheel","Wheel","VirtualRenderManager","VirtualRender","Renderer","ViewRenderer","DefsManager","Defs","CoordManager","Coord","HighlightManager","Highlight","SizeManager","Size","Graph","container","options","Symbol","toStringTag","constructor","installedPlugins","Set","get","css","view","defs","coord","transform","highlight","grid","background","model","graph","renderer","panning","mousewheel","virtualRender","size","isNode","cell","isEdge","resetCells","cells","clearCells","clear","toJSON","parseJSON","data","fromJSON","getCellById","id","getCell","addNode","node","addNodes","nodes","addCell","map","createNode","metadata","removeNode","removeCell","addEdge","edge","addEdges","edges","createEdge","removeEdge","removeCells","removeConnectedEdges","disconnectConnectedEdges","hasCell","has","getCells","getCellCount","total","getNodes","getEdges","getOutgoingEdges","getIncomingEdges","getConnectedEdges","getRootNodes","getRoots","getLeafNodes","getLeafs","isRootNode","isRoot","isLeafNode","isLeaf","getNeighbors","isNeighbor","cell1","cell2","getSuccessors","isSuccessor","getPredecessors","isPredecessor","getCommonAncestor","getSubGraph","cloneSubGraph","cloneCells","getNodesFromPoint","x","y","getNodesInArea","w","h","getNodesUnderNode","searchCell","iterator","search","getShortestPath","source","target","getAllCellsBBox","getCellsBBox","startBatch","name","stopBatch","batchUpdate","arg1","arg2","arg3","execute","result","updateCellId","newId","findView","ref","isCell","findViewByCell","findViewByElem","findViews","isRectangleLike","findViewsInArea","isPointLike","findViewsFromPoint","elem","p","width","height","rect","localOptions","matrix","mat","getMatrix","setMatrix","resize","scroller","getPlugin","scale","sx","sy","cx","cy","getScale","zoom","factor","getZoom","zoomTo","Object","assign","absolute","zoomToRect","zoomToFit","rotate","angle","getRotation","translate","tx","ty","getTranslation","translateBy","dx","dy","ts","getGraphArea","getContentArea","getContentBBox","fitToContent","gridWidth","gridHeight","padding","scaleContentToFit","center","centerPoint","centerContent","centerCell","positionPoint","point","positionRect","direction","positionCell","positionContent","pos","snapToGrid","pageToLocal","pageToLocalRect","pageToLocalPoint","localToPage","localToPageRect","localToPagePoint","clientToLocal","clientToLocalRect","clientToLocalPoint","localToClient","localToClientRect","localToClientPoint","localToGraph","localToGraphRect","localToGraphPoint","graphToLocal","graphToLocalRect","graphToLocalPoint","clientToGraph","clientToGraphRect","clientToGraphPoint","defineFilter","filter","defineGradient","gradient","defineMarker","marker","getGridSize","setGridSize","gridSize","showGrid","show","hideGrid","hide","clearGrid","drawGrid","draw","updateBackground","update","drawBackground","onGraph","clearBackground","enableVirtualRender","disableVirtualRender","isMouseWheelEnabled","disabled","enableMouseWheel","enable","disableMouseWheel","disable","toggleMouseWheel","enabled","isPannable","pannable","enablePanning","disablePanning","togglePanning","use","plugin","add","init","pluginName","Array","from","find","getPlugins","includes","enablePlugins","plugins","postPlugins","isArray","aboutToChangePlugins","forEach","_a","call","disablePlugins","isPluginEnabled","pluginIns","isEnabled","disposePlugins","dispose","delete","clean","__decorate","View","isGraph","instance","tag","render","HTMLElement","registerNode","registry","register","registerEdge","registerView","registerAttr","Attr","registerGrid","registerFilter","Filter","registerNodeTool","NodeTool","registerEdgeTool","EdgeTool","registerBackground","registerHighlighter","Highlighter","registerPortLayout","PortLayout","registerPortLabelLayout","PortLabelLayout","registerMarker","Marker","registerRouter","Router","registerConnector","Connector","registerAnchor","NodeAnchor","registerEdgeAnchor","EdgeAnchor","registerConnectionPoint","ConnectionPoint","unregisterNode","unregister","unregisterEdge","unregisterView","unregisterAttr","unregisterGrid","unregisterFilter","unregisterNodeTool","unregisterEdgeTool","unregisterBackground","unregisterHighlighter","unregisterPortLayout","unregisterPortLabelLayout","unregisterMarker","unregisterRouter","unregisterConnector","unregisterAnchor","unregisterEdgeAnchor","unregisterConnectionPoint"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/graph/graph.ts"],"sourcesContent":["import { Basecoat, NumberExt, Dom, KeyValue } from '@antv/x6-common'\nimport { Point, Rectangle } from '@antv/x6-geometry'\nimport { Model, Collection, Cell, Node, Edge } from '../model'\nimport { CellView } from '../view'\nimport * as Registry from '../registry'\nimport { GraphView } from './view'\nimport { EventArgs } from './events'\nimport { CSSManager as Css } from './css'\nimport { Options as GraphOptions } from './options'\nimport { GridManager as Grid } from './grid'\nimport { TransformManager as Transform } from './transform'\nimport { BackgroundManager as Background } from './background'\nimport { PanningManager as Panning } from './panning'\nimport { MouseWheel as Wheel } from './mousewheel'\nimport { VirtualRenderManager as VirtualRender } from './virtual-render'\nimport { Renderer as ViewRenderer } from '../renderer'\nimport { DefsManager as Defs } from './defs'\nimport { CoordManager as Coord } from './coord'\nimport { HighlightManager as Highlight } from './highlight'\nimport { SizeManager as Size } from './size'\n\nexport class Graph extends Basecoat<EventArgs> {\n  private installedPlugins: Set<Graph.Plugin> = new Set()\n  public model: Model\n\n  public readonly options: GraphOptions.Definition\n  public readonly css: Css\n  public readonly view: GraphView\n  public readonly grid: Grid\n  public readonly defs: Defs\n  public readonly coord: Coord\n  public readonly renderer: ViewRenderer\n  public readonly highlight: Highlight\n  public readonly transform: Transform\n  public readonly background: Background\n  public readonly panning: Panning\n  public readonly mousewheel: Wheel\n  public readonly virtualRender: VirtualRender\n  public readonly size: Size\n\n  public get container() {\n    return this.options.container\n  }\n\n  protected get [Symbol.toStringTag]() {\n    return Graph.toStringTag\n  }\n\n  constructor(options: Partial<GraphOptions.Manual>) {\n    super()\n    this.options = GraphOptions.get(options)\n    this.css = new Css(this)\n    this.view = new GraphView(this)\n    this.defs = new Defs(this)\n    this.coord = new Coord(this)\n    this.transform = new Transform(this)\n    this.highlight = new Highlight(this)\n    this.grid = new Grid(this)\n    this.background = new Background(this)\n\n    if (this.options.model) {\n      this.model = this.options.model\n    } else {\n      this.model = new Model()\n      this.model.graph = this\n    }\n\n    this.renderer = new ViewRenderer(this)\n    this.panning = new Panning(this)\n    this.mousewheel = new Wheel(this)\n    this.virtualRender = new VirtualRender(this)\n    this.size = new Size(this)\n  }\n\n  // #region model\n\n  isNode(cell: Cell): cell is Node {\n    return cell.isNode()\n  }\n\n  isEdge(cell: Cell): cell is Edge {\n    return cell.isEdge()\n  }\n\n  resetCells(cells: Cell[], options: Collection.SetOptions = {}) {\n    this.model.resetCells(cells, options)\n    return this\n  }\n\n  clearCells(options: Cell.SetOptions = {}) {\n    this.model.clear(options)\n    return this\n  }\n\n  toJSON(options: Model.ToJSONOptions = {}) {\n    return this.model.toJSON(options)\n  }\n\n  parseJSON(data: Model.FromJSONData) {\n    return this.model.parseJSON(data)\n  }\n\n  fromJSON(data: Model.FromJSONData, options: Model.FromJSONOptions = {}) {\n    this.model.fromJSON(data, options)\n    return this\n  }\n\n  getCellById(id: string) {\n    return this.model.getCell(id)\n  }\n\n  addNode(metadata: Node.Metadata, options?: Model.AddOptions): Node\n  addNode(node: Node, options?: Model.AddOptions): Node\n  addNode(node: Node | Node.Metadata, options: Model.AddOptions = {}): Node {\n    return this.model.addNode(node, options)\n  }\n\n  addNodes(nodes: (Node | Node.Metadata)[], options: Model.AddOptions = {}) {\n    return this.addCell(\n      nodes.map((node) => (Node.isNode(node) ? node : this.createNode(node))),\n      options,\n    )\n  }\n\n  createNode(metadata: Node.Metadata) {\n    return this.model.createNode(metadata)\n  }\n\n  removeNode(nodeId: string, options?: Collection.RemoveOptions): Node | null\n  removeNode(node: Node, options?: Collection.RemoveOptions): Node | null\n  removeNode(node: Node | string, options: Collection.RemoveOptions = {}) {\n    return this.model.removeCell(node as Node, options) as Node\n  }\n\n  addEdge(metadata: Edge.Metadata, options?: Model.AddOptions): Edge\n  addEdge(edge: Edge, options?: Model.AddOptions): Edge\n  addEdge(edge: Edge | Edge.Metadata, options: Model.AddOptions = {}): Edge {\n    return this.model.addEdge(edge, options)\n  }\n\n  addEdges(edges: (Edge | Edge.Metadata)[], options: Model.AddOptions = {}) {\n    return this.addCell(\n      edges.map((edge) => (Edge.isEdge(edge) ? edge : this.createEdge(edge))),\n      options,\n    )\n  }\n\n  removeEdge(edgeId: string, options?: Collection.RemoveOptions): Edge | null\n  removeEdge(edge: Edge, options?: Collection.RemoveOptions): Edge | null\n  removeEdge(edge: Edge | string, options: Collection.RemoveOptions = {}) {\n    return this.model.removeCell(edge as Edge, options) as Edge\n  }\n\n  createEdge(metadata: Edge.Metadata) {\n    return this.model.createEdge(metadata)\n  }\n\n  addCell(cell: Cell | Cell[], options: Model.AddOptions = {}) {\n    this.model.addCell(cell, options)\n    return this\n  }\n\n  removeCell(cellId: string, options?: Collection.RemoveOptions): Cell | null\n  removeCell(cell: Cell, options?: Collection.RemoveOptions): Cell | null\n  removeCell(cell: Cell | string, options: Collection.RemoveOptions = {}) {\n    return this.model.removeCell(cell as Cell, options)\n  }\n\n  removeCells(cells: (Cell | string)[], options: Cell.RemoveOptions = {}) {\n    return this.model.removeCells(cells, options)\n  }\n\n  removeConnectedEdges(cell: Cell | string, options: Cell.RemoveOptions = {}) {\n    return this.model.removeConnectedEdges(cell, options)\n  }\n\n  disconnectConnectedEdges(cell: Cell | string, options: Edge.SetOptions = {}) {\n    this.model.disconnectConnectedEdges(cell, options)\n    return this\n  }\n\n  hasCell(cellId: string): boolean\n  hasCell(cell: Cell): boolean\n  hasCell(cell: string | Cell): boolean {\n    return this.model.has(cell as Cell)\n  }\n\n  getCells() {\n    return this.model.getCells()\n  }\n\n  getCellCount() {\n    return this.model.total()\n  }\n\n  /**\n   * Returns all the nodes in the graph.\n   */\n  getNodes() {\n    return this.model.getNodes()\n  }\n\n  /**\n   * Returns all the edges in the graph.\n   */\n  getEdges() {\n    return this.model.getEdges()\n  }\n\n  /**\n   * Returns all outgoing edges for the node.\n   */\n  getOutgoingEdges(cell: Cell | string) {\n    return this.model.getOutgoingEdges(cell)\n  }\n\n  /**\n   * Returns all incoming edges for the node.\n   */\n  getIncomingEdges(cell: Cell | string) {\n    return this.model.getIncomingEdges(cell)\n  }\n\n  /**\n   * Returns edges connected with cell.\n   */\n  getConnectedEdges(\n    cell: Cell | string,\n    options: Model.GetConnectedEdgesOptions = {},\n  ) {\n    return this.model.getConnectedEdges(cell, options)\n  }\n\n  /**\n   * Returns an array of all the roots of the graph.\n   */\n  getRootNodes() {\n    return this.model.getRoots()\n  }\n\n  /**\n   * Returns an array of all the leafs of the graph.\n   */\n  getLeafNodes() {\n    return this.model.getLeafs()\n  }\n\n  /**\n   * Returns `true` if the node is a root node, i.e.\n   * there is no  edges coming to the node.\n   */\n  isRootNode(cell: Cell | string) {\n    return this.model.isRoot(cell)\n  }\n\n  /**\n   * Returns `true` if the node is a leaf node, i.e.\n   * there is no edges going out from the node.\n   */\n  isLeafNode(cell: Cell | string) {\n    return this.model.isLeaf(cell)\n  }\n\n  /**\n   * Returns all the neighbors of node in the graph. Neighbors are all\n   * the nodes connected to node via either incoming or outgoing edge.\n   */\n  getNeighbors(cell: Cell, options: Model.GetNeighborsOptions = {}) {\n    return this.model.getNeighbors(cell, options)\n  }\n\n  /**\n   * Returns `true` if `cell2` is a neighbor of `cell1`.\n   */\n  isNeighbor(\n    cell1: Cell,\n    cell2: Cell,\n    options: Model.GetNeighborsOptions = {},\n  ) {\n    return this.model.isNeighbor(cell1, cell2, options)\n  }\n\n  getSuccessors(cell: Cell, options: Model.GetPredecessorsOptions = {}) {\n    return this.model.getSuccessors(cell, options)\n  }\n\n  /**\n   * Returns `true` if `cell2` is a successor of `cell1`.\n   */\n  isSuccessor(\n    cell1: Cell,\n    cell2: Cell,\n    options: Model.GetPredecessorsOptions = {},\n  ) {\n    return this.model.isSuccessor(cell1, cell2, options)\n  }\n\n  getPredecessors(cell: Cell, options: Model.GetPredecessorsOptions = {}) {\n    return this.model.getPredecessors(cell, options)\n  }\n\n  /**\n   * Returns `true` if `cell2` is a predecessor of `cell1`.\n   */\n  isPredecessor(\n    cell1: Cell,\n    cell2: Cell,\n    options: Model.GetPredecessorsOptions = {},\n  ) {\n    return this.model.isPredecessor(cell1, cell2, options)\n  }\n\n  getCommonAncestor(...cells: (Cell | null | undefined)[]) {\n    return this.model.getCommonAncestor(...cells)\n  }\n\n  /**\n   * Returns an array of cells that result from finding nodes/edges that\n   * are connected to any of the cells in the cells array. This function\n   * loops over cells and if the current cell is a edge, it collects its\n   * source/target nodes; if it is an node, it collects its incoming and\n   * outgoing edges if both the edge terminal (source/target) are in the\n   * cells array.\n   */\n  getSubGraph(cells: Cell[], options: Model.GetSubgraphOptions = {}) {\n    return this.model.getSubGraph(cells, options)\n  }\n\n  /**\n   * Clones the whole subgraph (including all the connected links whose\n   * source/target is in the subgraph). If `options.deep` is `true`, also\n   * take into account all the embedded cells of all the subgraph cells.\n   *\n   * Returns a map of the form: { [original cell ID]: [clone] }.\n   */\n  cloneSubGraph(cells: Cell[], options: Model.GetSubgraphOptions = {}) {\n    return this.model.cloneSubGraph(cells, options)\n  }\n\n  cloneCells(cells: Cell[]) {\n    return this.model.cloneCells(cells)\n  }\n\n  /**\n   * Returns an array of nodes whose bounding box contains point.\n   * Note that there can be more then one node as nodes might overlap.\n   */\n  getNodesFromPoint(x: number, y: number): Node[]\n  getNodesFromPoint(p: Point.PointLike): Node[]\n  getNodesFromPoint(x: number | Point.PointLike, y?: number) {\n    return this.model.getNodesFromPoint(x as number, y as number)\n  }\n\n  /**\n   * Returns an array of nodes whose bounding box top/left coordinate\n   * falls into the rectangle.\n   */\n  getNodesInArea(\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    options?: Model.GetCellsInAreaOptions,\n  ): Node[]\n  getNodesInArea(\n    rect: Rectangle.RectangleLike,\n    options?: Model.GetCellsInAreaOptions,\n  ): Node[]\n  getNodesInArea(\n    x: number | Rectangle.RectangleLike,\n    y?: number | Model.GetCellsInAreaOptions,\n    w?: number,\n    h?: number,\n    options?: Model.GetCellsInAreaOptions,\n  ): Node[] {\n    return this.model.getNodesInArea(\n      x as number,\n      y as number,\n      w as number,\n      h as number,\n      options,\n    )\n  }\n\n  getNodesUnderNode(\n    node: Node,\n    options: {\n      by?: 'bbox' | Rectangle.KeyPoint\n    } = {},\n  ) {\n    return this.model.getNodesUnderNode(node, options)\n  }\n\n  searchCell(\n    cell: Cell,\n    iterator: Model.SearchIterator,\n    options: Model.SearchOptions = {},\n  ) {\n    this.model.search(cell, iterator, options)\n    return this\n  }\n\n  /** *\n   * Returns an array of IDs of nodes on the shortest\n   * path between source and target.\n   */\n  getShortestPath(\n    source: Cell | string,\n    target: Cell | string,\n    options: Model.GetShortestPathOptions = {},\n  ) {\n    return this.model.getShortestPath(source, target, options)\n  }\n\n  /**\n   * Returns the bounding box that surrounds all cells in the graph.\n   */\n  getAllCellsBBox() {\n    return this.model.getAllCellsBBox()\n  }\n\n  /**\n   * Returns the bounding box that surrounds all the given cells.\n   */\n  getCellsBBox(cells: Cell[], options: Cell.GetCellsBBoxOptions = {}) {\n    return this.model.getCellsBBox(cells, options)\n  }\n\n  startBatch(name: string | Model.BatchName, data: KeyValue = {}) {\n    this.model.startBatch(name as Model.BatchName, data)\n  }\n\n  stopBatch(name: string | Model.BatchName, data: KeyValue = {}) {\n    this.model.stopBatch(name as Model.BatchName, data)\n  }\n\n  batchUpdate<T>(execute: () => T, data?: KeyValue): T\n  batchUpdate<T>(\n    name: string | Model.BatchName,\n    execute: () => T,\n    data?: KeyValue,\n  ): T\n  batchUpdate<T>(\n    arg1: string | Model.BatchName | (() => T),\n    arg2?: (() => T) | KeyValue,\n    arg3?: KeyValue,\n  ): T {\n    const name = typeof arg1 === 'string' ? arg1 : 'update'\n    const execute = typeof arg1 === 'string' ? (arg2 as () => T) : arg1\n    const data = typeof arg2 === 'function' ? arg3 : arg2\n    this.startBatch(name, data)\n    const result = execute()\n    this.stopBatch(name, data)\n    return result\n  }\n\n  updateCellId(cell: Cell, newId: string) {\n    return this.model.updateCellId(cell, newId)\n  }\n\n  // #endregion\n\n  // #region view\n\n  findView(ref: Cell | Element) {\n    if (Cell.isCell(ref)) {\n      return this.findViewByCell(ref)\n    }\n\n    return this.findViewByElem(ref)\n  }\n\n  findViews(ref: Point.PointLike | Rectangle.RectangleLike) {\n    if (Rectangle.isRectangleLike(ref)) {\n      return this.findViewsInArea(ref)\n    }\n\n    if (Point.isPointLike(ref)) {\n      return this.findViewsFromPoint(ref)\n    }\n\n    return []\n  }\n\n  findViewByCell(cellId: string | number): CellView | null\n  findViewByCell(cell: Cell | null): CellView | null\n  findViewByCell(\n    cell: Cell | string | number | null | undefined,\n  ): CellView | null {\n    return this.renderer.findViewByCell(cell as Cell)\n  }\n\n  findViewByElem(elem: string | Element | undefined | null) {\n    return this.renderer.findViewByElem(elem)\n  }\n\n  findViewsFromPoint(x: number, y: number): CellView[]\n  findViewsFromPoint(p: Point.PointLike): CellView[]\n  findViewsFromPoint(x: number | Point.PointLike, y?: number) {\n    const p = typeof x === 'number' ? { x, y: y as number } : x\n    return this.renderer.findViewsFromPoint(p)\n  }\n\n  findViewsInArea(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    options?: ViewRenderer.FindViewsInAreaOptions,\n  ): CellView[]\n  findViewsInArea(\n    rect: Rectangle.RectangleLike,\n    options?: ViewRenderer.FindViewsInAreaOptions,\n  ): CellView[]\n  findViewsInArea(\n    x: number | Rectangle.RectangleLike,\n    y?: number | ViewRenderer.FindViewsInAreaOptions,\n    width?: number,\n    height?: number,\n    options?: ViewRenderer.FindViewsInAreaOptions,\n  ) {\n    const rect =\n      typeof x === 'number'\n        ? {\n            x,\n            y: y as number,\n            width: width as number,\n            height: height as number,\n          }\n        : x\n    const localOptions =\n      typeof x === 'number'\n        ? options\n        : (y as ViewRenderer.FindViewsInAreaOptions)\n    return this.renderer.findViewsInArea(rect, localOptions)\n  }\n\n  // #endregion\n\n  // #region transform\n\n  /**\n   * Returns the current transformation matrix of the graph.\n   */\n  matrix(): DOMMatrix\n  /**\n   * Sets new transformation with the given `matrix`\n   */\n  matrix(mat: DOMMatrix | Dom.MatrixLike | null): this\n  matrix(mat?: DOMMatrix | Dom.MatrixLike | null) {\n    if (typeof mat === 'undefined') {\n      return this.transform.getMatrix()\n    }\n    this.transform.setMatrix(mat)\n    return this\n  }\n\n  resize(width?: number, height?: number) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.resize(width, height)\n    } else {\n      this.transform.resize(width, height)\n    }\n    return this\n  }\n\n  scale(): Dom.Scale\n  scale(sx: number, sy?: number, cx?: number, cy?: number): this\n  scale(sx?: number, sy: number = sx as number, cx = 0, cy = 0) {\n    if (typeof sx === 'undefined') {\n      return this.transform.getScale()\n    }\n    this.transform.scale(sx, sy, cx, cy)\n    return this\n  }\n\n  zoom(): number\n  zoom(factor: number, options?: Transform.ZoomOptions): this\n  zoom(factor?: number, options?: Transform.ZoomOptions) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      if (typeof factor === 'undefined') {\n        return scroller.zoom()\n      }\n      scroller.zoom(factor, options)\n    } else {\n      if (typeof factor === 'undefined') {\n        return this.transform.getZoom()\n      }\n      this.transform.zoom(factor, options)\n    }\n\n    return this\n  }\n\n  zoomTo(\n    factor: number,\n    options: Omit<Transform.ZoomOptions, 'absolute'> = {},\n  ) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.zoom(factor, { ...options, absolute: true })\n    } else {\n      this.transform.zoom(factor, { ...options, absolute: true })\n    }\n\n    return this\n  }\n\n  zoomToRect(\n    rect: Rectangle.RectangleLike,\n    options: Transform.ScaleContentToFitOptions &\n      Transform.ScaleContentToFitOptions = {},\n  ) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.zoomToRect(rect, options)\n    } else {\n      this.transform.zoomToRect(rect, options)\n    }\n\n    return this\n  }\n\n  zoomToFit(\n    options: Transform.GetContentAreaOptions &\n      Transform.ScaleContentToFitOptions = {},\n  ) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.zoomToFit(options)\n    } else {\n      this.transform.zoomToFit(options)\n    }\n\n    return this\n  }\n\n  rotate(): Dom.Rotation\n  rotate(angle: number, cx?: number, cy?: number): this\n  rotate(angle?: number, cx?: number, cy?: number) {\n    if (typeof angle === 'undefined') {\n      return this.transform.getRotation()\n    }\n\n    this.transform.rotate(angle, cx, cy)\n    return this\n  }\n\n  translate(): Dom.Translation\n  translate(tx: number, ty: number): this\n  translate(tx?: number, ty?: number) {\n    if (typeof tx === 'undefined') {\n      return this.transform.getTranslation()\n    }\n\n    this.transform.translate(tx, ty as number)\n    return this\n  }\n\n  translateBy(dx: number, dy: number): this {\n    const ts = this.translate()\n    const tx = ts.tx + dx\n    const ty = ts.ty + dy\n    return this.translate(tx, ty)\n  }\n\n  getGraphArea() {\n    return this.transform.getGraphArea()\n  }\n\n  getContentArea(options: Transform.GetContentAreaOptions = {}) {\n    return this.transform.getContentArea(options)\n  }\n\n  getContentBBox(options: Transform.GetContentAreaOptions = {}) {\n    return this.transform.getContentBBox(options)\n  }\n\n  fitToContent(\n    gridWidth?: number,\n    gridHeight?: number,\n    padding?: NumberExt.SideOptions,\n    options?: Transform.FitToContentOptions,\n  ): Rectangle\n  fitToContent(options?: Transform.FitToContentFullOptions): Rectangle\n  fitToContent(\n    gridWidth?: number | Transform.FitToContentFullOptions,\n    gridHeight?: number,\n    padding?: NumberExt.SideOptions,\n    options?: Transform.FitToContentOptions,\n  ) {\n    return this.transform.fitToContent(gridWidth, gridHeight, padding, options)\n  }\n\n  scaleContentToFit(options: Transform.ScaleContentToFitOptions = {}) {\n    this.transform.scaleContentToFit(options)\n    return this\n  }\n\n  /**\n   * Position the center of graph to the center of the viewport.\n   */\n  center(options?: Transform.CenterOptions) {\n    return this.centerPoint(options)\n  }\n\n  /**\n   * Position the point (x,y) on the graph (in local coordinates) to the\n   * center of the viewport. If only one of the coordinates is specified,\n   * only center along the specified dimension and keep the other coordinate\n   * unchanged.\n   */\n  centerPoint(\n    x: number,\n    y: null | number,\n    options?: Transform.CenterOptions,\n  ): this\n  centerPoint(\n    x: null | number,\n    y: number,\n    options?: Transform.CenterOptions,\n  ): this\n  centerPoint(optons?: Transform.CenterOptions): this\n  centerPoint(\n    x?: number | null | Transform.CenterOptions,\n    y?: number | null,\n    options?: Transform.CenterOptions,\n  ) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.centerPoint(x as number, y as number, options)\n    } else {\n      this.transform.centerPoint(x as number, y as number)\n    }\n\n    return this\n  }\n\n  centerContent(options?: Transform.PositionContentOptions) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.centerContent(options)\n    } else {\n      this.transform.centerContent(options)\n    }\n\n    return this\n  }\n\n  centerCell(cell: Cell, options?: Transform.PositionContentOptions) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.centerCell(cell, options)\n    } else {\n      this.transform.centerCell(cell)\n    }\n\n    return this\n  }\n\n  positionPoint(\n    point: Point.PointLike,\n    x: number | string,\n    y: number | string,\n    options: Transform.CenterOptions = {},\n  ) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.positionPoint(point, x, y, options)\n    } else {\n      this.transform.positionPoint(point, x, y)\n    }\n\n    return this\n  }\n\n  positionRect(\n    rect: Rectangle.RectangleLike,\n    direction: Transform.Direction,\n    options?: Transform.CenterOptions,\n  ) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.positionRect(rect, direction, options)\n    } else {\n      this.transform.positionRect(rect, direction)\n    }\n\n    return this\n  }\n\n  positionCell(\n    cell: Cell,\n    direction: Transform.Direction,\n    options?: Transform.CenterOptions,\n  ) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.positionCell(cell, direction, options)\n    } else {\n      this.transform.positionCell(cell, direction)\n    }\n\n    return this\n  }\n\n  positionContent(\n    pos: Transform.Direction,\n    options?: Transform.PositionContentOptions,\n  ) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.positionContent(pos, options)\n    } else {\n      this.transform.positionContent(pos, options)\n    }\n\n    return this\n  }\n\n  // #endregion\n\n  // #region coord\n\n  snapToGrid(p: Point.PointLike): Point\n  snapToGrid(x: number, y: number): Point\n  snapToGrid(x: number | Point.PointLike, y?: number) {\n    return this.coord.snapToGrid(x, y)\n  }\n\n  pageToLocal(rect: Rectangle.RectangleLike): Rectangle\n  pageToLocal(x: number, y: number, width: number, height: number): Rectangle\n  pageToLocal(p: Point.PointLike): Point\n  pageToLocal(x: number, y: number): Point\n  pageToLocal(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.pageToLocalRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.pageToLocalRect(x, y, width, height)\n    }\n\n    return this.coord.pageToLocalPoint(x, y)\n  }\n\n  localToPage(rect: Rectangle.RectangleLike): Rectangle\n  localToPage(x: number, y: number, width: number, height: number): Rectangle\n  localToPage(p: Point.PointLike): Point\n  localToPage(x: number, y: number): Point\n  localToPage(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToPageRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.localToPageRect(x, y, width, height)\n    }\n\n    return this.coord.localToPagePoint(x, y)\n  }\n\n  clientToLocal(rect: Rectangle.RectangleLike): Rectangle\n  clientToLocal(x: number, y: number, width: number, height: number): Rectangle\n  clientToLocal(p: Point.PointLike): Point\n  clientToLocal(x: number, y: number): Point\n  clientToLocal(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToLocalRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.clientToLocalRect(x, y, width, height)\n    }\n\n    return this.coord.clientToLocalPoint(x, y)\n  }\n\n  localToClient(rect: Rectangle.RectangleLike): Rectangle\n  localToClient(x: number, y: number, width: number, height: number): Rectangle\n  localToClient(p: Point.PointLike): Point\n  localToClient(x: number, y: number): Point\n  localToClient(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToClientRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.localToClientRect(x, y, width, height)\n    }\n\n    return this.coord.localToClientPoint(x, y)\n  }\n\n  /**\n   * Transform the rectangle `rect` defined in the local coordinate system to\n   * the graph coordinate system.\n   */\n  localToGraph(rect: Rectangle.RectangleLike): Rectangle\n  /**\n   * Transform the rectangle `x`, `y`, `width`, `height` defined in the local\n   * coordinate system to the graph coordinate system.\n   */\n  localToGraph(x: number, y: number, width: number, height: number): Rectangle\n  /**\n   * Transform the point `p` defined in the local coordinate system to\n   * the graph coordinate system.\n   */\n  localToGraph(p: Point.PointLike): Point\n  /**\n   * Transform the point `x`, `y` defined in the local coordinate system to\n   * the graph coordinate system.\n   */\n  localToGraph(x: number, y: number): Point\n  localToGraph(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToGraphRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.localToGraphRect(x, y, width, height)\n    }\n\n    return this.coord.localToGraphPoint(x, y)\n  }\n\n  graphToLocal(rect: Rectangle.RectangleLike): Rectangle\n  graphToLocal(x: number, y: number, width: number, height: number): Rectangle\n  graphToLocal(p: Point.PointLike): Point\n  graphToLocal(x: number, y: number): Point\n  graphToLocal(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.graphToLocalRect(x)\n    }\n\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.graphToLocalRect(x, y, width, height)\n    }\n    return this.coord.graphToLocalPoint(x, y)\n  }\n\n  clientToGraph(rect: Rectangle.RectangleLike): Rectangle\n  clientToGraph(x: number, y: number, width: number, height: number): Rectangle\n  clientToGraph(p: Point.PointLike): Point\n  clientToGraph(x: number, y: number): Point\n  clientToGraph(\n    x: number | Point.PointLike | Rectangle.RectangleLike,\n    y?: number,\n    width?: number,\n    height?: number,\n  ) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToGraphRect(x)\n    }\n    if (\n      typeof x === 'number' &&\n      typeof y === 'number' &&\n      typeof width === 'number' &&\n      typeof height === 'number'\n    ) {\n      return this.coord.clientToGraphRect(x, y, width, height)\n    }\n    return this.coord.clientToGraphPoint(x, y)\n  }\n\n  // #endregion\n\n  // #region defs\n\n  defineFilter(options: Defs.FilterOptions) {\n    return this.defs.filter(options)\n  }\n\n  defineGradient(options: Defs.GradientOptions) {\n    return this.defs.gradient(options)\n  }\n\n  defineMarker(options: Defs.MarkerOptions) {\n    return this.defs.marker(options)\n  }\n\n  // #endregion\n\n  // #region grid\n\n  getGridSize() {\n    return this.grid.getGridSize()\n  }\n\n  setGridSize(gridSize: number) {\n    this.grid.setGridSize(gridSize)\n    return this\n  }\n\n  showGrid() {\n    this.grid.show()\n    return this\n  }\n\n  hideGrid() {\n    this.grid.hide()\n    return this\n  }\n\n  clearGrid() {\n    this.grid.clear()\n    return this\n  }\n\n  drawGrid(options?: Grid.DrawGridOptions) {\n    this.grid.draw(options)\n    return this\n  }\n\n  // #endregion\n\n  // #region background\n\n  updateBackground() {\n    this.background.update()\n    return this\n  }\n\n  drawBackground(options?: Background.Options, onGraph?: boolean) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.drawBackground(options, onGraph)\n    } else {\n      this.background.draw(options)\n    }\n    return this\n  }\n\n  clearBackground(onGraph?: boolean) {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.clearBackground(onGraph)\n    } else {\n      this.background.clear()\n    }\n    return this\n  }\n\n  // #endregion\n\n  // #region virtual-render\n\n  enableVirtualRender() {\n    this.virtualRender.enableVirtualRender()\n    return this\n  }\n\n  disableVirtualRender() {\n    this.virtualRender.disableVirtualRender()\n    return this\n  }\n\n  // #endregion\n\n  // #region mousewheel\n\n  isMouseWheelEnabled() {\n    return !this.mousewheel.disabled\n  }\n\n  enableMouseWheel() {\n    this.mousewheel.enable()\n    return this\n  }\n\n  disableMouseWheel() {\n    this.mousewheel.disable()\n    return this\n  }\n\n  toggleMouseWheel(enabled?: boolean) {\n    if (enabled == null) {\n      if (this.isMouseWheelEnabled()) {\n        this.disableMouseWheel()\n      } else {\n        this.enableMouseWheel()\n      }\n    } else if (enabled) {\n      this.enableMouseWheel()\n    } else {\n      this.disableMouseWheel()\n    }\n    return this\n  }\n\n  // #endregion\n\n  // #region panning\n\n  isPannable() {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      return scroller.isPannable()\n    }\n    return this.panning.pannable\n  }\n\n  enablePanning() {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.enablePanning()\n    } else {\n      this.panning.enablePanning()\n    }\n\n    return this\n  }\n\n  disablePanning() {\n    const scroller = this.getPlugin<any>('scroller')\n    if (scroller) {\n      scroller.disablePanning()\n    } else {\n      this.panning.disablePanning()\n    }\n    return this\n  }\n\n  togglePanning(pannable?: boolean) {\n    if (pannable == null) {\n      if (this.isPannable()) {\n        this.disablePanning()\n      } else {\n        this.enablePanning()\n      }\n    } else if (pannable !== this.isPannable()) {\n      if (pannable) {\n        this.enablePanning()\n      } else {\n        this.disablePanning()\n      }\n    }\n\n    return this\n  }\n\n  // #endregion\n\n  // #region plugin\n\n  use(plugin: Graph.Plugin, ...options: any[]) {\n    if (!this.installedPlugins.has(plugin)) {\n      this.installedPlugins.add(plugin)\n      plugin.init(this, ...options)\n    }\n    return this\n  }\n\n  getPlugin<T extends Graph.Plugin>(pluginName: string): T | undefined {\n    return Array.from(this.installedPlugins).find(\n      (plugin) => plugin.name === pluginName,\n    ) as T\n  }\n\n  getPlugins<T extends Graph.Plugin[]>(pluginName: string[]): T | undefined {\n    return Array.from(this.installedPlugins).filter((plugin) =>\n      pluginName.includes(plugin.name),\n    ) as T\n  }\n\n  enablePlugins(plugins: string[] | string) {\n    let postPlugins = plugins\n    if (!Array.isArray(postPlugins)) {\n      postPlugins = [postPlugins]\n    }\n    const aboutToChangePlugins = this.getPlugins(postPlugins)\n    aboutToChangePlugins?.forEach((plugin) => {\n      plugin?.enable?.()\n    })\n    return this\n  }\n\n  disablePlugins(plugins: string[] | string) {\n    let postPlugins = plugins\n    if (!Array.isArray(postPlugins)) {\n      postPlugins = [postPlugins]\n    }\n    const aboutToChangePlugins = this.getPlugins(postPlugins)\n    aboutToChangePlugins?.forEach((plugin) => {\n      plugin?.disable?.()\n    })\n    return this\n  }\n\n  isPluginEnabled(pluginName: string) {\n    const pluginIns = this.getPlugin(pluginName)\n    return pluginIns?.isEnabled?.()\n  }\n\n  disposePlugins(plugins: string[] | string) {\n    let postPlugins = plugins\n    if (!Array.isArray(postPlugins)) {\n      postPlugins = [postPlugins]\n    }\n    const aboutToChangePlugins = this.getPlugins(postPlugins)\n    aboutToChangePlugins?.forEach((plugin) => {\n      plugin.dispose()\n      this.installedPlugins.delete(plugin)\n    })\n    return this\n  }\n\n  // #endregion\n\n  // #region dispose\n\n  @Basecoat.dispose()\n  dispose(clean = true) {\n    if (clean) {\n      this.model.dispose()\n    }\n\n    this.css.dispose()\n    this.defs.dispose()\n    this.grid.dispose()\n    this.coord.dispose()\n    this.transform.dispose()\n    this.highlight.dispose()\n    this.background.dispose()\n    this.mousewheel.dispose()\n    this.panning.dispose()\n    this.view.dispose()\n    this.renderer.dispose()\n\n    this.installedPlugins.forEach((plugin) => {\n      plugin.dispose()\n    })\n  }\n\n  // #endregion\n}\n\nexport namespace Graph {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  export import View = GraphView\n  export import Renderer = ViewRenderer\n  export import MouseWheel = Wheel\n  export import DefsManager = Defs\n  export import GridManager = Grid\n  export import CoordManager = Coord\n  export import TransformManager = Transform\n  export import HighlightManager = Highlight\n  export import BackgroundManager = Background\n  export import PanningManager = Panning\n}\n\nexport namespace Graph {\n  export interface Options extends GraphOptions.Manual {}\n}\n\nexport namespace Graph {\n  export const toStringTag = `X6.${Graph.name}`\n\n  export function isGraph(instance: any): instance is Graph {\n    if (instance == null) {\n      return false\n    }\n\n    if (instance instanceof Graph) {\n      return true\n    }\n\n    const tag = instance[Symbol.toStringTag]\n\n    if (tag == null || tag === toStringTag) {\n      return true\n    }\n\n    return false\n  }\n}\n\nexport namespace Graph {\n  export function render(\n    options: Partial<Options>,\n    data?: Model.FromJSONData,\n  ): Graph\n  export function render(\n    container: HTMLElement,\n    data?: Model.FromJSONData,\n  ): Graph\n  export function render(\n    options: Partial<Options> | HTMLElement,\n    data?: Model.FromJSONData,\n  ): Graph {\n    const graph =\n      options instanceof HTMLElement\n        ? new Graph({ container: options })\n        : new Graph(options)\n\n    if (data != null) {\n      graph.fromJSON(data)\n    }\n\n    return graph\n  }\n}\n\nexport namespace Graph {\n  export const registerNode = Node.registry.register\n  export const registerEdge = Edge.registry.register\n  export const registerView = CellView.registry.register\n  export const registerAttr = Registry.Attr.registry.register\n  export const registerGrid = Registry.Grid.registry.register\n  export const registerFilter = Registry.Filter.registry.register\n  export const registerNodeTool = Registry.NodeTool.registry.register\n  export const registerEdgeTool = Registry.EdgeTool.registry.register\n  export const registerBackground = Registry.Background.registry.register\n  export const registerHighlighter = Registry.Highlighter.registry.register\n  export const registerPortLayout = Registry.PortLayout.registry.register\n  export const registerPortLabelLayout =\n    Registry.PortLabelLayout.registry.register\n  export const registerMarker = Registry.Marker.registry.register\n  export const registerRouter = Registry.Router.registry.register\n  export const registerConnector = Registry.Connector.registry.register\n  export const registerAnchor = Registry.NodeAnchor.registry.register\n  export const registerEdgeAnchor = Registry.EdgeAnchor.registry.register\n  export const registerConnectionPoint =\n    Registry.ConnectionPoint.registry.register\n}\n\nexport namespace Graph {\n  export const unregisterNode = Node.registry.unregister\n  export const unregisterEdge = Edge.registry.unregister\n  export const unregisterView = CellView.registry.unregister\n  export const unregisterAttr = Registry.Attr.registry.unregister\n  export const unregisterGrid = Registry.Grid.registry.unregister\n  export const unregisterFilter = Registry.Filter.registry.unregister\n  export const unregisterNodeTool = Registry.NodeTool.registry.unregister\n  export const unregisterEdgeTool = Registry.EdgeTool.registry.unregister\n  export const unregisterBackground = Registry.Background.registry.unregister\n  export const unregisterHighlighter = Registry.Highlighter.registry.unregister\n  export const unregisterPortLayout = Registry.PortLayout.registry.unregister\n  export const unregisterPortLabelLayout =\n    Registry.PortLabelLayout.registry.unregister\n  export const unregisterMarker = Registry.Marker.registry.unregister\n  export const unregisterRouter = Registry.Router.registry.unregister\n  export const unregisterConnector = Registry.Connector.registry.unregister\n  export const unregisterAnchor = Registry.NodeAnchor.registry.unregister\n  export const unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister\n  export const unregisterConnectionPoint =\n    Registry.ConnectionPoint.registry.unregister\n}\n\nexport namespace Graph {\n  export type Plugin = {\n    name: string\n    init: (graph: Graph, ...options: any[]) => any\n    dispose: () => void\n\n    enable?: () => void\n    disable?: () => void\n    isEnabled?: () => boolean\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}