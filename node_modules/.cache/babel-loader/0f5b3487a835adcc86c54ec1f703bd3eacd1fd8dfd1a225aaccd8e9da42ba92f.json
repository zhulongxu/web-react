{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\nexport class Disposable {\n  get disposed() {\n    return this._disposed === true;\n  }\n  dispose() {\n    this._disposed = true;\n  }\n}\n(function (Disposable) {\n  function dispose() {\n    return (target, methodName, descriptor) => {\n      const raw = descriptor.value;\n      const proto = target.__proto__; // eslint-disable-line\n      descriptor.value = function (...args) {\n        if (this.disposed) {\n          return;\n        }\n        raw.call(this, ...args);\n        proto.dispose.call(this);\n      };\n    };\n  }\n  Disposable.dispose = dispose;\n})(Disposable || (Disposable = {}));\n/**\n * A disposable object which delegates to a callback function.\n */\nexport class DisposableDelegate {\n  /**\n   * Construct a new disposable delegate.\n   *\n   * @param callback - The callback function to invoke on dispose.\n   */\n  constructor(callback) {\n    this.callback = callback;\n  }\n  /**\n   * Test whether the delegate has been disposed.\n   */\n  get disposed() {\n    return !this.callback;\n  }\n  /**\n   * Dispose of the delegate and invoke the callback function.\n   */\n  dispose() {\n    if (!this.callback) {\n      return;\n    }\n    const callback = this.callback;\n    this.callback = null;\n    callback();\n  }\n}\n/**\n * An object which manages a collection of disposable items.\n */\nexport class DisposableSet {\n  constructor() {\n    this.isDisposed = false; // eslint-disable-line:variable-name\n    this.items = new Set();\n  }\n  /**\n   * Test whether the set has been disposed.\n   */\n  get disposed() {\n    return this.isDisposed;\n  }\n  /**\n   * Dispose of the set and the items it contains.\n   *\n   * #### Notes\n   * Items are disposed in the order they are added to the set.\n   */\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.items.forEach(item => {\n      item.dispose();\n    });\n    this.items.clear();\n  }\n  /**\n   * Test whether the set contains a specific item.\n   *\n   * @param item - The item of interest.\n   *\n   * @returns `true` if the set contains the item, `false` otherwise.\n   */\n  contains(item) {\n    return this.items.has(item);\n  }\n  /**\n   * Add a disposable item to the set.\n   *\n   * @param item - The item to add to the set.\n   *\n   * #### Notes\n   * If the item is already contained in the set, this is a no-op.\n   */\n  add(item) {\n    this.items.add(item);\n  }\n  /**\n   * Remove a disposable item from the set.\n   *\n   * @param item - The item to remove from the set.\n   *\n   * #### Notes\n   * If the item is not contained in the set, this is a no-op.\n   */\n  remove(item) {\n    this.items.delete(item);\n  }\n  /**\n   * Remove all items from the set.\n   */\n  clear() {\n    this.items.clear();\n  }\n}\n(function (DisposableSet) {\n  /**\n   * Create a disposable set from an iterable of items.\n   *\n   * @param items - The iterable or array-like object of interest.\n   *\n   * @returns A new disposable initialized with the given items.\n   */\n  function from(items) {\n    const set = new DisposableSet();\n    items.forEach(item => {\n      set.add(item);\n    });\n    return set;\n  }\n  DisposableSet.from = from;\n})(DisposableSet || (DisposableSet = {}));","map":{"version":3,"names":["Disposable","disposed","_disposed","dispose","target","methodName","descriptor","raw","value","proto","__proto__","args","call","DisposableDelegate","constructor","callback","DisposableSet","isDisposed","items","Set","forEach","item","clear","contains","has","add","remove","delete","from","set"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-common@2.0.17/node_modules/@antv/x6-common/src/common/disposable.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\n\n/**\n * An object which implements the disposable pattern.\n */\nexport interface IDisposable {\n  /**\n   * Test whether the object has been disposed.\n   *\n   * #### Notes\n   * This property is always safe to access.\n   */\n  readonly disposed: boolean\n\n  /**\n   * Dispose of the resources held by the object.\n   *\n   * #### Notes\n   * If the object's `dispose` method is called more than once, all\n   * calls made after the first will be a no-op.\n   *\n   * #### Undefined Behavior\n   * It is undefined behavior to use any functionality of the object\n   * after it has been disposed unless otherwise explicitly noted.\n   */\n  dispose(): void\n}\n\nexport class Disposable implements IDisposable {\n  // constructor() {\n  //   if (Platform.IS_IE) {\n  //     DomEvent.addListener(window, 'unload', () => {\n  //       this.dispose()\n  //     })\n  //   }\n  // }\n\n  // eslint-disable-next-line\n  private _disposed?: boolean\n\n  get disposed() {\n    return this._disposed === true\n  }\n\n  public dispose() {\n    this._disposed = true\n  }\n}\n\nexport namespace Disposable {\n  export function dispose() {\n    return (\n      target: any,\n      methodName: string,\n      descriptor: PropertyDescriptor,\n    ) => {\n      const raw = descriptor.value\n      const proto = target.__proto__ as IDisposable // eslint-disable-line\n      descriptor.value = function (this: IDisposable, ...args: any[]) {\n        if (this.disposed) {\n          return\n        }\n        raw.call(this, ...args)\n        proto.dispose.call(this)\n      }\n    }\n  }\n}\n\n/**\n * A disposable object which delegates to a callback function.\n */\nexport class DisposableDelegate implements IDisposable {\n  private callback: (() => void) | null\n\n  /**\n   * Construct a new disposable delegate.\n   *\n   * @param callback - The callback function to invoke on dispose.\n   */\n  constructor(callback: () => void) {\n    this.callback = callback\n  }\n\n  /**\n   * Test whether the delegate has been disposed.\n   */\n  get disposed(): boolean {\n    return !this.callback\n  }\n\n  /**\n   * Dispose of the delegate and invoke the callback function.\n   */\n  dispose(): void {\n    if (!this.callback) {\n      return\n    }\n    const callback = this.callback\n    this.callback = null\n    callback()\n  }\n}\n\n/**\n * An object which manages a collection of disposable items.\n */\nexport class DisposableSet implements IDisposable {\n  private isDisposed = false // eslint-disable-line:variable-name\n\n  private items = new Set<IDisposable>()\n\n  /**\n   * Test whether the set has been disposed.\n   */\n  get disposed(): boolean {\n    return this.isDisposed\n  }\n\n  /**\n   * Dispose of the set and the items it contains.\n   *\n   * #### Notes\n   * Items are disposed in the order they are added to the set.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return\n    }\n    this.isDisposed = true\n\n    this.items.forEach((item) => {\n      item.dispose()\n    })\n    this.items.clear()\n  }\n\n  /**\n   * Test whether the set contains a specific item.\n   *\n   * @param item - The item of interest.\n   *\n   * @returns `true` if the set contains the item, `false` otherwise.\n   */\n  contains(item: IDisposable): boolean {\n    return this.items.has(item)\n  }\n\n  /**\n   * Add a disposable item to the set.\n   *\n   * @param item - The item to add to the set.\n   *\n   * #### Notes\n   * If the item is already contained in the set, this is a no-op.\n   */\n  add(item: IDisposable): void {\n    this.items.add(item)\n  }\n\n  /**\n   * Remove a disposable item from the set.\n   *\n   * @param item - The item to remove from the set.\n   *\n   * #### Notes\n   * If the item is not contained in the set, this is a no-op.\n   */\n  remove(item: IDisposable): void {\n    this.items.delete(item)\n  }\n\n  /**\n   * Remove all items from the set.\n   */\n  clear(): void {\n    this.items.clear()\n  }\n}\n\nexport namespace DisposableSet {\n  /**\n   * Create a disposable set from an iterable of items.\n   *\n   * @param items - The iterable or array-like object of interest.\n   *\n   * @returns A new disposable initialized with the given items.\n   */\n  export function from(items: IDisposable[]): DisposableSet {\n    const set = new DisposableSet()\n    items.forEach((item) => {\n      set.add(item)\n    })\n    return set\n  }\n}\n"],"mappings":"AAAA;AA4BA,OAAM,MAAOA,UAAU;EAYrB,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACC,SAAS,KAAK,IAAI;EAChC;EAEOC,OAAOA,CAAA;IACZ,IAAI,CAACD,SAAS,GAAG,IAAI;EACvB;;AAGF,WAAiBF,UAAU;EACzB,SAAgBG,OAAOA,CAAA;IACrB,OAAO,CACLC,MAAW,EACXC,UAAkB,EAClBC,UAA8B,KAC5B;MACF,MAAMC,GAAG,GAAGD,UAAU,CAACE,KAAK;MAC5B,MAAMC,KAAK,GAAGL,MAAM,CAACM,SAAwB,EAAC;MAC9CJ,UAAU,CAACE,KAAK,GAAG,UAA6B,GAAGG,IAAW;QAC5D,IAAI,IAAI,CAACV,QAAQ,EAAE;UACjB;;QAEFM,GAAG,CAACK,IAAI,CAAC,IAAI,EAAE,GAAGD,IAAI,CAAC;QACvBF,KAAK,CAACN,OAAO,CAACS,IAAI,CAAC,IAAI,CAAC;MAC1B,CAAC;IACH,CAAC;EACH;EAhBgBZ,UAAA,CAAAG,OAAO,GAAAA,OAgBtB;AACH,CAAC,EAlBgBH,UAAU,KAAVA,UAAU;AAoB3B;;;AAGA,OAAM,MAAOa,kBAAkB;EAG7B;;;;;EAKAC,YAAYC,QAAoB;IAC9B,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEA;;;EAGA,IAAId,QAAQA,CAAA;IACV,OAAO,CAAC,IAAI,CAACc,QAAQ;EACvB;EAEA;;;EAGAZ,OAAOA,CAAA;IACL,IAAI,CAAC,IAAI,CAACY,QAAQ,EAAE;MAClB;;IAEF,MAAMA,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,IAAI,CAACA,QAAQ,GAAG,IAAI;IACpBA,QAAQ,EAAE;EACZ;;AAGF;;;AAGA,OAAM,MAAOC,aAAa;EAA1BF,YAAA;IACU,KAAAG,UAAU,GAAG,KAAK,EAAC;IAEnB,KAAAC,KAAK,GAAG,IAAIC,GAAG,EAAe;EAoExC;EAlEE;;;EAGA,IAAIlB,QAAQA,CAAA;IACV,OAAO,IAAI,CAACgB,UAAU;EACxB;EAEA;;;;;;EAMAd,OAAOA,CAAA;IACL,IAAI,IAAI,CAACc,UAAU,EAAE;MACnB;;IAEF,IAAI,CAACA,UAAU,GAAG,IAAI;IAEtB,IAAI,CAACC,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAI;MAC1BA,IAAI,CAAClB,OAAO,EAAE;IAChB,CAAC,CAAC;IACF,IAAI,CAACe,KAAK,CAACI,KAAK,EAAE;EACpB;EAEA;;;;;;;EAOAC,QAAQA,CAACF,IAAiB;IACxB,OAAO,IAAI,CAACH,KAAK,CAACM,GAAG,CAACH,IAAI,CAAC;EAC7B;EAEA;;;;;;;;EAQAI,GAAGA,CAACJ,IAAiB;IACnB,IAAI,CAACH,KAAK,CAACO,GAAG,CAACJ,IAAI,CAAC;EACtB;EAEA;;;;;;;;EAQAK,MAAMA,CAACL,IAAiB;IACtB,IAAI,CAACH,KAAK,CAACS,MAAM,CAACN,IAAI,CAAC;EACzB;EAEA;;;EAGAC,KAAKA,CAAA;IACH,IAAI,CAACJ,KAAK,CAACI,KAAK,EAAE;EACpB;;AAGF,WAAiBN,aAAa;EAC5B;;;;;;;EAOA,SAAgBY,IAAIA,CAACV,KAAoB;IACvC,MAAMW,GAAG,GAAG,IAAIb,aAAa,EAAE;IAC/BE,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAI;MACrBQ,GAAG,CAACJ,GAAG,CAACJ,IAAI,CAAC;IACf,CAAC,CAAC;IACF,OAAOQ,GAAG;EACZ;EANgBb,aAAA,CAAAY,IAAI,GAAAA,IAMnB;AACH,CAAC,EAfgBZ,aAAa,KAAbA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}