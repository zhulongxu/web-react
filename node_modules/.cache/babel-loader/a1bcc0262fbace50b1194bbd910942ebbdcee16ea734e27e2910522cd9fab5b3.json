{"ast":null,"code":"import { offset, getStrokeWidth } from './util';\n/**\n * Places the connection point at the intersection between the edge\n * path end segment and the target node bbox.\n */\nexport const bbox = function (line, view, magnet, options) {\n  const bbox = view.getBBoxOfElement(magnet);\n  if (options.stroked) {\n    bbox.inflate(getStrokeWidth(magnet) / 2);\n  }\n  const intersections = line.intersect(bbox);\n  const p = intersections && intersections.length ? line.start.closest(intersections) : line.end;\n  return offset(p, line.start, options.offset);\n};","map":{"version":3,"names":["offset","getStrokeWidth","bbox","line","view","magnet","options","getBBoxOfElement","stroked","inflate","intersections","intersect","p","length","start","closest","end"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/registry/connection-point/bbox.ts"],"sourcesContent":["import { offset, getStrokeWidth } from './util'\nimport { ConnectionPoint } from './index'\n\nexport interface BBoxOptions extends ConnectionPoint.StrokedOptions {}\n\n/**\n * Places the connection point at the intersection between the edge\n * path end segment and the target node bbox.\n */\nexport const bbox: ConnectionPoint.Definition<BBoxOptions> = function (\n  line,\n  view,\n  magnet,\n  options,\n) {\n  const bbox = view.getBBoxOfElement(magnet)\n  if (options.stroked) {\n    bbox.inflate(getStrokeWidth(magnet) / 2)\n  }\n  const intersections = line.intersect(bbox)\n  const p =\n    intersections && intersections.length\n      ? line.start.closest(intersections)!\n      : line.end\n  return offset(p, line.start, options.offset)\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,cAAc,QAAQ,QAAQ;AAK/C;;;;AAIA,OAAO,MAAMC,IAAI,GAA4C,SAAAA,CAC3DC,IAAI,EACJC,IAAI,EACJC,MAAM,EACNC,OAAO;EAEP,MAAMJ,IAAI,GAAGE,IAAI,CAACG,gBAAgB,CAACF,MAAM,CAAC;EAC1C,IAAIC,OAAO,CAACE,OAAO,EAAE;IACnBN,IAAI,CAACO,OAAO,CAACR,cAAc,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC;;EAE1C,MAAMK,aAAa,GAAGP,IAAI,CAACQ,SAAS,CAACT,IAAI,CAAC;EAC1C,MAAMU,CAAC,GACLF,aAAa,IAAIA,aAAa,CAACG,MAAM,GACjCV,IAAI,CAACW,KAAK,CAACC,OAAO,CAACL,aAAa,CAAE,GAClCP,IAAI,CAACa,GAAG;EACd,OAAOhB,MAAM,CAACY,CAAC,EAAET,IAAI,CAACW,KAAK,EAAER,OAAO,CAACN,MAAM,CAAC;AAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}