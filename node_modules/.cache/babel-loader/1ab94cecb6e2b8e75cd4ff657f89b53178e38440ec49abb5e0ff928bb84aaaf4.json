{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SizeSensor } from '@antv/x6-common';\nimport { Base } from './base';\nexport class SizeManager extends Base {\n  getScroller() {\n    const scroller = this.graph.getPlugin('scroller');\n    if (scroller && scroller.options.enabled) {\n      return scroller;\n    }\n    return null;\n  }\n  getContainer() {\n    const scroller = this.getScroller();\n    if (scroller) {\n      return scroller.container.parentElement;\n    }\n    return this.graph.container.parentElement;\n  }\n  getSensorTarget() {\n    const autoResize = this.options.autoResize;\n    if (autoResize) {\n      if (typeof autoResize === 'boolean') {\n        return this.getContainer();\n      }\n      return autoResize;\n    }\n  }\n  init() {\n    const autoResize = this.options.autoResize;\n    if (autoResize) {\n      const target = this.getSensorTarget();\n      if (target) {\n        SizeSensor.bind(target, () => {\n          const width = target.offsetWidth;\n          const height = target.offsetHeight;\n          this.resize(width, height);\n        });\n      }\n    }\n  }\n  resize(width, height) {\n    const scroller = this.getScroller();\n    if (scroller) {\n      scroller.resize(width, height);\n    } else {\n      this.graph.transform.resize(width, height);\n    }\n  }\n  dispose() {\n    SizeSensor.clear(this.graph.container);\n  }\n}\n__decorate([Base.dispose()], SizeManager.prototype, \"dispose\", null);","map":{"version":3,"names":["SizeSensor","Base","SizeManager","getScroller","scroller","graph","getPlugin","options","enabled","getContainer","container","parentElement","getSensorTarget","autoResize","init","target","bind","width","offsetWidth","height","offsetHeight","resize","transform","dispose","clear","__decorate"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6@2.18.1/node_modules/@antv/x6/src/graph/size.ts"],"sourcesContent":["import { SizeSensor } from '@antv/x6-common'\nimport { Base } from './base'\n\nexport class SizeManager extends Base {\n  private getScroller() {\n    const scroller = this.graph.getPlugin<any>('scroller')\n    if (scroller && scroller.options.enabled) {\n      return scroller\n    }\n    return null\n  }\n\n  private getContainer() {\n    const scroller = this.getScroller()\n    if (scroller) {\n      return scroller.container.parentElement\n    }\n    return this.graph.container.parentElement\n  }\n\n  private getSensorTarget() {\n    const autoResize = this.options.autoResize\n    if (autoResize) {\n      if (typeof autoResize === 'boolean') {\n        return this.getContainer()\n      }\n      return autoResize as HTMLElement\n    }\n  }\n\n  protected init() {\n    const autoResize = this.options.autoResize\n    if (autoResize) {\n      const target = this.getSensorTarget()\n      if (target) {\n        SizeSensor.bind(target, () => {\n          const width = target.offsetWidth\n          const height = target.offsetHeight\n          this.resize(width, height)\n        })\n      }\n    }\n  }\n\n  resize(width?: number, height?: number) {\n    const scroller = this.getScroller()\n    if (scroller) {\n      scroller.resize(width, height)\n    } else {\n      this.graph.transform.resize(width, height)\n    }\n  }\n\n  @Base.dispose()\n  dispose() {\n    SizeSensor.clear(this.graph.container)\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,IAAI,QAAQ,QAAQ;AAE7B,OAAM,MAAOC,WAAY,SAAQD,IAAI;EAC3BE,WAAWA,CAAA;IACjB,MAAMC,QAAQ,GAAG,IAAI,CAACC,KAAK,CAACC,SAAS,CAAM,UAAU,CAAC;IACtD,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,OAAO,CAACC,OAAO,EAAE;MACxC,OAAOJ,QAAQ;;IAEjB,OAAO,IAAI;EACb;EAEQK,YAAYA,CAAA;IAClB,MAAML,QAAQ,GAAG,IAAI,CAACD,WAAW,EAAE;IACnC,IAAIC,QAAQ,EAAE;MACZ,OAAOA,QAAQ,CAACM,SAAS,CAACC,aAAa;;IAEzC,OAAO,IAAI,CAACN,KAAK,CAACK,SAAS,CAACC,aAAa;EAC3C;EAEQC,eAAeA,CAAA;IACrB,MAAMC,UAAU,GAAG,IAAI,CAACN,OAAO,CAACM,UAAU;IAC1C,IAAIA,UAAU,EAAE;MACd,IAAI,OAAOA,UAAU,KAAK,SAAS,EAAE;QACnC,OAAO,IAAI,CAACJ,YAAY,EAAE;;MAE5B,OAAOI,UAAyB;;EAEpC;EAEUC,IAAIA,CAAA;IACZ,MAAMD,UAAU,GAAG,IAAI,CAACN,OAAO,CAACM,UAAU;IAC1C,IAAIA,UAAU,EAAE;MACd,MAAME,MAAM,GAAG,IAAI,CAACH,eAAe,EAAE;MACrC,IAAIG,MAAM,EAAE;QACVf,UAAU,CAACgB,IAAI,CAACD,MAAM,EAAE,MAAK;UAC3B,MAAME,KAAK,GAAGF,MAAM,CAACG,WAAW;UAChC,MAAMC,MAAM,GAAGJ,MAAM,CAACK,YAAY;UAClC,IAAI,CAACC,MAAM,CAACJ,KAAK,EAAEE,MAAM,CAAC;QAC5B,CAAC,CAAC;;;EAGR;EAEAE,MAAMA,CAACJ,KAAc,EAAEE,MAAe;IACpC,MAAMf,QAAQ,GAAG,IAAI,CAACD,WAAW,EAAE;IACnC,IAAIC,QAAQ,EAAE;MACZA,QAAQ,CAACiB,MAAM,CAACJ,KAAK,EAAEE,MAAM,CAAC;KAC/B,MAAM;MACL,IAAI,CAACd,KAAK,CAACiB,SAAS,CAACD,MAAM,CAACJ,KAAK,EAAEE,MAAM,CAAC;;EAE9C;EAGAI,OAAOA,CAAA;IACLvB,UAAU,CAACwB,KAAK,CAAC,IAAI,CAACnB,KAAK,CAACK,SAAS,CAAC;EACxC;;AAFAe,UAAA,EADCxB,IAAI,CAACsB,OAAO,EAAE,C,yCAGd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}