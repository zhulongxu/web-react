{"ast":null,"code":"import { GeometryUtil } from '../util';\nfunction rotate(x, y, rad) {\n  return {\n    x: x * Math.cos(rad) - y * Math.sin(rad),\n    y: x * Math.sin(rad) + y * Math.cos(rad)\n  };\n}\nfunction q2c(x1, y1, ax, ay, x2, y2) {\n  const v13 = 1 / 3;\n  const v23 = 2 / 3;\n  return [v13 * x1 + v23 * ax, v13 * y1 + v23 * ay, v13 * x2 + v23 * ax, v13 * y2 + v23 * ay, x2, y2];\n}\nfunction a2c(x1, y1, rx, ry, angle, largeArcFlag, sweepFlag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  const v120 = Math.PI * 120 / 180;\n  const rad = Math.PI / 180 * (+angle || 0);\n  let res = [];\n  let xy;\n  let f1;\n  let f2;\n  let cx;\n  let cy;\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x; // eslint-disable-line\n    y1 = xy.y; // eslint-disable-line\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x; // eslint-disable-line\n    y2 = xy.y; // eslint-disable-line\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = x * x / (rx * rx) + y * y / (ry * ry);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx; // eslint-disable-line\n      ry = h * ry; // eslint-disable-line\n    }\n    const rx2 = rx * rx;\n    const ry2 = ry * ry;\n    const k = (largeArcFlag === sweepFlag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n    cx = k * rx * y / ry + (x1 + x2) / 2;\n    cy = k * -ry * x / rx + (y1 + y2) / 2;\n    f1 = Math.asin((y1 - cy) / ry);\n    f2 = Math.asin((y2 - cy) / ry);\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1;\n    }\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2;\n    }\n    if (sweepFlag && f1 > f2) {\n      f1 -= Math.PI * 2;\n    }\n    if (!sweepFlag && f2 > f1) {\n      f2 -= Math.PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n  let df = f2 - f1;\n  if (Math.abs(df) > v120) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n    f2 = f1 + v120 * (sweepFlag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2); // eslint-disable-line\n    y2 = cy + ry * Math.sin(f2); // eslint-disable-line\n    res = a2c(x2, y2, rx, ry, angle, 0, sweepFlag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n  df = f2 - f1;\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = 4 / 3 * (rx * t);\n  const hy = 4 / 3 * (ry * t);\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  }\n  {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    const newres = [];\n    const ii = res.length;\n    for (let i = 0; i < ii; i += 1) {\n      newres[i] = i % 2 ? rotate(+res[i - 1], +res[i], rad).y : rotate(+res[i], +res[i + 1], rad).x;\n    }\n    return newres;\n  }\n}\nfunction parse(pathData) {\n  if (!pathData) {\n    return null;\n  }\n  const spaces = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\n  // https://regexper.com/#%28%5Ba-z%5D%29%5B%5Cs%2C%5D*%28%28-%3F%5Cd*%5C.%3F%5C%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*%29%2B%29\n  const segmentReg = new RegExp(`([a-z])[${spaces},]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[${spaces}]*,?[${spaces}]*)+)`,\n  // eslint-disable-line\n  'ig');\n  // https://regexper.com/#%28-%3F%5Cd*%5C.%3F%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%29%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*\n  const commandParamReg = new RegExp(\n  // eslint-disable-next-line\n  `(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[${spaces}]*,?[${spaces}]*`, 'ig');\n  const paramsCount = {\n    a: 7,\n    c: 6,\n    h: 1,\n    l: 2,\n    m: 2,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    z: 0\n  };\n  const segmetns = [];\n  pathData.replace(segmentReg, (input, cmd, args) => {\n    const params = [];\n    let command = cmd.toLowerCase();\n    args.replace(commandParamReg, (a, b) => {\n      if (b) {\n        params.push(+b);\n      }\n      return a;\n    });\n    if (command === 'm' && params.length > 2) {\n      segmetns.push([cmd, ...params.splice(0, 2)]);\n      command = 'l';\n      cmd = cmd === 'm' ? 'l' : 'L'; // eslint-disable-line\n    }\n    const count = paramsCount[command];\n    while (params.length >= count) {\n      segmetns.push([cmd, ...params.splice(0, count)]);\n      if (!count) {\n        break;\n      }\n    }\n    return input;\n  });\n  return segmetns;\n}\nfunction abs(pathString) {\n  const pathArray = parse(pathString);\n  // if invalid string, return 'M 0 0'\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n  const segments = [];\n  for (let i = 0, ii = pathArray.length; i < ii; i += 1) {\n    const r = [];\n    segments.push(r);\n    const segment = pathArray[i];\n    const command = segment[0];\n    if (command !== command.toUpperCase()) {\n      r[0] = command.toUpperCase();\n      switch (r[0]) {\n        case 'A':\n          r[1] = segment[1];\n          r[2] = segment[2];\n          r[3] = segment[3];\n          r[4] = segment[4];\n          r[5] = segment[5];\n          r[6] = +segment[6] + x;\n          r[7] = +segment[7] + y;\n          break;\n        case 'V':\n          r[1] = +segment[1] + y;\n          break;\n        case 'H':\n          r[1] = +segment[1] + x;\n          break;\n        case 'M':\n          mx = +segment[1] + x;\n          my = +segment[2] + y;\n          for (let j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y);\n          }\n          break;\n        default:\n          for (let j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y);\n          }\n          break;\n      }\n    } else {\n      for (let j = 0, jj = segment.length; j < jj; j += 1) {\n        r[j] = segment[j];\n      }\n    }\n    switch (r[0]) {\n      case 'Z':\n        x = +mx;\n        y = +my;\n        break;\n      case 'H':\n        x = r[1];\n        break;\n      case 'V':\n        y = r[1];\n        break;\n      case 'M':\n        mx = r[r.length - 2];\n        my = r[r.length - 1];\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        break;\n      default:\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        break;\n    }\n  }\n  return segments;\n}\nfunction normalize(path) {\n  const pathArray = abs(path);\n  const attrs = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null\n  };\n  function processPath(path, d, pcom) {\n    let nx;\n    let ny;\n    if (!path) {\n      return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n    }\n    if (!(path[0] in {\n      T: 1,\n      Q: 1\n    })) {\n      d.qx = null;\n      d.qy = null;\n    }\n    switch (path[0]) {\n      case 'M':\n        d.X = path[1];\n        d.Y = path[2];\n        break;\n      case 'A':\n        if (parseFloat(path[1]) === 0 || parseFloat(path[2]) === 0) {\n          // https://www.w3.org/TR/SVG/paths.html#ArcOutOfRangeParameters\n          // \"If either rx or ry is 0, then this arc is treated as a\n          // straight line segment (a \"lineto\") joining the endpoints.\"\n          return ['L', path[6], path[7]];\n        }\n        return ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n      case 'S':\n        if (pcom === 'C' || pcom === 'S') {\n          // In 'S' case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx; // And reflect the previous\n          ny = d.y * 2 - d.by; // command's control point relative to the current point.\n        } else {\n          // or some else or nothing\n          nx = d.x;\n          ny = d.y;\n        }\n        return ['C', nx, ny].concat(path.slice(1));\n      case 'T':\n        if (pcom === 'Q' || pcom === 'T') {\n          // In 'T' case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx; // And make a reflection similar\n          d.qy = d.y * 2 - d.qy; // to case 'S'.\n        } else {\n          // or something else or nothing\n          d.qx = d.x;\n          d.qy = d.y;\n        }\n        return ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n      case 'Q':\n        d.qx = path[1];\n        d.qy = path[2];\n        return ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n      case 'H':\n        return ['L'].concat(path[1], d.y);\n      case 'V':\n        return ['L'].concat(d.x, path[1]);\n      case 'L':\n        break;\n      case 'Z':\n        break;\n      default:\n        break;\n    }\n    return path;\n  }\n  function fixArc(pp, i) {\n    if (pp[i].length > 7) {\n      pp[i].shift();\n      const pi = pp[i];\n      while (pi.length) {\n        // if created multiple 'C's, their original seg is saved\n        commands[i] = 'A';\n        i += 1; // eslint-disable-line\n        pp.splice(i, 0, ['C'].concat(pi.splice(0, 6)));\n      }\n      pp.splice(i, 1);\n      ii = pathArray.length;\n    }\n  }\n  const commands = []; // path commands of original path p\n  let prevCommand = ''; // holder for previous path command of original path\n  let ii = pathArray.length;\n  for (let i = 0; i < ii; i += 1) {\n    let command = ''; // temporary holder for original path command\n    if (pathArray[i]) {\n      command = pathArray[i][0]; // save current path command\n    }\n    if (command !== 'C') {\n      // C is not saved yet, because it may be result of conversion\n      commands[i] = command; // Save current path command\n      if (i > 0) {\n        prevCommand = commands[i - 1]; // Get previous path command pcom\n      }\n    }\n    // Previous path command is inputted to processPath\n    pathArray[i] = processPath(pathArray[i], attrs, prevCommand);\n    if (commands[i] !== 'A' && command === 'C') {\n      commands[i] = 'C'; // 'A' is the only command\n    }\n    // which may produce multiple 'C's\n    // so we have to make sure that 'C' is also 'C' in original path\n    fixArc(pathArray, i); // fixArc adds also the right amount of 'A's to pcoms\n    const seg = pathArray[i];\n    const seglen = seg.length;\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n  }\n  // make sure normalized path data string starts with an M segment\n  if (!pathArray[0][0] || pathArray[0][0] !== 'M') {\n    pathArray.unshift(['M', 0, 0]);\n  }\n  return pathArray;\n}\n/**\n * Converts provided SVG path data string into a normalized path data string.\n *\n * The normalization uses a restricted subset of path commands; all segments\n * are translated into lineto, curveto, moveto, and closepath segments.\n *\n * Relative path commands are changed into their absolute counterparts,\n * and chaining of coordinates is disallowed.\n *\n * The function will always return a valid path data string; if an input\n * string cannot be normalized, 'M 0 0' is returned.\n */\nexport function normalizePathData(pathData) {\n  return normalize(pathData).map(segment => segment.map(item => typeof item === 'string' ? item : GeometryUtil.round(item, 2))).join(',').split(',').join(' ');\n}","map":{"version":3,"names":["GeometryUtil","rotate","x","y","rad","Math","cos","sin","q2c","x1","y1","ax","ay","x2","y2","v13","v23","a2c","rx","ry","angle","largeArcFlag","sweepFlag","recursive","v120","PI","res","xy","f1","f2","cx","cy","h","sqrt","rx2","ry2","k","abs","asin","df","f2old","x2old","y2old","c1","s1","c2","s2","t","tan","hx","hy","m1","m2","m3","m4","concat","join","split","newres","ii","length","i","parse","pathData","spaces","segmentReg","RegExp","commandParamReg","paramsCount","a","c","l","m","q","s","v","z","segmetns","replace","input","cmd","args","params","command","toLowerCase","b","push","splice","count","pathString","pathArray","mx","my","segments","r","segment","toUpperCase","j","jj","normalize","path","attrs","bx","by","X","Y","qx","qy","processPath","d","pcom","nx","ny","T","Q","parseFloat","apply","slice","fixArc","pp","shift","pi","commands","prevCommand","seg","seglen","unshift","normalizePathData","map","item","round"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-geometry@2.0.5/node_modules/@antv/x6-geometry/src/path/normalize.ts"],"sourcesContent":["import { GeometryUtil } from '../util'\n\ntype Segment = [string, ...number[]]\n\nfunction rotate(x: number, y: number, rad: number) {\n  return {\n    x: x * Math.cos(rad) - y * Math.sin(rad),\n    y: x * Math.sin(rad) + y * Math.cos(rad),\n  }\n}\n\nfunction q2c(\n  x1: number,\n  y1: number,\n  ax: number,\n  ay: number,\n  x2: number,\n  y2: number,\n) {\n  const v13 = 1 / 3\n  const v23 = 2 / 3\n  return [\n    v13 * x1 + v23 * ax,\n    v13 * y1 + v23 * ay,\n    v13 * x2 + v23 * ax,\n    v13 * y2 + v23 * ay,\n    x2,\n    y2,\n  ]\n}\n\nfunction a2c(\n  x1: number,\n  y1: number,\n  rx: number,\n  ry: number,\n  angle: number,\n  largeArcFlag: number,\n  sweepFlag: number,\n  x2: number,\n  y2: number,\n  recursive?: [number, number, number, number],\n): any[] {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  const v120 = (Math.PI * 120) / 180\n  const rad = (Math.PI / 180) * (+angle || 0)\n  let res = []\n  let xy\n  let f1\n  let f2\n  let cx\n  let cy\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad)\n    x1 = xy.x // eslint-disable-line\n    y1 = xy.y // eslint-disable-line\n\n    xy = rotate(x2, y2, -rad)\n    x2 = xy.x // eslint-disable-line\n    y2 = xy.y // eslint-disable-line\n\n    const x = (x1 - x2) / 2\n    const y = (y1 - y2) / 2\n    let h = (x * x) / (rx * rx) + (y * y) / (ry * ry)\n\n    if (h > 1) {\n      h = Math.sqrt(h)\n      rx = h * rx // eslint-disable-line\n      ry = h * ry // eslint-disable-line\n    }\n\n    const rx2 = rx * rx\n    const ry2 = ry * ry\n\n    const k =\n      (largeArcFlag === sweepFlag ? -1 : 1) *\n      Math.sqrt(\n        Math.abs(\n          (rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x),\n        ),\n      )\n\n    cx = (k * rx * y) / ry + (x1 + x2) / 2\n    cy = (k * -ry * x) / rx + (y1 + y2) / 2\n\n    f1 = Math.asin((y1 - cy) / ry)\n    f2 = Math.asin((y2 - cy) / ry)\n\n    f1 = x1 < cx ? Math.PI - f1 : f1\n    f2 = x2 < cx ? Math.PI - f2 : f2\n\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1\n    }\n\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2\n    }\n\n    if (sweepFlag && f1 > f2) {\n      f1 -= Math.PI * 2\n    }\n\n    if (!sweepFlag && f2 > f1) {\n      f2 -= Math.PI * 2\n    }\n  } else {\n    f1 = recursive[0]\n    f2 = recursive[1]\n    cx = recursive[2]\n    cy = recursive[3]\n  }\n\n  let df = f2 - f1\n  if (Math.abs(df) > v120) {\n    const f2old = f2\n    const x2old = x2\n    const y2old = y2\n    f2 = f1 + v120 * (sweepFlag && f2 > f1 ? 1 : -1)\n    x2 = cx + rx * Math.cos(f2) // eslint-disable-line\n    y2 = cy + ry * Math.sin(f2) // eslint-disable-line\n    res = a2c(x2, y2, rx, ry, angle, 0, sweepFlag, x2old, y2old, [\n      f2,\n      f2old,\n      cx,\n      cy,\n    ])\n  }\n\n  df = f2 - f1\n\n  const c1 = Math.cos(f1)\n  const s1 = Math.sin(f1)\n  const c2 = Math.cos(f2)\n  const s2 = Math.sin(f2)\n  const t = Math.tan(df / 4)\n  const hx = (4 / 3) * (rx * t)\n  const hy = (4 / 3) * (ry * t)\n  const m1 = [x1, y1]\n  const m2 = [x1 + hx * s1, y1 - hy * c1]\n  const m3 = [x2 + hx * s2, y2 - hy * c2]\n  const m4 = [x2, y2]\n\n  m2[0] = 2 * m1[0] - m2[0]\n  m2[1] = 2 * m1[1] - m2[1]\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res)\n  }\n\n  {\n    res = [m2, m3, m4].concat(res).join().split(',')\n\n    const newres = []\n    const ii = res.length\n    for (let i = 0; i < ii; i += 1) {\n      newres[i] =\n        i % 2\n          ? rotate(+res[i - 1], +res[i], rad).y\n          : rotate(+res[i], +res[i + 1], rad).x\n    }\n    return newres\n  }\n}\n\nfunction parse(pathData: string) {\n  if (!pathData) {\n    return null\n  }\n\n  const spaces =\n    '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029'\n\n  // https://regexper.com/#%28%5Ba-z%5D%29%5B%5Cs%2C%5D*%28%28-%3F%5Cd*%5C.%3F%5C%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*%29%2B%29\n  const segmentReg = new RegExp(\n    `([a-z])[${spaces},]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[${spaces}]*,?[${spaces}]*)+)`, // eslint-disable-line\n    'ig',\n  )\n\n  // https://regexper.com/#%28-%3F%5Cd*%5C.%3F%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%29%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*\n  const commandParamReg = new RegExp(\n    // eslint-disable-next-line\n    `(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[${spaces}]*,?[${spaces}]*`,\n    'ig',\n  )\n\n  const paramsCount = {\n    a: 7,\n    c: 6,\n    h: 1,\n    l: 2,\n    m: 2,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    z: 0,\n  }\n\n  const segmetns: Segment[] = []\n\n  pathData.replace(segmentReg, (input: string, cmd: string, args: string) => {\n    const params: number[] = []\n    let command = cmd.toLowerCase()\n\n    args.replace(commandParamReg, (a: string, b: string) => {\n      if (b) {\n        params.push(+b)\n      }\n      return a\n    })\n\n    if (command === 'm' && params.length > 2) {\n      segmetns.push([cmd, ...params.splice(0, 2)])\n      command = 'l'\n      cmd = cmd === 'm' ? 'l' : 'L' // eslint-disable-line\n    }\n\n    const count = paramsCount[command as keyof typeof paramsCount]\n    while (params.length >= count) {\n      segmetns.push([cmd, ...params.splice(0, count)])\n      if (!count) {\n        break\n      }\n    }\n\n    return input\n  })\n\n  return segmetns\n}\n\nfunction abs(pathString: string) {\n  const pathArray = parse(pathString)\n\n  // if invalid string, return 'M 0 0'\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]]\n  }\n\n  let x = 0\n  let y = 0\n  let mx = 0\n  let my = 0\n  const segments = []\n\n  for (let i = 0, ii = pathArray.length; i < ii; i += 1) {\n    const r: any = []\n\n    segments.push(r)\n\n    const segment = pathArray[i]\n    const command = segment[0]\n    if (command !== command.toUpperCase()) {\n      r[0] = command.toUpperCase()\n\n      switch (r[0]) {\n        case 'A':\n          r[1] = segment[1]\n          r[2] = segment[2]\n          r[3] = segment[3]\n          r[4] = segment[4]\n          r[5] = segment[5]\n          r[6] = +segment[6] + x\n          r[7] = +segment[7] + y\n          break\n\n        case 'V':\n          r[1] = +segment[1] + y\n          break\n\n        case 'H':\n          r[1] = +segment[1] + x\n          break\n\n        case 'M':\n          mx = +segment[1] + x\n          my = +segment[2] + y\n\n          for (let j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y)\n          }\n          break\n\n        default:\n          for (let j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y)\n          }\n          break\n      }\n    } else {\n      for (let j = 0, jj = segment.length; j < jj; j += 1) {\n        r[j] = segment[j]\n      }\n    }\n\n    switch (r[0]) {\n      case 'Z':\n        x = +mx\n        y = +my\n        break\n\n      case 'H':\n        x = r[1]\n        break\n\n      case 'V':\n        y = r[1]\n        break\n\n      case 'M':\n        mx = r[r.length - 2]\n        my = r[r.length - 1]\n        x = r[r.length - 2]\n        y = r[r.length - 1]\n        break\n\n      default:\n        x = r[r.length - 2]\n        y = r[r.length - 1]\n        break\n    }\n  }\n\n  return segments\n}\n\nfunction normalize(path: string) {\n  const pathArray = abs(path)\n  const attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null }\n\n  function processPath(path: any[], d: any, pcom: string) {\n    let nx\n    let ny\n\n    if (!path) {\n      return ['C', d.x, d.y, d.x, d.y, d.x, d.y]\n    }\n\n    if (!(path[0] in { T: 1, Q: 1 })) {\n      d.qx = null\n      d.qy = null\n    }\n\n    switch (path[0]) {\n      case 'M':\n        d.X = path[1]\n        d.Y = path[2]\n        break\n\n      case 'A':\n        if (parseFloat(path[1]) === 0 || parseFloat(path[2]) === 0) {\n          // https://www.w3.org/TR/SVG/paths.html#ArcOutOfRangeParameters\n          // \"If either rx or ry is 0, then this arc is treated as a\n          // straight line segment (a \"lineto\") joining the endpoints.\"\n          return ['L', path[6], path[7]]\n        }\n\n        return ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))))\n\n      case 'S':\n        if (pcom === 'C' || pcom === 'S') {\n          // In 'S' case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx // And reflect the previous\n          ny = d.y * 2 - d.by // command's control point relative to the current point.\n        } else {\n          // or some else or nothing\n          nx = d.x\n          ny = d.y\n        }\n        return ['C', nx, ny].concat(path.slice(1))\n\n      case 'T':\n        if (pcom === 'Q' || pcom === 'T') {\n          // In 'T' case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx // And make a reflection similar\n          d.qy = d.y * 2 - d.qy // to case 'S'.\n        } else {\n          // or something else or nothing\n          d.qx = d.x\n          d.qy = d.y\n        }\n        return ['C'].concat(\n          q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]) as any[],\n        )\n\n      case 'Q':\n        d.qx = path[1]\n        d.qy = path[2]\n        return ['C'].concat(\n          q2c(d.x, d.y, path[1], path[2], path[3], path[4]) as any[],\n        )\n\n      case 'H':\n        return ['L'].concat(path[1], d.y)\n\n      case 'V':\n        return ['L'].concat(d.x, path[1])\n\n      case 'L':\n        break\n\n      case 'Z':\n        break\n\n      default:\n        break\n    }\n\n    return path\n  }\n\n  function fixArc(pp: any[], i: number) {\n    if (pp[i].length > 7) {\n      pp[i].shift()\n      const pi = pp[i]\n\n      while (pi.length) {\n        // if created multiple 'C's, their original seg is saved\n        commands[i] = 'A'\n        i += 1 // eslint-disable-line\n        pp.splice(i, 0, ['C'].concat(pi.splice(0, 6)))\n      }\n\n      pp.splice(i, 1)\n      ii = pathArray.length\n    }\n  }\n\n  const commands = [] // path commands of original path p\n  let prevCommand = '' // holder for previous path command of original path\n\n  let ii = pathArray.length\n  for (let i = 0; i < ii; i += 1) {\n    let command = '' // temporary holder for original path command\n\n    if (pathArray[i]) {\n      command = pathArray[i][0] // save current path command\n    }\n\n    if (command !== 'C') {\n      // C is not saved yet, because it may be result of conversion\n      commands[i] = command // Save current path command\n      if (i > 0) {\n        prevCommand = commands[i - 1] // Get previous path command pcom\n      }\n    }\n\n    // Previous path command is inputted to processPath\n    pathArray[i] = processPath(pathArray[i], attrs, prevCommand)\n\n    if (commands[i] !== 'A' && command === 'C') {\n      commands[i] = 'C' // 'A' is the only command\n    }\n\n    // which may produce multiple 'C's\n    // so we have to make sure that 'C' is also 'C' in original path\n\n    fixArc(pathArray, i) // fixArc adds also the right amount of 'A's to pcoms\n\n    const seg = pathArray[i]\n    const seglen = seg.length\n\n    attrs.x = seg[seglen - 2]\n    attrs.y = seg[seglen - 1]\n\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y\n  }\n\n  // make sure normalized path data string starts with an M segment\n  if (!pathArray[0][0] || pathArray[0][0] !== 'M') {\n    pathArray.unshift(['M', 0, 0])\n  }\n\n  return pathArray\n}\n\n/**\n * Converts provided SVG path data string into a normalized path data string.\n *\n * The normalization uses a restricted subset of path commands; all segments\n * are translated into lineto, curveto, moveto, and closepath segments.\n *\n * Relative path commands are changed into their absolute counterparts,\n * and chaining of coordinates is disallowed.\n *\n * The function will always return a valid path data string; if an input\n * string cannot be normalized, 'M 0 0' is returned.\n */\nexport function normalizePathData(pathData: string) {\n  return normalize(pathData)\n    .map((segment: Segment) =>\n      segment.map((item) =>\n        typeof item === 'string' ? item : GeometryUtil.round(item, 2),\n      ),\n    )\n    .join(',')\n    .split(',')\n    .join(' ')\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}