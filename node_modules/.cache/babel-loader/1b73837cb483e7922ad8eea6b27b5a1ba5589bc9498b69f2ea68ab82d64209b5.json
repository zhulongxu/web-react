{"ast":null,"code":"import { call } from './util';\nimport { FunctionExt } from '../function';\nexport class Events {\n  constructor() {\n    this.listeners = {};\n  }\n  on(name, handler, context) {\n    if (handler == null) {\n      return this;\n    }\n    if (!this.listeners[name]) {\n      this.listeners[name] = [];\n    }\n    const cache = this.listeners[name];\n    cache.push(handler, context);\n    return this;\n  }\n  once(name, handler, context) {\n    const cb = (...args) => {\n      this.off(name, cb);\n      return call([handler, context], args);\n    };\n    return this.on(name, cb, this);\n  }\n  off(name, handler, context) {\n    // remove all events.\n    if (!(name || handler || context)) {\n      this.listeners = {};\n      return this;\n    }\n    const listeners = this.listeners;\n    const names = name ? [name] : Object.keys(listeners);\n    names.forEach(n => {\n      const cache = listeners[n];\n      if (!cache) {\n        return;\n      }\n      // remove all events with specified name.\n      if (!(handler || context)) {\n        delete listeners[n];\n        return;\n      }\n      for (let i = cache.length - 2; i >= 0; i -= 2) {\n        if (!(handler && cache[i] !== handler || context && cache[i + 1] !== context)) {\n          cache.splice(i, 2);\n        }\n      }\n    });\n    return this;\n  }\n  trigger(name, ...args) {\n    let returned = true;\n    if (name !== '*') {\n      const list = this.listeners[name];\n      if (list != null) {\n        returned = call([...list], args);\n      }\n    }\n    const list = this.listeners['*'];\n    if (list != null) {\n      return FunctionExt.toAsyncBoolean([returned, call([...list], [name, ...args])]);\n    }\n    return returned;\n  }\n  emit(name, ...args) {\n    return this.trigger(name, ...args);\n  }\n}","map":{"version":3,"names":["call","FunctionExt","Events","constructor","listeners","on","name","handler","context","cache","push","once","cb","args","off","names","Object","keys","forEach","n","i","length","splice","trigger","returned","list","toAsyncBoolean","emit"],"sources":["/home/devbox/project/node_modules/.pnpm/@antv+x6-common@2.0.17/node_modules/@antv/x6-common/src/event/events.ts"],"sourcesContent":["import { call } from './util'\nimport { FunctionExt } from '../function'\nimport {\n  Handler,\n  EventArgs,\n  EventNames,\n  OtherNames,\n  UnknownNames,\n  OptionalNormalNames,\n  RequiredNormalNames,\n  NamesWithArrayArgs,\n} from './types'\n\nexport class Events<Args extends EventArgs = any> {\n  private listeners: { [name: string]: any[] } = {}\n\n  on<Name extends EventNames<Args>>(\n    name: Name,\n    handler: Handler<Args[Name]>,\n    context?: any,\n  ): this\n  on<Name extends UnknownNames<Args>>(\n    name: Name,\n    handler: Handler<any>,\n    context?: any,\n  ): this\n  on<Name extends EventNames<Args>>(\n    name: Name,\n    handler: Handler<Args[Name]>,\n    context?: any,\n  ) {\n    if (handler == null) {\n      return this\n    }\n\n    if (!this.listeners[name]) {\n      this.listeners[name] = []\n    }\n    const cache = this.listeners[name]\n    cache.push(handler, context)\n\n    return this\n  }\n\n  once<Name extends EventNames<Args>>(\n    name: Name,\n    handler: Handler<Args[Name]>,\n    context?: any,\n  ): this\n  once<Name extends UnknownNames<Args>>(\n    name: Name,\n    handler: Handler<any>,\n    context?: any,\n  ): this\n  once<Name extends EventNames<Args>>(\n    name: Name,\n    handler: Handler<Args[Name]>,\n    context?: any,\n  ) {\n    const cb = (...args: any) => {\n      this.off(name, cb as any)\n      return call([handler, context], args)\n    }\n\n    return this.on(name, cb as any, this)\n  }\n\n  off(): this\n  off(name: null, handler: Handler<any>): this\n  off(name: null, handler: null, context: any): this\n  off<Name extends EventNames<Args>>(\n    name: Name,\n    handler?: Handler<Args[Name]>,\n    context?: any,\n  ): this\n  off<Name extends UnknownNames<Args>>(\n    name: Name,\n    handler?: Handler<any>,\n    context?: any,\n  ): this\n  off(name?: string | null, handler?: Handler<any> | null, context?: any) {\n    // remove all events.\n    if (!(name || handler || context)) {\n      this.listeners = {}\n      return this\n    }\n\n    const listeners = this.listeners\n    const names = name ? [name] : Object.keys(listeners)\n\n    names.forEach((n) => {\n      const cache = listeners[n]\n      if (!cache) {\n        return\n      }\n\n      // remove all events with specified name.\n      if (!(handler || context)) {\n        delete listeners[n]\n        return\n      }\n\n      for (let i = cache.length - 2; i >= 0; i -= 2) {\n        if (\n          !(\n            (handler && cache[i] !== handler) ||\n            (context && cache[i + 1] !== context)\n          )\n        ) {\n          cache.splice(i, 2)\n        }\n      }\n    })\n\n    return this\n  }\n\n  trigger<Name extends OptionalNormalNames<Args>>(\n    name: Name,\n  ): FunctionExt.AsyncBoolean\n  trigger<Name extends RequiredNormalNames<Args>>(\n    name: Name,\n    args: Args[Name],\n  ): FunctionExt.AsyncBoolean\n  trigger<Name extends NamesWithArrayArgs<Args>>(\n    name: Name,\n    ...args: Args[Name]\n  ): FunctionExt.AsyncBoolean\n  trigger<Name extends OtherNames<Args>>(\n    name: Name,\n    args?: Args[Name],\n  ): FunctionExt.AsyncBoolean\n  trigger<Name extends OtherNames<Args>>(\n    name: Name,\n    ...args: Args[Name]\n  ): FunctionExt.AsyncBoolean\n  trigger<Name extends UnknownNames<Args>>(\n    name: Name,\n    ...args: any[]\n  ): FunctionExt.AsyncBoolean\n  trigger<Name extends EventNames<Args>>(name: Name, ...args: any[]) {\n    let returned: FunctionExt.AsyncBoolean = true\n    if (name !== '*') {\n      const list = this.listeners[name]\n      if (list != null) {\n        returned = call([...list], args)\n      }\n    }\n\n    const list = this.listeners['*']\n    if (list != null) {\n      return FunctionExt.toAsyncBoolean([\n        returned,\n        call([...list], [name, ...args]),\n      ])\n    }\n\n    return returned\n  }\n\n  /**\n   * Triggers event with specified event name. Unknown names\n   * will cause a typescript type error.\n   */\n  protected emit<Name extends OptionalNormalNames<Args>>(\n    name: Name,\n  ): FunctionExt.AsyncBoolean\n  protected emit<Name extends RequiredNormalNames<Args>>(\n    name: Name,\n    args: Args[Name],\n  ): FunctionExt.AsyncBoolean\n  protected emit<Name extends NamesWithArrayArgs<Args>>(\n    name: Name,\n    ...args: Args[Name]\n  ): FunctionExt.AsyncBoolean\n  protected emit<Name extends OtherNames<Args>>(\n    name: Name,\n    args?: Args[Name],\n  ): FunctionExt.AsyncBoolean\n  protected emit<Name extends OtherNames<Args>>(\n    name: Name,\n    ...args: Args[Name]\n  ): FunctionExt.AsyncBoolean\n  protected emit(name: any, ...args: any[]) {\n    return this.trigger(name, ...args)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}